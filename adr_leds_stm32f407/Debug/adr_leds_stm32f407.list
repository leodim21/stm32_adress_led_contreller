
adr_leds_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002278  08002278  00012278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002290  08002290  000254a4  2**0
                  CONTENTS
  4 .ARM          00000008  08002290  08002290  00012290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002298  08002298  000254a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002298  08002298  00012298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800229c  0800229c  0001229c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000054a4  20000000  080022a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055a8  200054a4  08007744  000254a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  2000aa4c  08007744  0002aa4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000254a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f36  00000000  00000000  000254d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001940  00000000  00000000  0002f40a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003735  00000000  00000000  00030d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000648  00000000  00000000  00034480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000658  00000000  00000000  00034ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001fe28  00000000  00000000  00035120  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00006684  00000000  00000000  00054f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000c0e09  00000000  00000000  0005b5cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0011c3d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000103c  00000000  00000000  0011c450  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200054a4 	.word	0x200054a4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002260 	.word	0x08002260

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200054a8 	.word	0x200054a8
 80001c4:	08002260 	.word	0x08002260

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <ReverseLedLineArray>:
	}
}
static void ReverseLedLineArray(struct NEO_Pixel_s buff_out[], struct NEO_Pixel_s buff_in[], uint16_t buff_len)
{
	uint16_t len_tmp = buff_len - 1;
	for(uint16_t i = 0; i < buff_len; i++)
 80004c8:	b18a      	cbz	r2, 80004ee <ReverseLedLineArray+0x26>
{
 80004ca:	b410      	push	{r4}
 80004cc:	1e53      	subs	r3, r2, #1
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80004d4:	440b      	add	r3, r1
 80004d6:	3903      	subs	r1, #3
	{
		memcpy(&buff_out[i], &buff_in[len_tmp - i], sizeof(buff_out[i]));
 80004d8:	881c      	ldrh	r4, [r3, #0]
 80004da:	789a      	ldrb	r2, [r3, #2]
 80004dc:	8004      	strh	r4, [r0, #0]
 80004de:	7082      	strb	r2, [r0, #2]
 80004e0:	3003      	adds	r0, #3
 80004e2:	3b03      	subs	r3, #3
	for(uint16_t i = 0; i < buff_len; i++)
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d1f7      	bne.n	80004d8 <ReverseLedLineArray+0x10>
	}
}
 80004e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	4770      	bx	lr

080004f0 <SystemClock_Config>:
{
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f4:	2230      	movs	r2, #48	; 0x30
 80004f6:	2100      	movs	r1, #0
 80004f8:	a808      	add	r0, sp, #32
 80004fa:	f001 fea8 	bl	800224e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fe:	2400      	movs	r4, #0
 8000500:	9403      	str	r4, [sp, #12]
 8000502:	9404      	str	r4, [sp, #16]
 8000504:	9405      	str	r4, [sp, #20]
 8000506:	9406      	str	r4, [sp, #24]
 8000508:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	9401      	str	r4, [sp, #4]
 800050c:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <SystemClock_Config+0x90>)
 800050e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000510:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000514:	641a      	str	r2, [r3, #64]	; 0x40
 8000516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000520:	9402      	str	r4, [sp, #8]
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <SystemClock_Config+0x94>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000532:	9302      	str	r3, [sp, #8]
 8000534:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000536:	230a      	movs	r3, #10
 8000538:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053a:	2301      	movs	r3, #1
 800053c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053e:	2210      	movs	r2, #16
 8000540:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000542:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000544:	2502      	movs	r5, #2
 8000546:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000548:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800054a:	2308      	movs	r3, #8
 800054c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800054e:	23a8      	movs	r3, #168	; 0xa8
 8000550:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000552:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000554:	2304      	movs	r3, #4
 8000556:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000558:	a808      	add	r0, sp, #32
 800055a:	f001 f883 	bl	8001664 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055e:	230f      	movs	r3, #15
 8000560:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000562:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000564:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000566:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800056a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800056c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000570:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000572:	2105      	movs	r1, #5
 8000574:	a803      	add	r0, sp, #12
 8000576:	f001 fad9 	bl	8001b2c <HAL_RCC_ClockConfig>
}
 800057a:	b015      	add	sp, #84	; 0x54
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	bf00      	nop
 8000580:	40023800 	.word	0x40023800
 8000584:	40007000 	.word	0x40007000

08000588 <LED_SendData>:
	if (!((TIM1->CR1 & TIM_CR1_CEN)||(TIM4->CR1 & TIM_CR1_CEN)))
 8000588:	4b7c      	ldr	r3, [pc, #496]	; (800077c <LED_SendData+0x1f4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f013 0f01 	tst.w	r3, #1
 8000590:	d104      	bne.n	800059c <LED_SendData+0x14>
 8000592:	4b7b      	ldr	r3, [pc, #492]	; (8000780 <LED_SendData+0x1f8>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f013 0f01 	tst.w	r3, #1
 800059a:	d000      	beq.n	800059e <LED_SendData+0x16>
 800059c:	4770      	bx	lr
{
 800059e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005a2:	b083      	sub	sp, #12
 80005a4:	9001      	str	r0, [sp, #4]
static void SetOutLedArray( LED_HandleTypeDef *buff_out, LED_HandleTypeDef *buff_in, uint16_t buff_len_in_line )
{
	memcpy(  &buff_out->led_data.line1, &buff_in->led_data.line1, sizeof(buff_in->led_data.line1));
 80005a6:	4c77      	ldr	r4, [pc, #476]	; (8000784 <LED_SendData+0x1fc>)
 80005a8:	4d77      	ldr	r5, [pc, #476]	; (8000788 <LED_SendData+0x200>)
 80005aa:	f640 228c 	movw	r2, #2700	; 0xa8c
 80005ae:	4629      	mov	r1, r5
 80005b0:	4620      	mov	r0, r4
 80005b2:	f001 fe41 	bl	8002238 <memcpy>
	ReverseLedLineArray(buff_out->led_data.line2, buff_in->led_data.line2, buff_len_in_line);
 80005b6:	f604 278c 	addw	r7, r4, #2700	; 0xa8c
 80005ba:	f44f 7261 	mov.w	r2, #900	; 0x384
 80005be:	f605 218c 	addw	r1, r5, #2700	; 0xa8c
 80005c2:	4638      	mov	r0, r7
 80005c4:	f7ff ff80 	bl	80004c8 <ReverseLedLineArray>
	memcpy(  &buff_out->led_data.line3, &buff_in->led_data.line3, sizeof(buff_in->led_data.line3));
 80005c8:	f241 5118 	movw	r1, #5400	; 0x1518
 80005cc:	eb04 0b01 	add.w	fp, r4, r1
 80005d0:	f640 228c 	movw	r2, #2700	; 0xa8c
 80005d4:	4429      	add	r1, r5
 80005d6:	4658      	mov	r0, fp
 80005d8:	f001 fe2e 	bl	8002238 <memcpy>
	ReverseLedLineArray(buff_out->led_data.line4, buff_in->led_data.line4, buff_len_in_line);
 80005dc:	f60b 2a8c 	addw	sl, fp, #2700	; 0xa8c
 80005e0:	f44f 7261 	mov.w	r2, #900	; 0x384
 80005e4:	4969      	ldr	r1, [pc, #420]	; (800078c <LED_SendData+0x204>)
 80005e6:	4650      	mov	r0, sl
 80005e8:	f7ff ff6e 	bl	80004c8 <ReverseLedLineArray>
	memcpy(  &buff_out->led_data.line5, &buff_in->led_data.line5, sizeof(buff_in->led_data.line5));
 80005ec:	f642 2130 	movw	r1, #10800	; 0x2a30
 80005f0:	eb04 0901 	add.w	r9, r4, r1
 80005f4:	f640 228c 	movw	r2, #2700	; 0xa8c
 80005f8:	4429      	add	r1, r5
 80005fa:	4648      	mov	r0, r9
 80005fc:	f001 fe1c 	bl	8002238 <memcpy>
	ReverseLedLineArray(buff_out->led_data.line6, buff_in->led_data.line6, buff_len_in_line);
 8000600:	f609 268c 	addw	r6, r9, #2700	; 0xa8c
 8000604:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000608:	4961      	ldr	r1, [pc, #388]	; (8000790 <LED_SendData+0x208>)
 800060a:	4630      	mov	r0, r6
 800060c:	f7ff ff5c 	bl	80004c8 <ReverseLedLineArray>
	memcpy(  &buff_out->led_data.line7, &buff_in->led_data.line7, sizeof(buff_in->led_data.line7));
 8000610:	f643 7148 	movw	r1, #16200	; 0x3f48
 8000614:	eb04 0801 	add.w	r8, r4, r1
 8000618:	f640 228c 	movw	r2, #2700	; 0xa8c
 800061c:	4429      	add	r1, r5
 800061e:	4640      	mov	r0, r8
 8000620:	f001 fe0a 	bl	8002238 <memcpy>
	ReverseLedLineArray(buff_out->led_data.line8, buff_in->led_data.line8, buff_len_in_line);
 8000624:	f608 258c 	addw	r5, r8, #2700	; 0xa8c
 8000628:	f44f 7261 	mov.w	r2, #900	; 0x384
 800062c:	4959      	ldr	r1, [pc, #356]	; (8000794 <LED_SendData+0x20c>)
 800062e:	4628      	mov	r0, r5
 8000630:	f7ff ff4a 	bl	80004c8 <ReverseLedLineArray>
		local.data_buf[0] = (uint8_t *)local.buff_s.led_data.line1;
 8000634:	f245 4364 	movw	r3, #21604	; 0x5464
 8000638:	50e4      	str	r4, [r4, r3]
		local.data_buf[1] = (uint8_t *)local.buff_s.led_data.line2;
 800063a:	f245 4368 	movw	r3, #21608	; 0x5468
 800063e:	50e7      	str	r7, [r4, r3]
		local.data_buf[2] = (uint8_t *)local.buff_s.led_data.line3;
 8000640:	f245 4e6c 	movw	lr, #21612	; 0x546c
 8000644:	f844 b00e 	str.w	fp, [r4, lr]
		local.data_buf[3] = (uint8_t *)local.buff_s.led_data.line4;
 8000648:	f245 4c70 	movw	ip, #21616	; 0x5470
 800064c:	f844 a00c 	str.w	sl, [r4, ip]
		local.data_buf[4] = (uint8_t *)local.buff_s.led_data.line5;
 8000650:	f245 4a74 	movw	sl, #21620	; 0x5474
 8000654:	f844 900a 	str.w	r9, [r4, sl]
		local.data_buf[5] = (uint8_t *)local.buff_s.led_data.line6;
 8000658:	f245 4378 	movw	r3, #21624	; 0x5478
 800065c:	50e6      	str	r6, [r4, r3]
		local.data_buf[6] = (uint8_t *)local.buff_s.led_data.line7;
 800065e:	f245 497c 	movw	r9, #21628	; 0x547c
 8000662:	f844 8009 	str.w	r8, [r4, r9]
		local.data_buf[7] = (uint8_t *)local.buff_s.led_data.line8;
 8000666:	f504 42a9 	add.w	r2, r4, #21632	; 0x5480
 800066a:	6015      	str	r5, [r2, #0]
		local.data_len = data_len/8;
 800066c:	9a01      	ldr	r2, [sp, #4]
 800066e:	08d0      	lsrs	r0, r2, #3
 8000670:	f245 4284 	movw	r2, #21636	; 0x5484
 8000674:	52a0      	strh	r0, [r4, r2]
		local.send_start = 1;
 8000676:	f245 4292 	movw	r2, #21650	; 0x5492
 800067a:	2101      	movs	r1, #1
 800067c:	54a1      	strb	r1, [r4, r2]
		local.mem_buf_rd = 0;
 800067e:	2000      	movs	r0, #0
 8000680:	f245 4294 	movw	r2, #21652	; 0x5494
 8000684:	54a0      	strb	r0, [r4, r2]
		local.bit_count = 0;
 8000686:	f245 428a 	movw	r2, #21642	; 0x548a
 800068a:	54a0      	strb	r0, [r4, r2]
		local.byte_count = 0;
 800068c:	f245 418c 	movw	r1, #21644	; 0x548c
 8000690:	5260      	strh	r0, [r4, r1]
		local.last_bit = 0;
 8000692:	f245 4693 	movw	r6, #21651	; 0x5493
 8000696:	55a0      	strb	r0, [r4, r6]
		TIM1->CCR1 = local.pulse[(0x80 & local.data_buf[0][local.byte_count] << local.bit_count) >> 7];
 8000698:	7820      	ldrb	r0, [r4, #0]
 800069a:	11c0      	asrs	r0, r0, #7
 800069c:	f500 5029 	add.w	r0, r0, #10816	; 0x2a40
 80006a0:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 80006a4:	88c0      	ldrh	r0, [r0, #6]
 80006a6:	4e35      	ldr	r6, [pc, #212]	; (800077c <LED_SendData+0x1f4>)
 80006a8:	6370      	str	r0, [r6, #52]	; 0x34
		TIM1->CCR2 = local.pulse[(0x80 & local.data_buf[1][local.byte_count] << local.bit_count) >> 7];
 80006aa:	f894 0a8c 	ldrb.w	r0, [r4, #2700]	; 0xa8c
 80006ae:	5ca7      	ldrb	r7, [r4, r2]
 80006b0:	40b8      	lsls	r0, r7
 80006b2:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80006b6:	f500 5029 	add.w	r0, r0, #10816	; 0x2a40
 80006ba:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 80006be:	88c0      	ldrh	r0, [r0, #6]
 80006c0:	63b0      	str	r0, [r6, #56]	; 0x38
		TIM1->CCR3 = local.pulse[(0x80 & local.data_buf[2][local.byte_count] << local.bit_count) >> 7];
 80006c2:	5a60      	ldrh	r0, [r4, r1]
 80006c4:	f854 700e 	ldr.w	r7, [r4, lr]
 80006c8:	5c38      	ldrb	r0, [r7, r0]
 80006ca:	5ca7      	ldrb	r7, [r4, r2]
 80006cc:	40b8      	lsls	r0, r7
 80006ce:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80006d2:	f500 5029 	add.w	r0, r0, #10816	; 0x2a40
 80006d6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 80006da:	88c0      	ldrh	r0, [r0, #6]
 80006dc:	63f0      	str	r0, [r6, #60]	; 0x3c
		TIM1->CCR4 = local.pulse[(0x80 & local.data_buf[3][local.byte_count] << local.bit_count) >> 7];
 80006de:	5a60      	ldrh	r0, [r4, r1]
 80006e0:	f854 700c 	ldr.w	r7, [r4, ip]
 80006e4:	5c38      	ldrb	r0, [r7, r0]
 80006e6:	5ca7      	ldrb	r7, [r4, r2]
 80006e8:	40b8      	lsls	r0, r7
 80006ea:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80006ee:	f500 5029 	add.w	r0, r0, #10816	; 0x2a40
 80006f2:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 80006f6:	88c0      	ldrh	r0, [r0, #6]
 80006f8:	6430      	str	r0, [r6, #64]	; 0x40
		TIM8->CCR1 = local.pulse[(0x80 & local.data_buf[4][local.byte_count] << local.bit_count) >> 7];
 80006fa:	5a60      	ldrh	r0, [r4, r1]
 80006fc:	f854 700a 	ldr.w	r7, [r4, sl]
 8000700:	5c38      	ldrb	r0, [r7, r0]
 8000702:	5ca7      	ldrb	r7, [r4, r2]
 8000704:	40b8      	lsls	r0, r7
 8000706:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 800070a:	f500 5029 	add.w	r0, r0, #10816	; 0x2a40
 800070e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 8000712:	88c7      	ldrh	r7, [r0, #6]
 8000714:	4820      	ldr	r0, [pc, #128]	; (8000798 <LED_SendData+0x210>)
 8000716:	6347      	str	r7, [r0, #52]	; 0x34
		TIM8->CCR2 = local.pulse[(0x80 & local.data_buf[5][local.byte_count] << local.bit_count) >> 7];
 8000718:	5a67      	ldrh	r7, [r4, r1]
 800071a:	58e3      	ldr	r3, [r4, r3]
 800071c:	5ddb      	ldrb	r3, [r3, r7]
 800071e:	5ca7      	ldrb	r7, [r4, r2]
 8000720:	40bb      	lsls	r3, r7
 8000722:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000726:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800072a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800072e:	88db      	ldrh	r3, [r3, #6]
 8000730:	6383      	str	r3, [r0, #56]	; 0x38
		TIM8->CCR3 = local.pulse[(0x80 & local.data_buf[6][local.byte_count] << local.bit_count) >> 7];
 8000732:	5a63      	ldrh	r3, [r4, r1]
 8000734:	f854 7009 	ldr.w	r7, [r4, r9]
 8000738:	5cfb      	ldrb	r3, [r7, r3]
 800073a:	5ca7      	ldrb	r7, [r4, r2]
 800073c:	40bb      	lsls	r3, r7
 800073e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000742:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8000746:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800074a:	88db      	ldrh	r3, [r3, #6]
 800074c:	63c3      	str	r3, [r0, #60]	; 0x3c
		TIM8->CCR4 = local.pulse[(0x80 & local.data_buf[7][local.byte_count] << local.bit_count) >> 7];
 800074e:	5a63      	ldrh	r3, [r4, r1]
 8000750:	5ceb      	ldrb	r3, [r5, r3]
 8000752:	5ca2      	ldrb	r2, [r4, r2]
 8000754:	4093      	lsls	r3, r2
 8000756:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800075a:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800075e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8000762:	88e3      	ldrh	r3, [r4, #6]
 8000764:	6403      	str	r3, [r0, #64]	; 0x40
		TIM1->CR1 |= TIM_CR1_CEN;
 8000766:	6833      	ldr	r3, [r6, #0]
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6033      	str	r3, [r6, #0]
		TIM8->CR1 |= TIM_CR1_CEN;
 800076e:	6803      	ldr	r3, [r0, #0]
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6003      	str	r3, [r0, #0]
}
 8000776:	b003      	add	sp, #12
 8000778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800077c:	40010000 	.word	0x40010000
 8000780:	40000800 	.word	0x40000800
 8000784:	20000000 	.word	0x20000000
 8000788:	200054c0 	.word	0x200054c0
 800078c:	20007464 	.word	0x20007464
 8000790:	2000897c 	.word	0x2000897c
 8000794:	20009e94 	.word	0x20009e94
 8000798:	40010400 	.word	0x40010400

0800079c <TIM1_UPD_Servo_Set>:
{
 800079c:	b430      	push	{r4, r5}
	if(local.bit_count++ > 6)
 800079e:	4a59      	ldr	r2, [pc, #356]	; (8000904 <TIM1_UPD_Servo_Set+0x168>)
 80007a0:	f245 438a 	movw	r3, #21642	; 0x548a
 80007a4:	5cd3      	ldrb	r3, [r2, r3]
 80007a6:	2b06      	cmp	r3, #6
 80007a8:	f200 8091 	bhi.w	80008ce <TIM1_UPD_Servo_Set+0x132>
 80007ac:	3301      	adds	r3, #1
 80007ae:	4611      	mov	r1, r2
 80007b0:	f245 428a 	movw	r2, #21642	; 0x548a
 80007b4:	548b      	strb	r3, [r1, r2]
	TIM1->CCR1 = local.pulse[(0x80 & local.data_buf[0][local.byte_count] << local.bit_count) >> 7];
 80007b6:	4b53      	ldr	r3, [pc, #332]	; (8000904 <TIM1_UPD_Servo_Set+0x168>)
 80007b8:	f245 428c 	movw	r2, #21644	; 0x548c
 80007bc:	5a99      	ldrh	r1, [r3, r2]
 80007be:	f245 4064 	movw	r0, #21604	; 0x5464
 80007c2:	5818      	ldr	r0, [r3, r0]
 80007c4:	5c41      	ldrb	r1, [r0, r1]
 80007c6:	f245 448a 	movw	r4, #21642	; 0x548a
 80007ca:	5d18      	ldrb	r0, [r3, r4]
 80007cc:	4081      	lsls	r1, r0
 80007ce:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 80007d2:	f501 5129 	add.w	r1, r1, #10816	; 0x2a40
 80007d6:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80007da:	88c9      	ldrh	r1, [r1, #6]
 80007dc:	484a      	ldr	r0, [pc, #296]	; (8000908 <TIM1_UPD_Servo_Set+0x16c>)
 80007de:	6341      	str	r1, [r0, #52]	; 0x34
	TIM1->CCR2 = local.pulse[(0x80 & local.data_buf[1][local.byte_count] << local.bit_count) >> 7];
 80007e0:	5a99      	ldrh	r1, [r3, r2]
 80007e2:	f245 4568 	movw	r5, #21608	; 0x5468
 80007e6:	595d      	ldr	r5, [r3, r5]
 80007e8:	5c69      	ldrb	r1, [r5, r1]
 80007ea:	5d1d      	ldrb	r5, [r3, r4]
 80007ec:	40a9      	lsls	r1, r5
 80007ee:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 80007f2:	f501 5129 	add.w	r1, r1, #10816	; 0x2a40
 80007f6:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80007fa:	88c9      	ldrh	r1, [r1, #6]
 80007fc:	6381      	str	r1, [r0, #56]	; 0x38
	TIM1->CCR3 = local.pulse[(0x80 & local.data_buf[2][local.byte_count] << local.bit_count) >> 7];
 80007fe:	5a99      	ldrh	r1, [r3, r2]
 8000800:	f245 456c 	movw	r5, #21612	; 0x546c
 8000804:	595d      	ldr	r5, [r3, r5]
 8000806:	5c69      	ldrb	r1, [r5, r1]
 8000808:	5d1d      	ldrb	r5, [r3, r4]
 800080a:	40a9      	lsls	r1, r5
 800080c:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 8000810:	f501 5129 	add.w	r1, r1, #10816	; 0x2a40
 8000814:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8000818:	88c9      	ldrh	r1, [r1, #6]
 800081a:	63c1      	str	r1, [r0, #60]	; 0x3c
	TIM1->CCR4 = local.pulse[(0x80 & local.data_buf[3][local.byte_count] << local.bit_count) >> 7];
 800081c:	5a99      	ldrh	r1, [r3, r2]
 800081e:	f245 4570 	movw	r5, #21616	; 0x5470
 8000822:	595d      	ldr	r5, [r3, r5]
 8000824:	5c69      	ldrb	r1, [r5, r1]
 8000826:	5d1d      	ldrb	r5, [r3, r4]
 8000828:	40a9      	lsls	r1, r5
 800082a:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 800082e:	f501 5129 	add.w	r1, r1, #10816	; 0x2a40
 8000832:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8000836:	88c9      	ldrh	r1, [r1, #6]
 8000838:	6401      	str	r1, [r0, #64]	; 0x40
	TIM8->CCR1 = local.pulse[(0x80 & local.data_buf[4][local.byte_count] << local.bit_count) >> 7];
 800083a:	5a99      	ldrh	r1, [r3, r2]
 800083c:	f245 4074 	movw	r0, #21620	; 0x5474
 8000840:	5818      	ldr	r0, [r3, r0]
 8000842:	5c41      	ldrb	r1, [r0, r1]
 8000844:	5d18      	ldrb	r0, [r3, r4]
 8000846:	4081      	lsls	r1, r0
 8000848:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 800084c:	f501 5129 	add.w	r1, r1, #10816	; 0x2a40
 8000850:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8000854:	88c9      	ldrh	r1, [r1, #6]
 8000856:	482d      	ldr	r0, [pc, #180]	; (800090c <TIM1_UPD_Servo_Set+0x170>)
 8000858:	6341      	str	r1, [r0, #52]	; 0x34
	TIM8->CCR2 = local.pulse[(0x80 & local.data_buf[5][local.byte_count] << local.bit_count) >> 7];
 800085a:	5a99      	ldrh	r1, [r3, r2]
 800085c:	f245 4578 	movw	r5, #21624	; 0x5478
 8000860:	595d      	ldr	r5, [r3, r5]
 8000862:	5c69      	ldrb	r1, [r5, r1]
 8000864:	5d1d      	ldrb	r5, [r3, r4]
 8000866:	40a9      	lsls	r1, r5
 8000868:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 800086c:	f501 5129 	add.w	r1, r1, #10816	; 0x2a40
 8000870:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8000874:	88c9      	ldrh	r1, [r1, #6]
 8000876:	6381      	str	r1, [r0, #56]	; 0x38
	TIM8->CCR3 = local.pulse[(0x80 & local.data_buf[6][local.byte_count] << local.bit_count) >> 7];
 8000878:	5a99      	ldrh	r1, [r3, r2]
 800087a:	f245 457c 	movw	r5, #21628	; 0x547c
 800087e:	595d      	ldr	r5, [r3, r5]
 8000880:	5c69      	ldrb	r1, [r5, r1]
 8000882:	5d1d      	ldrb	r5, [r3, r4]
 8000884:	40a9      	lsls	r1, r5
 8000886:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 800088a:	f501 5129 	add.w	r1, r1, #10816	; 0x2a40
 800088e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8000892:	88c9      	ldrh	r1, [r1, #6]
 8000894:	63c1      	str	r1, [r0, #60]	; 0x3c
	TIM8->CCR4 = local.pulse[(0x80 & local.data_buf[7][local.byte_count] << local.bit_count) >> 7];
 8000896:	5a99      	ldrh	r1, [r3, r2]
 8000898:	f503 45a9 	add.w	r5, r3, #21632	; 0x5480
 800089c:	682d      	ldr	r5, [r5, #0]
 800089e:	5c69      	ldrb	r1, [r5, r1]
 80008a0:	5d1c      	ldrb	r4, [r3, r4]
 80008a2:	40a1      	lsls	r1, r4
 80008a4:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 80008a8:	f501 5129 	add.w	r1, r1, #10816	; 0x2a40
 80008ac:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80008b0:	88c9      	ldrh	r1, [r1, #6]
 80008b2:	6401      	str	r1, [r0, #64]	; 0x40
	( local.byte_count == local.data_len )?( TIM_SendEnd() ):( TIM1->CR1 |= TIM_CR1_CEN );
 80008b4:	5a9a      	ldrh	r2, [r3, r2]
 80008b6:	f245 4184 	movw	r1, #21636	; 0x5484
 80008ba:	5a5b      	ldrh	r3, [r3, r1]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d011      	beq.n	80008e4 <TIM1_UPD_Servo_Set+0x148>
 80008c0:	4a11      	ldr	r2, [pc, #68]	; (8000908 <TIM1_UPD_Servo_Set+0x16c>)
 80008c2:	6813      	ldr	r3, [r2, #0]
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6013      	str	r3, [r2, #0]
}
 80008ca:	bc30      	pop	{r4, r5}
 80008cc:	4770      	bx	lr
		local.bit_count = 0;
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <TIM1_UPD_Servo_Set+0x168>)
 80008d0:	f245 428a 	movw	r2, #21642	; 0x548a
 80008d4:	2100      	movs	r1, #0
 80008d6:	5499      	strb	r1, [r3, r2]
		local.byte_count++;
 80008d8:	f245 418c 	movw	r1, #21644	; 0x548c
 80008dc:	5a5a      	ldrh	r2, [r3, r1]
 80008de:	3201      	adds	r2, #1
 80008e0:	525a      	strh	r2, [r3, r1]
 80008e2:	e768      	b.n	80007b6 <TIM1_UPD_Servo_Set+0x1a>
	TIM1->CR1 &= ~TIM_CR1_CEN;
 80008e4:	4a08      	ldr	r2, [pc, #32]	; (8000908 <TIM1_UPD_Servo_Set+0x16c>)
 80008e6:	6813      	ldr	r3, [r2, #0]
 80008e8:	f023 0301 	bic.w	r3, r3, #1
 80008ec:	6013      	str	r3, [r2, #0]
	TIM8->CR1 &= ~TIM_CR1_CEN;
 80008ee:	6803      	ldr	r3, [r0, #0]
 80008f0:	f023 0301 	bic.w	r3, r3, #1
 80008f4:	6003      	str	r3, [r0, #0]
	local.send_start = 0;
 80008f6:	4a03      	ldr	r2, [pc, #12]	; (8000904 <TIM1_UPD_Servo_Set+0x168>)
 80008f8:	f245 4392 	movw	r3, #21650	; 0x5492
 80008fc:	2100      	movs	r1, #0
 80008fe:	54d1      	strb	r1, [r2, r3]
 8000900:	e7e3      	b.n	80008ca <TIM1_UPD_Servo_Set+0x12e>
 8000902:	bf00      	nop
 8000904:	20000000 	.word	0x20000000
 8000908:	40010000 	.word	0x40010000
 800090c:	40010400 	.word	0x40010400

08000910 <HAL_SPI_RxCpltCallback>:
	if (hspi == &hspi1)
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <HAL_SPI_RxCpltCallback+0x14>)
 8000912:	4283      	cmp	r3, r0
 8000914:	d000      	beq.n	8000918 <HAL_SPI_RxCpltCallback+0x8>
}
 8000916:	4770      	bx	lr
		local.mem_buf_rd = 1;
 8000918:	4a03      	ldr	r2, [pc, #12]	; (8000928 <HAL_SPI_RxCpltCallback+0x18>)
 800091a:	f245 4394 	movw	r3, #21652	; 0x5494
 800091e:	2101      	movs	r1, #1
 8000920:	54d1      	strb	r1, [r2, r3]
}
 8000922:	e7f8      	b.n	8000916 <HAL_SPI_RxCpltCallback+0x6>
 8000924:	2000a930 	.word	0x2000a930
 8000928:	20000000 	.word	0x20000000

0800092c <Delay>:
	while(tmp_ms--)
 800092c:	b188      	cbz	r0, 8000952 <Delay+0x26>
{
 800092e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000930:	1e44      	subs	r4, r0, #1
 8000932:	b2a4      	uxth	r4, r4
		HAL_Delay(1);
 8000934:	2701      	movs	r7, #1
		HAL_IWDG_Refresh(&hiwdg);
 8000936:	4e07      	ldr	r6, [pc, #28]	; (8000954 <Delay+0x28>)
	while(tmp_ms--)
 8000938:	f64f 75ff 	movw	r5, #65535	; 0xffff
		HAL_Delay(1);
 800093c:	4638      	mov	r0, r7
 800093e:	f000 fb15 	bl	8000f6c <HAL_Delay>
		HAL_IWDG_Refresh(&hiwdg);
 8000942:	4630      	mov	r0, r6
 8000944:	f000 fe87 	bl	8001656 <HAL_IWDG_Refresh>
	while(tmp_ms--)
 8000948:	3c01      	subs	r4, #1
 800094a:	b2a4      	uxth	r4, r4
 800094c:	42ac      	cmp	r4, r5
 800094e:	d1f5      	bne.n	800093c <Delay+0x10>
}
 8000950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000952:	4770      	bx	lr
 8000954:	2000a924 	.word	0x2000a924

08000958 <main>:
{
 8000958:	b500      	push	{lr}
 800095a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800095c:	f000 fada 	bl	8000f14 <HAL_Init>
  SystemClock_Config();
 8000960:	f7ff fdc6 	bl	80004f0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	2400      	movs	r4, #0
 8000966:	9404      	str	r4, [sp, #16]
 8000968:	9405      	str	r4, [sp, #20]
 800096a:	9406      	str	r4, [sp, #24]
 800096c:	9407      	str	r4, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	9400      	str	r4, [sp, #0]
 8000970:	4da9      	ldr	r5, [pc, #676]	; (8000c18 <main+0x2c0>)
 8000972:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000978:	632b      	str	r3, [r5, #48]	; 0x30
 800097a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800097c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000984:	9401      	str	r4, [sp, #4]
 8000986:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	632b      	str	r3, [r5, #48]	; 0x30
 800098e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	9301      	str	r3, [sp, #4]
 8000996:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000998:	9402      	str	r4, [sp, #8]
 800099a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	632b      	str	r3, [r5, #48]	; 0x30
 80009a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	9302      	str	r3, [sp, #8]
 80009aa:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ac:	a908      	add	r1, sp, #32
 80009ae:	2301      	movs	r3, #1
 80009b0:	f841 3d14 	str.w	r3, [r1, #-20]!
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	4899      	ldr	r0, [pc, #612]	; (8000c1c <main+0x2c4>)
 80009b6:	f000 fd35 	bl	8001424 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ba:	9403      	str	r4, [sp, #12]
 80009bc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80009be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009c2:	632b      	str	r3, [r5, #48]	; 0x30
 80009c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80009c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ca:	9303      	str	r3, [sp, #12]
 80009cc:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009ce:	4622      	mov	r2, r4
 80009d0:	4621      	mov	r1, r4
 80009d2:	2038      	movs	r0, #56	; 0x38
 80009d4:	f000 faf0 	bl	8000fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009d8:	2038      	movs	r0, #56	; 0x38
 80009da:	f000 fb1f 	bl	800101c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80009de:	4622      	mov	r2, r4
 80009e0:	4621      	mov	r1, r4
 80009e2:	203b      	movs	r0, #59	; 0x3b
 80009e4:	f000 fae8 	bl	8000fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80009e8:	203b      	movs	r0, #59	; 0x3b
 80009ea:	f000 fb17 	bl	800101c <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 80009ee:	4e8c      	ldr	r6, [pc, #560]	; (8000c20 <main+0x2c8>)
 80009f0:	4b8c      	ldr	r3, [pc, #560]	; (8000c24 <main+0x2cc>)
 80009f2:	6033      	str	r3, [r6, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009f4:	6074      	str	r4, [r6, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009f6:	60b4      	str	r4, [r6, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f8:	60f4      	str	r4, [r6, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fa:	6134      	str	r4, [r6, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009fc:	6174      	str	r4, [r6, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a02:	61b3      	str	r3, [r6, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a04:	6234      	str	r4, [r6, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a06:	6274      	str	r4, [r6, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a08:	62b4      	str	r4, [r6, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a0a:	230a      	movs	r3, #10
 8000a0c:	62f3      	str	r3, [r6, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a0e:	4630      	mov	r0, r6
 8000a10:	f001 fa08 	bl	8001e24 <HAL_SPI_Init>
  hiwdg.Instance = IWDG;
 8000a14:	4884      	ldr	r0, [pc, #528]	; (8000c28 <main+0x2d0>)
 8000a16:	4b85      	ldr	r3, [pc, #532]	; (8000c2c <main+0x2d4>)
 8000a18:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000a1a:	6044      	str	r4, [r0, #4]
  hiwdg.Init.Reload = 400;
 8000a1c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a20:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000a22:	f000 fdf3 	bl	800160c <HAL_IWDG_Init>
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000a26:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	632b      	str	r3, [r5, #48]	; 0x30
	GPIOE->AFR[1] |=  (1 << GPIO_AFRH_AFSEL9_Pos)
 8000a2e:	4b80      	ldr	r3, [pc, #512]	; (8000c30 <main+0x2d8>)
 8000a30:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000a32:	4a80      	ldr	r2, [pc, #512]	; (8000c34 <main+0x2dc>)
 8000a34:	430a      	orrs	r2, r1
 8000a36:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOE->MODER |= GPIO_MODER_MODER9_1
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	f042 5222 	orr.w	r2, r2, #679477248	; 0x28800000
 8000a3e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000a42:	601a      	str	r2, [r3, #0]
	GPIOE->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_0 | GPIO_OSPEEDER_OSPEEDR9_1
 8000a44:	689a      	ldr	r2, [r3, #8]
 8000a46:	f042 5273 	orr.w	r2, r2, #1019215872	; 0x3cc00000
 8000a4a:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8000a4e:	609a      	str	r2, [r3, #8]
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000a50:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	646b      	str	r3, [r5, #68]	; 0x44
	TIM1->CR1 |= TIM_CR1_ARPE;
 8000a58:	4b77      	ldr	r3, [pc, #476]	; (8000c38 <main+0x2e0>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a60:	601a      	str	r2, [r3, #0]
	TIM1->PSC = 0;
 8000a62:	629c      	str	r4, [r3, #40]	; 0x28
	TIM1->ARR = PERIOD_SYG;
 8000a64:	f44f 7082 	mov.w	r0, #260	; 0x104
 8000a68:	62d8      	str	r0, [r3, #44]	; 0x2c
	TIM1->CCER |= TIM_CCER_CC1E;   	// Capture/Compare 1 output enable
 8000a6a:	6a1a      	ldr	r2, [r3, #32]
 8000a6c:	f042 0201 	orr.w	r2, r2, #1
 8000a70:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC2E;   	// Capture/Compare 2 output enable
 8000a72:	6a1a      	ldr	r2, [r3, #32]
 8000a74:	f042 0210 	orr.w	r2, r2, #16
 8000a78:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC3E;   	// Capture/Compare 2 output enable
 8000a7a:	6a1a      	ldr	r2, [r3, #32]
 8000a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a80:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC4E;   	// Capture/Compare 2 output enable
 8000a82:	6a1a      	ldr	r2, [r3, #32]
 8000a84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a88:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 |= TIM_CCMR1_OC1PE;
 8000a8a:	699a      	ldr	r2, [r3, #24]
 8000a8c:	f042 0208 	orr.w	r2, r2, #8
 8000a90:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8000a92:	699a      	ldr	r2, [r3, #24]
 8000a94:	f022 0210 	bic.w	r2, r2, #16
 8000a98:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC1M_1;
 8000a9a:	699a      	ldr	r2, [r3, #24]
 8000a9c:	f042 0220 	orr.w	r2, r2, #32
 8000aa0:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC1M_2; 	//110: PWM mode 1
 8000aa2:	699a      	ldr	r2, [r3, #24]
 8000aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000aa8:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC2PE;
 8000aaa:	699a      	ldr	r2, [r3, #24]
 8000aac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ab0:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 &= ~TIM_CCMR1_OC2M_0;
 8000ab2:	699a      	ldr	r2, [r3, #24]
 8000ab4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ab8:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC2M_1;
 8000aba:	699a      	ldr	r2, [r3, #24]
 8000abc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ac0:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC2M_2; 	//110: PWM mode 1
 8000ac2:	699a      	ldr	r2, [r3, #24]
 8000ac4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ac8:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 |= TIM_CCMR2_OC3PE;
 8000aca:	69da      	ldr	r2, [r3, #28]
 8000acc:	f042 0208 	orr.w	r2, r2, #8
 8000ad0:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 &= ~TIM_CCMR2_OC3M_0;
 8000ad2:	69da      	ldr	r2, [r3, #28]
 8000ad4:	f022 0210 	bic.w	r2, r2, #16
 8000ad8:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC3M_1;
 8000ada:	69da      	ldr	r2, [r3, #28]
 8000adc:	f042 0220 	orr.w	r2, r2, #32
 8000ae0:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC3M_2; 	//110: PWM mode 1
 8000ae2:	69da      	ldr	r2, [r3, #28]
 8000ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ae8:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC4PE;
 8000aea:	69da      	ldr	r2, [r3, #28]
 8000aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000af0:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 &= ~TIM_CCMR2_OC4M_0;
 8000af2:	69da      	ldr	r2, [r3, #28]
 8000af4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000af8:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC4M_1;
 8000afa:	69da      	ldr	r2, [r3, #28]
 8000afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b00:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC4M_2; 	//110: PWM mode 1
 8000b02:	69da      	ldr	r2, [r3, #28]
 8000b04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b08:	61da      	str	r2, [r3, #28]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0a:	4a4c      	ldr	r2, [pc, #304]	; (8000c3c <main+0x2e4>)
 8000b0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000b10:	6011      	str	r1, [r2, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	2110      	movs	r1, #16
 8000b14:	f882 1319 	strb.w	r1, [r2, #793]	; 0x319
	TIM1->DIER |= TIM_DIER_UIE;
 8000b18:	68da      	ldr	r2, [r3, #12]
 8000b1a:	f042 0201 	orr.w	r2, r2, #1
 8000b1e:	60da      	str	r2, [r3, #12]
	TIM1->BDTR|= TIM_BDTR_MOE;     		//MOE: Main output enable
 8000b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b26:	645a      	str	r2, [r3, #68]	; 0x44
	TIM1->CR1 &= ~TIM_CR1_CEN; 			//Bit 0 CEN: Counter enable
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	f022 0201 	bic.w	r2, r2, #1
 8000b2e:	601a      	str	r2, [r3, #0]
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000b30:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	632b      	str	r3, [r5, #48]	; 0x30
	GPIOC->AFR[0] |=  (3 << GPIO_AFRL_AFSEL6_Pos)
 8000b38:	4b41      	ldr	r3, [pc, #260]	; (8000c40 <main+0x2e8>)
 8000b3a:	6a1a      	ldr	r2, [r3, #32]
 8000b3c:	f042 524c 	orr.w	r2, r2, #855638016	; 0x33000000
 8000b40:	621a      	str	r2, [r3, #32]
	GPIOC->AFR[1] |=  (3 << GPIO_AFRH_AFSEL8_Pos)
 8000b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b44:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 8000b48:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->MODER |= GPIO_MODER_MODER6_1
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	f442 222a 	orr.w	r2, r2, #696320	; 0xaa000
 8000b50:	601a      	str	r2, [r3, #0]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_0 | GPIO_OSPEEDER_OSPEEDR6_1
 8000b52:	689a      	ldr	r2, [r3, #8]
 8000b54:	f442 227f 	orr.w	r2, r2, #1044480	; 0xff000
 8000b58:	609a      	str	r2, [r3, #8]
	RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 8000b5a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	646b      	str	r3, [r5, #68]	; 0x44
	TIM8->CR1 |= TIM_CR1_ARPE;
 8000b62:	4b38      	ldr	r3, [pc, #224]	; (8000c44 <main+0x2ec>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b6a:	601a      	str	r2, [r3, #0]
	TIM8->PSC = 0;
 8000b6c:	629c      	str	r4, [r3, #40]	; 0x28
	TIM8->ARR = PERIOD_SYG;
 8000b6e:	62d8      	str	r0, [r3, #44]	; 0x2c
	TIM8->CCER |= TIM_CCER_CC1E;   	// Capture/Compare 1 output enable
 8000b70:	6a1a      	ldr	r2, [r3, #32]
 8000b72:	f042 0201 	orr.w	r2, r2, #1
 8000b76:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC2E;   	// Capture/Compare 2 output enable
 8000b78:	6a1a      	ldr	r2, [r3, #32]
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC3E;   	// Capture/Compare 2 output enable
 8000b7e:	6a1a      	ldr	r2, [r3, #32]
 8000b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b84:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC4E;   	// Capture/Compare 2 output enable
 8000b86:	6a1a      	ldr	r2, [r3, #32]
 8000b88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000b8c:	621a      	str	r2, [r3, #32]
	TIM8->CCMR1 |= TIM_CCMR1_OC1PE;
 8000b8e:	699a      	ldr	r2, [r3, #24]
 8000b90:	f042 0208 	orr.w	r2, r2, #8
 8000b94:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8000b96:	699a      	ldr	r2, [r3, #24]
 8000b98:	f022 0210 	bic.w	r2, r2, #16
 8000b9c:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC1M_1;
 8000b9e:	699a      	ldr	r2, [r3, #24]
 8000ba0:	f042 0220 	orr.w	r2, r2, #32
 8000ba4:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC1M_2; 	//110: PWM mode 1
 8000ba6:	699a      	ldr	r2, [r3, #24]
 8000ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bac:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC2PE;
 8000bae:	699a      	ldr	r2, [r3, #24]
 8000bb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000bb4:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 &= ~TIM_CCMR1_OC2M_0;
 8000bb6:	699a      	ldr	r2, [r3, #24]
 8000bb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000bbc:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC2M_1;
 8000bbe:	699a      	ldr	r2, [r3, #24]
 8000bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000bc4:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC2M_2; 	//110: PWM mode 1
 8000bc6:	699a      	ldr	r2, [r3, #24]
 8000bc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bcc:	619a      	str	r2, [r3, #24]
	TIM8->CCMR2 |= TIM_CCMR2_OC3PE;
 8000bce:	69da      	ldr	r2, [r3, #28]
 8000bd0:	f042 0208 	orr.w	r2, r2, #8
 8000bd4:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 &= ~TIM_CCMR2_OC3M_0;
 8000bd6:	69da      	ldr	r2, [r3, #28]
 8000bd8:	f022 0210 	bic.w	r2, r2, #16
 8000bdc:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC3M_1;
 8000bde:	69da      	ldr	r2, [r3, #28]
 8000be0:	f042 0220 	orr.w	r2, r2, #32
 8000be4:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC3M_2; 	//110: PWM mode 1
 8000be6:	69da      	ldr	r2, [r3, #28]
 8000be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bec:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC4PE;
 8000bee:	69da      	ldr	r2, [r3, #28]
 8000bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000bf4:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 &= ~TIM_CCMR2_OC4M_0;
 8000bf6:	69da      	ldr	r2, [r3, #28]
 8000bf8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000bfc:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC4M_1;
 8000bfe:	69da      	ldr	r2, [r3, #28]
 8000c00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c04:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC4M_2; 	//110: PWM mode 1
 8000c06:	69da      	ldr	r2, [r3, #28]
 8000c08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c0c:	61da      	str	r2, [r3, #28]
	TIM8->BDTR|= TIM_BDTR_MOE;     		//MOE: Main output enable
 8000c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c14:	645a      	str	r2, [r3, #68]	; 0x44
 8000c16:	e017      	b.n	8000c48 <main+0x2f0>
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	2000a930 	.word	0x2000a930
 8000c24:	40013000 	.word	0x40013000
 8000c28:	2000a924 	.word	0x2000a924
 8000c2c:	40003000 	.word	0x40003000
 8000c30:	40021000 	.word	0x40021000
 8000c34:	01101010 	.word	0x01101010
 8000c38:	40010000 	.word	0x40010000
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40010400 	.word	0x40010400
	TIM8->CR1 &= ~TIM_CR1_CEN; 			//Bit 0 CEN: Counter enable
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	f022 0201 	bic.w	r2, r2, #1
 8000c4e:	601a      	str	r2, [r3, #0]
  memset( add_leds_buff.data_buf, 0x10, PIXELS_NUM*24 );
 8000c50:	4c15      	ldr	r4, [pc, #84]	; (8000ca8 <main+0x350>)
 8000c52:	f245 4260 	movw	r2, #21600	; 0x5460
 8000c56:	4620      	mov	r0, r4
 8000c58:	f001 faf9 	bl	800224e <memset>
  HAL_SPI_Receive_DMA(&hspi1, add_leds_buff.data_buf, PIXELS_NUM*24);
 8000c5c:	f245 4260 	movw	r2, #21600	; 0x5460
 8000c60:	4621      	mov	r1, r4
 8000c62:	4630      	mov	r0, r6
 8000c64:	f001 f9c6 	bl	8001ff4 <HAL_SPI_Receive_DMA>
		HAL_IWDG_Refresh(&hiwdg);
 8000c68:	4e10      	ldr	r6, [pc, #64]	; (8000cac <main+0x354>)
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000c6a:	f5a5 5560 	sub.w	r5, r5, #14336	; 0x3800
		if(local.mem_buf_rd)
 8000c6e:	4c10      	ldr	r4, [pc, #64]	; (8000cb0 <main+0x358>)
 8000c70:	e001      	b.n	8000c76 <main+0x31e>
 8000c72:	7823      	ldrb	r3, [r4, #0]
 8000c74:	b983      	cbnz	r3, 8000c98 <main+0x340>
		HAL_IWDG_Refresh(&hiwdg);
 8000c76:	4630      	mov	r0, r6
 8000c78:	f000 fced 	bl	8001656 <HAL_IWDG_Refresh>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	4628      	mov	r0, r5
 8000c80:	f000 fcbe 	bl	8001600 <HAL_GPIO_ReadPin>
 8000c84:	2800      	cmp	r0, #0
 8000c86:	d0f4      	beq.n	8000c72 <main+0x31a>
			LED_SendData(PIXELS_NUM*24);
 8000c88:	f245 4060 	movw	r0, #21600	; 0x5460
 8000c8c:	f7ff fc7c 	bl	8000588 <LED_SendData>
			Delay(50);
 8000c90:	2032      	movs	r0, #50	; 0x32
 8000c92:	f7ff fe4b 	bl	800092c <Delay>
 8000c96:	e7ec      	b.n	8000c72 <main+0x31a>
			Delay(2);
 8000c98:	2002      	movs	r0, #2
 8000c9a:	f7ff fe47 	bl	800092c <Delay>
			LED_SendData(PIXELS_NUM*24);
 8000c9e:	f245 4060 	movw	r0, #21600	; 0x5460
 8000ca2:	f7ff fc71 	bl	8000588 <LED_SendData>
 8000ca6:	e7e6      	b.n	8000c76 <main+0x31e>
 8000ca8:	200054c0 	.word	0x200054c0
 8000cac:	2000a924 	.word	0x2000a924
 8000cb0:	20005494 	.word	0x20005494

08000cb4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cb4:	4770      	bx	lr
	...

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	2100      	movs	r1, #0
 8000cbc:	9100      	str	r1, [sp, #0]
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_MspInit+0x34>)
 8000cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000cc6:	645a      	str	r2, [r3, #68]	; 0x44
 8000cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cca:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000cce:	9200      	str	r2, [sp, #0]
 8000cd0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	9101      	str	r1, [sp, #4]
 8000cd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cda:	641a      	str	r2, [r3, #64]	; 0x40
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	9301      	str	r3, [sp, #4]
 8000ce4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	b002      	add	sp, #8
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800

08000cf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cf0:	b530      	push	{r4, r5, lr}
 8000cf2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9303      	str	r3, [sp, #12]
 8000cf8:	9304      	str	r3, [sp, #16]
 8000cfa:	9305      	str	r3, [sp, #20]
 8000cfc:	9306      	str	r3, [sp, #24]
 8000cfe:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8000d00:	6802      	ldr	r2, [r0, #0]
 8000d02:	4b31      	ldr	r3, [pc, #196]	; (8000dc8 <HAL_SPI_MspInit+0xd8>)
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d001      	beq.n	8000d0c <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d08:	b009      	add	sp, #36	; 0x24
 8000d0a:	bd30      	pop	{r4, r5, pc}
 8000d0c:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d0e:	2500      	movs	r5, #0
 8000d10:	9501      	str	r5, [sp, #4]
 8000d12:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000d16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000d1c:	645a      	str	r2, [r3, #68]	; 0x44
 8000d1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d20:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000d24:	9201      	str	r2, [sp, #4]
 8000d26:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	9502      	str	r5, [sp, #8]
 8000d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d2c:	f042 0202 	orr.w	r2, r2, #2
 8000d30:	631a      	str	r2, [r3, #48]	; 0x30
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	9302      	str	r3, [sp, #8]
 8000d3a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d3c:	2338      	movs	r3, #56	; 0x38
 8000d3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d48:	2305      	movs	r3, #5
 8000d4a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	a903      	add	r1, sp, #12
 8000d4e:	481f      	ldr	r0, [pc, #124]	; (8000dcc <HAL_SPI_MspInit+0xdc>)
 8000d50:	f000 fb68 	bl	8001424 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000d54:	481e      	ldr	r0, [pc, #120]	; (8000dd0 <HAL_SPI_MspInit+0xe0>)
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <HAL_SPI_MspInit+0xe4>)
 8000d58:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000d5a:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000d5e:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d60:	6085      	str	r5, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d62:	60c5      	str	r5, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d68:	6103      	str	r3, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d6a:	6145      	str	r5, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d6c:	6185      	str	r5, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d72:	61c3      	str	r3, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d74:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000d78:	6203      	str	r3, [r0, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d7a:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000d7c:	f000 f98a 	bl	8001094 <HAL_DMA_Init>
 8000d80:	b9d8      	cbnz	r0, 8000dba <HAL_SPI_MspInit+0xca>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <HAL_SPI_MspInit+0xe0>)
 8000d84:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000d86:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000d88:	4813      	ldr	r0, [pc, #76]	; (8000dd8 <HAL_SPI_MspInit+0xe8>)
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_SPI_MspInit+0xec>)
 8000d8c:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000d8e:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000d92:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d94:	2340      	movs	r3, #64	; 0x40
 8000d96:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da0:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000da2:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000da4:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000da6:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000da8:	6203      	str	r3, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000daa:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000dac:	f000 f972 	bl	8001094 <HAL_DMA_Init>
 8000db0:	b930      	cbnz	r0, 8000dc0 <HAL_SPI_MspInit+0xd0>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_SPI_MspInit+0xe8>)
 8000db4:	64a3      	str	r3, [r4, #72]	; 0x48
 8000db6:	639c      	str	r4, [r3, #56]	; 0x38
}
 8000db8:	e7a6      	b.n	8000d08 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 8000dba:	f7ff ff7b 	bl	8000cb4 <Error_Handler>
 8000dbe:	e7e0      	b.n	8000d82 <HAL_SPI_MspInit+0x92>
      Error_Handler();
 8000dc0:	f7ff ff78 	bl	8000cb4 <Error_Handler>
 8000dc4:	e7f5      	b.n	8000db2 <HAL_SPI_MspInit+0xc2>
 8000dc6:	bf00      	nop
 8000dc8:	40013000 	.word	0x40013000
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	2000a988 	.word	0x2000a988
 8000dd4:	40026410 	.word	0x40026410
 8000dd8:	2000a9e8 	.word	0x2000a9e8
 8000ddc:	40026458 	.word	0x40026458

08000de0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000de0:	4770      	bx	lr

08000de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	e7fe      	b.n	8000de4 <MemManage_Handler>

08000de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de6:	e7fe      	b.n	8000de6 <BusFault_Handler>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler>

08000dea <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dea:	4770      	bx	lr

08000dec <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dec:	4770      	bx	lr

08000dee <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	4770      	bx	lr

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df2:	f000 f8a9 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df6:	bd08      	pop	{r3, pc}

08000df8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000df8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000dfa:	4802      	ldr	r0, [pc, #8]	; (8000e04 <DMA2_Stream0_IRQHandler+0xc>)
 8000dfc:	f000 fa24 	bl	8001248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e00:	bd08      	pop	{r3, pc}
 8000e02:	bf00      	nop
 8000e04:	2000a988 	.word	0x2000a988

08000e08 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000e08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e0a:	4802      	ldr	r0, [pc, #8]	; (8000e14 <DMA2_Stream3_IRQHandler+0xc>)
 8000e0c:	f000 fa1c 	bl	8001248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000e10:	bd08      	pop	{r3, pc}
 8000e12:	bf00      	nop
 8000e14:	2000a9e8 	.word	0x2000a9e8

08000e18 <TIM1_UP_TIM10_IRQHandler>:

/* USER CODE BEGIN 1 */
void TIM1_UP_TIM10_IRQHandler( void )
{
 8000e18:	b508      	push	{r3, lr}
	if (TIM1->SR & TIM_SR_UIF)
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	f013 0f01 	tst.w	r3, #1
 8000e22:	d100      	bne.n	8000e26 <TIM1_UP_TIM10_IRQHandler+0xe>
	{
		TIM1->SR &= ~TIM_SR_UIF;
		TIM1_UPD_Servo_Set();
	}
}
 8000e24:	bd08      	pop	{r3, pc}
		TIM1->SR &= ~TIM_SR_UIF;
 8000e26:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <TIM1_UP_TIM10_IRQHandler+0x20>)
 8000e28:	6913      	ldr	r3, [r2, #16]
 8000e2a:	f023 0301 	bic.w	r3, r3, #1
 8000e2e:	6113      	str	r3, [r2, #16]
		TIM1_UPD_Servo_Set();
 8000e30:	f7ff fcb4 	bl	800079c <TIM1_UPD_Servo_Set>
}
 8000e34:	e7f6      	b.n	8000e24 <TIM1_UP_TIM10_IRQHandler+0xc>
 8000e36:	bf00      	nop
 8000e38:	40010000 	.word	0x40010000

08000e3c <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
	if (TIM4->SR & TIM_SR_UIF)
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <TIM4_IRQHandler+0x18>)
 8000e3e:	691b      	ldr	r3, [r3, #16]
 8000e40:	f013 0f01 	tst.w	r3, #1
 8000e44:	d004      	beq.n	8000e50 <TIM4_IRQHandler+0x14>
	{
		TIM4->SR &= ~TIM_SR_UIF;
 8000e46:	4a03      	ldr	r2, [pc, #12]	; (8000e54 <TIM4_IRQHandler+0x18>)
 8000e48:	6913      	ldr	r3, [r2, #16]
 8000e4a:	f023 0301 	bic.w	r3, r3, #1
 8000e4e:	6113      	str	r3, [r2, #16]
	}
}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40000800 	.word	0x40000800

08000e58 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <SystemInit+0x18>)
 8000e5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000e5e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000e62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e7a:	e003      	b.n	8000e84 <LoopCopyDataInit>

08000e7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e82:	3104      	adds	r1, #4

08000e84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e84:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e8c:	d3f6      	bcc.n	8000e7c <CopyDataInit>
  ldr  r2, =_sbss
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e90:	e002      	b.n	8000e98 <LoopFillZerobss>

08000e92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e94:	f842 3b04 	str.w	r3, [r2], #4

08000e98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e9c:	d3f9      	bcc.n	8000e92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e9e:	f7ff ffdb 	bl	8000e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f001 f9a5 	bl	80021f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fd57 	bl	8000958 <main>
  bx  lr    
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000eb0:	080022a0 	.word	0x080022a0
  ldr  r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000eb8:	200054a4 	.word	0x200054a4
  ldr  r2, =_sbss
 8000ebc:	200054a4 	.word	0x200054a4
  ldr  r3, = _ebss
 8000ec0:	2000aa4c 	.word	0x2000aa4c

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>
	...

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_InitTick+0x40>)
 8000ece:	7818      	ldrb	r0, [r3, #0]
 8000ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <HAL_InitTick+0x44>)
 8000eda:	6810      	ldr	r0, [r2, #0]
 8000edc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ee0:	f000 f8aa 	bl	8001038 <HAL_SYSTICK_Config>
 8000ee4:	b968      	cbnz	r0, 8000f02 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	2c0f      	cmp	r4, #15
 8000ee8:	d901      	bls.n	8000eee <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000eea:	2001      	movs	r0, #1
 8000eec:	e00a      	b.n	8000f04 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	4621      	mov	r1, r4
 8000ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef6:	f000 f85f 	bl	8000fb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_InitTick+0x48>)
 8000efc:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2000      	movs	r0, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000f02:	2001      	movs	r0, #1
}
 8000f04:	bd10      	pop	{r4, pc}
 8000f06:	bf00      	nop
 8000f08:	2000549c 	.word	0x2000549c
 8000f0c:	20005498 	.word	0x20005498
 8000f10:	200054a0 	.word	0x200054a0

08000f14 <HAL_Init>:
{
 8000f14:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_Init+0x30>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f1e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f26:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f2e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f000 f82f 	bl	8000f94 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f36:	2000      	movs	r0, #0
 8000f38:	f7ff ffc6 	bl	8000ec8 <HAL_InitTick>
  HAL_MspInit();
 8000f3c:	f7ff febc 	bl	8000cb8 <HAL_MspInit>
}
 8000f40:	2000      	movs	r0, #0
 8000f42:	bd08      	pop	{r3, pc}
 8000f44:	40023c00 	.word	0x40023c00

08000f48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f48:	4a03      	ldr	r2, [pc, #12]	; (8000f58 <HAL_IncTick+0x10>)
 8000f4a:	6811      	ldr	r1, [r2, #0]
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <HAL_IncTick+0x14>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	440b      	add	r3, r1
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	2000aa48 	.word	0x2000aa48
 8000f5c:	2000549c 	.word	0x2000549c

08000f60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f60:	4b01      	ldr	r3, [pc, #4]	; (8000f68 <HAL_GetTick+0x8>)
 8000f62:	6818      	ldr	r0, [r3, #0]
}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	2000aa48 	.word	0x2000aa48

08000f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f6c:	b538      	push	{r3, r4, r5, lr}
 8000f6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff fff6 	bl	8000f60 <HAL_GetTick>
 8000f74:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000f7a:	d002      	beq.n	8000f82 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <HAL_Delay+0x24>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f82:	f7ff ffed 	bl	8000f60 <HAL_GetTick>
 8000f86:	1b40      	subs	r0, r0, r5
 8000f88:	42a0      	cmp	r0, r4
 8000f8a:	d3fa      	bcc.n	8000f82 <HAL_Delay+0x16>
  {
  }
}
 8000f8c:	bd38      	pop	{r3, r4, r5, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000549c 	.word	0x2000549c

08000f94 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f96:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f9c:	041b      	lsls	r3, r3, #16
 8000f9e:	0c1b      	lsrs	r3, r3, #16
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa8:	0200      	lsls	r0, r0, #8
 8000faa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000fae:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000fb0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb8:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_NVIC_SetPriority+0x5c>)
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc2:	f1c3 0407 	rsb	r4, r3, #7
 8000fc6:	2c04      	cmp	r4, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fcc:	1d1d      	adds	r5, r3, #4
 8000fce:	2d06      	cmp	r5, #6
 8000fd0:	bf8c      	ite	hi
 8000fd2:	3b03      	subhi	r3, #3
 8000fd4:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd6:	f04f 35ff 	mov.w	r5, #4294967295
 8000fda:	fa05 f404 	lsl.w	r4, r5, r4
 8000fde:	ea21 0104 	bic.w	r1, r1, r4
 8000fe2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	fa05 f303 	lsl.w	r3, r5, r3
 8000fe8:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000fee:	2800      	cmp	r0, #0
 8000ff0:	db09      	blt.n	8001006 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	0109      	lsls	r1, r1, #4
 8000ff4:	b2c9      	uxtb	r1, r1
 8000ff6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000ffa:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000ffe:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001002:	bc30      	pop	{r4, r5}
 8001004:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	f000 000f 	and.w	r0, r0, #15
 800100a:	0109      	lsls	r1, r1, #4
 800100c:	b2c9      	uxtb	r1, r1
 800100e:	4b02      	ldr	r3, [pc, #8]	; (8001018 <HAL_NVIC_SetPriority+0x60>)
 8001010:	5419      	strb	r1, [r3, r0]
 8001012:	e7f6      	b.n	8001002 <HAL_NVIC_SetPriority+0x4a>
 8001014:	e000ed00 	.word	0xe000ed00
 8001018:	e000ed14 	.word	0xe000ed14

0800101c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800101c:	2800      	cmp	r0, #0
 800101e:	db08      	blt.n	8001032 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001020:	0942      	lsrs	r2, r0, #5
 8001022:	f000 001f 	and.w	r0, r0, #31
 8001026:	2301      	movs	r3, #1
 8001028:	fa03 f000 	lsl.w	r0, r3, r0
 800102c:	4b01      	ldr	r3, [pc, #4]	; (8001034 <HAL_NVIC_EnableIRQ+0x18>)
 800102e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100

08001038 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	3801      	subs	r0, #1
 800103a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800103e:	d20a      	bcs.n	8001056 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_SYSTICK_Config+0x24>)
 8001042:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	4a06      	ldr	r2, [pc, #24]	; (8001060 <HAL_SYSTICK_Config+0x28>)
 8001046:	21f0      	movs	r1, #240	; 0xf0
 8001048:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	2000      	movs	r0, #0
 800104e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001050:	2207      	movs	r2, #7
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001056:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e010 	.word	0xe000e010
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001064:	6802      	ldr	r2, [r0, #0]
 8001066:	b2d3      	uxtb	r3, r2
 8001068:	3b10      	subs	r3, #16
 800106a:	4908      	ldr	r1, [pc, #32]	; (800108c <DMA_CalcBaseAndBitshift+0x28>)
 800106c:	fba1 1303 	umull	r1, r3, r1, r3
 8001070:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001072:	4907      	ldr	r1, [pc, #28]	; (8001090 <DMA_CalcBaseAndBitshift+0x2c>)
 8001074:	5cc9      	ldrb	r1, [r1, r3]
 8001076:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001078:	2b03      	cmp	r3, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800107a:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 800107e:	f022 0203 	bic.w	r2, r2, #3
 8001082:	bf88      	it	hi
 8001084:	3204      	addhi	r2, #4
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001086:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8001088:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800108a:	4770      	bx	lr
 800108c:	aaaaaaab 	.word	0xaaaaaaab
 8001090:	08002288 	.word	0x08002288

08001094 <HAL_DMA_Init>:
{
 8001094:	b538      	push	{r3, r4, r5, lr}
 8001096:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff ff62 	bl	8000f60 <HAL_GetTick>
  if(hdma == NULL)
 800109c:	2c00      	cmp	r4, #0
 800109e:	f000 8088 	beq.w	80011b2 <HAL_DMA_Init+0x11e>
 80010a2:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80010a4:	2300      	movs	r3, #0
 80010a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80010aa:	2302      	movs	r3, #2
 80010ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80010b0:	6822      	ldr	r2, [r4, #0]
 80010b2:	6813      	ldr	r3, [r2, #0]
 80010b4:	f023 0301 	bic.w	r3, r3, #1
 80010b8:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	f012 0f01 	tst.w	r2, #1
 80010c2:	d00a      	beq.n	80010da <HAL_DMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010c4:	f7ff ff4c 	bl	8000f60 <HAL_GetTick>
 80010c8:	1b40      	subs	r0, r0, r5
 80010ca:	2805      	cmp	r0, #5
 80010cc:	d9f5      	bls.n	80010ba <HAL_DMA_Init+0x26>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010ce:	2320      	movs	r3, #32
 80010d0:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010d2:	2003      	movs	r0, #3
 80010d4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80010d8:	bd38      	pop	{r3, r4, r5, pc}
  tmp = hdma->Instance->CR;
 80010da:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010dc:	4836      	ldr	r0, [pc, #216]	; (80011b8 <HAL_DMA_Init+0x124>)
 80010de:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010e0:	6861      	ldr	r1, [r4, #4]
 80010e2:	68a2      	ldr	r2, [r4, #8]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	68e1      	ldr	r1, [r4, #12]
 80010e8:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ea:	6921      	ldr	r1, [r4, #16]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	6961      	ldr	r1, [r4, #20]
 80010f0:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f2:	69a1      	ldr	r1, [r4, #24]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	69e1      	ldr	r1, [r4, #28]
 80010f8:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80010fa:	6a21      	ldr	r1, [r4, #32]
 80010fc:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010fe:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001100:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001102:	2904      	cmp	r1, #4
 8001104:	d015      	beq.n	8001132 <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 8001106:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001108:	6821      	ldr	r1, [r4, #0]
 800110a:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800110c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001110:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001112:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001114:	2a04      	cmp	r2, #4
 8001116:	d115      	bne.n	8001144 <HAL_DMA_Init+0xb0>
    tmp |= hdma->Init.FIFOThreshold;
 8001118:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800111a:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800111c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800111e:	b18a      	cbz	r2, 8001144 <HAL_DMA_Init+0xb0>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001120:	69a5      	ldr	r5, [r4, #24]
 8001122:	bb1d      	cbnz	r5, 800116c <HAL_DMA_Init+0xd8>
  {
    switch (tmp)
 8001124:	2801      	cmp	r0, #1
 8001126:	d01b      	beq.n	8001160 <HAL_DMA_Init+0xcc>
 8001128:	b140      	cbz	r0, 800113c <HAL_DMA_Init+0xa8>
 800112a:	2802      	cmp	r0, #2
 800112c:	d006      	beq.n	800113c <HAL_DMA_Init+0xa8>
  HAL_StatusTypeDef status = HAL_OK;
 800112e:	2200      	movs	r2, #0
 8001130:	e006      	b.n	8001140 <HAL_DMA_Init+0xac>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001132:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001134:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001136:	4301      	orrs	r1, r0
 8001138:	430a      	orrs	r2, r1
 800113a:	e7e4      	b.n	8001106 <HAL_DMA_Init+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 800113c:	f3c2 6200 	ubfx	r2, r2, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001140:	2a00      	cmp	r2, #0
 8001142:	d130      	bne.n	80011a6 <HAL_DMA_Init+0x112>
  hdma->Instance->FCR = tmp;
 8001144:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001146:	4620      	mov	r0, r4
 8001148:	f7ff ff8c 	bl	8001064 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800114c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800114e:	233f      	movs	r3, #63	; 0x3f
 8001150:	4093      	lsls	r3, r2
 8001152:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001154:	2000      	movs	r0, #0
 8001156:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001158:	2301      	movs	r3, #1
 800115a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800115e:	e7bb      	b.n	80010d8 <HAL_DMA_Init+0x44>
  HAL_StatusTypeDef status = HAL_OK;
 8001160:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 8001164:	bf14      	ite	ne
 8001166:	2200      	movne	r2, #0
 8001168:	2201      	moveq	r2, #1
 800116a:	e7e9      	b.n	8001140 <HAL_DMA_Init+0xac>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800116c:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8001170:	d006      	beq.n	8001180 <HAL_DMA_Init+0xec>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001172:	2802      	cmp	r0, #2
 8001174:	d917      	bls.n	80011a6 <HAL_DMA_Init+0x112>
 8001176:	2803      	cmp	r0, #3
 8001178:	d113      	bne.n	80011a2 <HAL_DMA_Init+0x10e>
  HAL_StatusTypeDef status = HAL_OK;
 800117a:	f3c2 6200 	ubfx	r2, r2, #24, #1
 800117e:	e7df      	b.n	8001140 <HAL_DMA_Init+0xac>
    switch (tmp)
 8001180:	2803      	cmp	r0, #3
 8001182:	d80c      	bhi.n	800119e <HAL_DMA_Init+0x10a>
 8001184:	e8df f000 	tbb	[pc, r0]
 8001188:	050f020f 	.word	0x050f020f
  HAL_StatusTypeDef status = HAL_OK;
 800118c:	f3c2 6200 	ubfx	r2, r2, #24, #1
 8001190:	e7d6      	b.n	8001140 <HAL_DMA_Init+0xac>
 8001192:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 8001196:	bf14      	ite	ne
 8001198:	2200      	movne	r2, #0
 800119a:	2201      	moveq	r2, #1
 800119c:	e7d0      	b.n	8001140 <HAL_DMA_Init+0xac>
 800119e:	2200      	movs	r2, #0
 80011a0:	e7ce      	b.n	8001140 <HAL_DMA_Init+0xac>
 80011a2:	2200      	movs	r2, #0
 80011a4:	e7cc      	b.n	8001140 <HAL_DMA_Init+0xac>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011a6:	2340      	movs	r3, #64	; 0x40
 80011a8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80011aa:	2001      	movs	r0, #1
 80011ac:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80011b0:	e792      	b.n	80010d8 <HAL_DMA_Init+0x44>
    return HAL_ERROR;
 80011b2:	2001      	movs	r0, #1
 80011b4:	e790      	b.n	80010d8 <HAL_DMA_Init+0x44>
 80011b6:	bf00      	nop
 80011b8:	f010803f 	.word	0xf010803f

080011bc <HAL_DMA_Start_IT>:
{
 80011bc:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 80011be:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80011c2:	2c01      	cmp	r4, #1
 80011c4:	d03d      	beq.n	8001242 <HAL_DMA_Start_IT+0x86>
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011c6:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80011c8:	2401      	movs	r4, #1
 80011ca:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80011ce:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80011d2:	b2e4      	uxtb	r4, r4
 80011d4:	2c01      	cmp	r4, #1
 80011d6:	d005      	beq.n	80011e4 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80011d8:	2300      	movs	r3, #0
 80011da:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 80011de:	2002      	movs	r0, #2
}
 80011e0:	bc70      	pop	{r4, r5, r6}
 80011e2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80011e4:	2402      	movs	r4, #2
 80011e6:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ea:	2400      	movs	r4, #0
 80011ec:	6544      	str	r4, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80011ee:	6806      	ldr	r6, [r0, #0]
 80011f0:	6834      	ldr	r4, [r6, #0]
 80011f2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80011f6:	6034      	str	r4, [r6, #0]
  hdma->Instance->NDTR = DataLength;
 80011f8:	6804      	ldr	r4, [r0, #0]
 80011fa:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011fc:	6883      	ldr	r3, [r0, #8]
 80011fe:	2b40      	cmp	r3, #64	; 0x40
 8001200:	d01a      	beq.n	8001238 <HAL_DMA_Start_IT+0x7c>
    hdma->Instance->PAR = SrcAddress;
 8001202:	6803      	ldr	r3, [r0, #0]
 8001204:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001206:	6803      	ldr	r3, [r0, #0]
 8001208:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800120a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800120c:	233f      	movs	r3, #63	; 0x3f
 800120e:	4093      	lsls	r3, r2
 8001210:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001212:	6802      	ldr	r2, [r0, #0]
 8001214:	6813      	ldr	r3, [r2, #0]
 8001216:	f043 0316 	orr.w	r3, r3, #22
 800121a:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800121c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800121e:	b123      	cbz	r3, 800122a <HAL_DMA_Start_IT+0x6e>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001220:	6802      	ldr	r2, [r0, #0]
 8001222:	6813      	ldr	r3, [r2, #0]
 8001224:	f043 0308 	orr.w	r3, r3, #8
 8001228:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800122a:	6802      	ldr	r2, [r0, #0]
 800122c:	6813      	ldr	r3, [r2, #0]
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001234:	2000      	movs	r0, #0
 8001236:	e7d3      	b.n	80011e0 <HAL_DMA_Start_IT+0x24>
    hdma->Instance->PAR = DstAddress;
 8001238:	6803      	ldr	r3, [r0, #0]
 800123a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800123c:	6803      	ldr	r3, [r0, #0]
 800123e:	60d9      	str	r1, [r3, #12]
 8001240:	e7e3      	b.n	800120a <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8001242:	2002      	movs	r0, #2
 8001244:	e7cc      	b.n	80011e0 <HAL_DMA_Start_IT+0x24>
	...

08001248 <HAL_DMA_IRQHandler>:
{
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	b083      	sub	sp, #12
 800124c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001252:	4b72      	ldr	r3, [pc, #456]	; (800141c <HAL_DMA_IRQHandler+0x1d4>)
 8001254:	681e      	ldr	r6, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001256:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001258:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800125a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800125c:	2308      	movs	r3, #8
 800125e:	4093      	lsls	r3, r2
 8001260:	422b      	tst	r3, r5
 8001262:	d010      	beq.n	8001286 <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001264:	6803      	ldr	r3, [r0, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	f012 0f04 	tst.w	r2, #4
 800126c:	d00b      	beq.n	8001286 <HAL_DMA_IRQHandler+0x3e>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	f022 0204 	bic.w	r2, r2, #4
 8001274:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001276:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001278:	2308      	movs	r3, #8
 800127a:	4093      	lsls	r3, r2
 800127c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800127e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001286:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001288:	2301      	movs	r3, #1
 800128a:	4093      	lsls	r3, r2
 800128c:	422b      	tst	r3, r5
 800128e:	d009      	beq.n	80012a4 <HAL_DMA_IRQHandler+0x5c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001290:	6822      	ldr	r2, [r4, #0]
 8001292:	6952      	ldr	r2, [r2, #20]
 8001294:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001298:	d004      	beq.n	80012a4 <HAL_DMA_IRQHandler+0x5c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800129a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800129c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800129e:	f043 0302 	orr.w	r3, r3, #2
 80012a2:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012a4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80012a6:	2304      	movs	r3, #4
 80012a8:	4093      	lsls	r3, r2
 80012aa:	422b      	tst	r3, r5
 80012ac:	d009      	beq.n	80012c2 <HAL_DMA_IRQHandler+0x7a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012ae:	6822      	ldr	r2, [r4, #0]
 80012b0:	6812      	ldr	r2, [r2, #0]
 80012b2:	f012 0f02 	tst.w	r2, #2
 80012b6:	d004      	beq.n	80012c2 <HAL_DMA_IRQHandler+0x7a>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012b8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80012c4:	2310      	movs	r3, #16
 80012c6:	4093      	lsls	r3, r2
 80012c8:	422b      	tst	r3, r5
 80012ca:	d024      	beq.n	8001316 <HAL_DMA_IRQHandler+0xce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012cc:	6822      	ldr	r2, [r4, #0]
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	f012 0f08 	tst.w	r2, #8
 80012d4:	d01f      	beq.n	8001316 <HAL_DMA_IRQHandler+0xce>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012d6:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012d8:	6823      	ldr	r3, [r4, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80012e0:	d00d      	beq.n	80012fe <HAL_DMA_IRQHandler+0xb6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80012e8:	d104      	bne.n	80012f4 <HAL_DMA_IRQHandler+0xac>
          if(hdma->XferHalfCpltCallback != NULL)
 80012ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012ec:	b19b      	cbz	r3, 8001316 <HAL_DMA_IRQHandler+0xce>
            hdma->XferHalfCpltCallback(hdma);
 80012ee:	4620      	mov	r0, r4
 80012f0:	4798      	blx	r3
 80012f2:	e010      	b.n	8001316 <HAL_DMA_IRQHandler+0xce>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80012f6:	b173      	cbz	r3, 8001316 <HAL_DMA_IRQHandler+0xce>
            hdma->XferM1HalfCpltCallback(hdma);
 80012f8:	4620      	mov	r0, r4
 80012fa:	4798      	blx	r3
 80012fc:	e00b      	b.n	8001316 <HAL_DMA_IRQHandler+0xce>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001304:	d103      	bne.n	800130e <HAL_DMA_IRQHandler+0xc6>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	f022 0208 	bic.w	r2, r2, #8
 800130c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800130e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001310:	b10b      	cbz	r3, 8001316 <HAL_DMA_IRQHandler+0xce>
          hdma->XferHalfCpltCallback(hdma);
 8001312:	4620      	mov	r0, r4
 8001314:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001316:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001318:	2320      	movs	r3, #32
 800131a:	4093      	lsls	r3, r2
 800131c:	422b      	tst	r3, r5
 800131e:	d055      	beq.n	80013cc <HAL_DMA_IRQHandler+0x184>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001320:	6822      	ldr	r2, [r4, #0]
 8001322:	6812      	ldr	r2, [r2, #0]
 8001324:	f012 0f10 	tst.w	r2, #16
 8001328:	d050      	beq.n	80013cc <HAL_DMA_IRQHandler+0x184>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800132a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800132c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b05      	cmp	r3, #5
 8001334:	d00e      	beq.n	8001354 <HAL_DMA_IRQHandler+0x10c>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001336:	6823      	ldr	r3, [r4, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800133e:	d033      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x160>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001346:	d12a      	bne.n	800139e <HAL_DMA_IRQHandler+0x156>
          if(hdma->XferM1CpltCallback != NULL)
 8001348:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800134a:	2b00      	cmp	r3, #0
 800134c:	d03e      	beq.n	80013cc <HAL_DMA_IRQHandler+0x184>
            hdma->XferM1CpltCallback(hdma);
 800134e:	4620      	mov	r0, r4
 8001350:	4798      	blx	r3
 8001352:	e03b      	b.n	80013cc <HAL_DMA_IRQHandler+0x184>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001354:	6822      	ldr	r2, [r4, #0]
 8001356:	6813      	ldr	r3, [r2, #0]
 8001358:	f023 0316 	bic.w	r3, r3, #22
 800135c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800135e:	6822      	ldr	r2, [r4, #0]
 8001360:	6953      	ldr	r3, [r2, #20]
 8001362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001366:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001368:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800136a:	b1a3      	cbz	r3, 8001396 <HAL_DMA_IRQHandler+0x14e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800136c:	6822      	ldr	r2, [r4, #0]
 800136e:	6813      	ldr	r3, [r2, #0]
 8001370:	f023 0308 	bic.w	r3, r3, #8
 8001374:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001376:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001378:	233f      	movs	r3, #63	; 0x3f
 800137a:	4093      	lsls	r3, r2
 800137c:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800137e:	2300      	movs	r3, #0
 8001380:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001384:	2301      	movs	r3, #1
 8001386:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800138a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800138c:	2b00      	cmp	r3, #0
 800138e:	d043      	beq.n	8001418 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001390:	4620      	mov	r0, r4
 8001392:	4798      	blx	r3
 8001394:	e040      	b.n	8001418 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001396:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1e7      	bne.n	800136c <HAL_DMA_IRQHandler+0x124>
 800139c:	e7eb      	b.n	8001376 <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferCpltCallback != NULL)
 800139e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80013a0:	b1a3      	cbz	r3, 80013cc <HAL_DMA_IRQHandler+0x184>
            hdma->XferCpltCallback(hdma);
 80013a2:	4620      	mov	r0, r4
 80013a4:	4798      	blx	r3
 80013a6:	e011      	b.n	80013cc <HAL_DMA_IRQHandler+0x184>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	f412 7f80 	tst.w	r2, #256	; 0x100
 80013ae:	d109      	bne.n	80013c4 <HAL_DMA_IRQHandler+0x17c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	f022 0210 	bic.w	r2, r2, #16
 80013b6:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80013b8:	2300      	movs	r3, #0
 80013ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80013be:	2301      	movs	r3, #1
 80013c0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80013c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80013c6:	b10b      	cbz	r3, 80013cc <HAL_DMA_IRQHandler+0x184>
          hdma->XferCpltCallback(hdma);
 80013c8:	4620      	mov	r0, r4
 80013ca:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013ce:	b31b      	cbz	r3, 8001418 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013d2:	f013 0f01 	tst.w	r3, #1
 80013d6:	d01b      	beq.n	8001410 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80013d8:	2305      	movs	r3, #5
 80013da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80013de:	6822      	ldr	r2, [r4, #0]
 80013e0:	6813      	ldr	r3, [r2, #0]
 80013e2:	f023 0301 	bic.w	r3, r3, #1
 80013e6:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_DMA_IRQHandler+0x1d8>)
 80013ea:	fba3 3606 	umull	r3, r6, r3, r6
 80013ee:	0ab6      	lsrs	r6, r6, #10
        if (++count > timeout)
 80013f0:	9b01      	ldr	r3, [sp, #4]
 80013f2:	3301      	adds	r3, #1
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	42b3      	cmp	r3, r6
 80013f8:	d804      	bhi.n	8001404 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f013 0f01 	tst.w	r3, #1
 8001402:	d1f5      	bne.n	80013f0 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8001404:	2300      	movs	r3, #0
 8001406:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800140a:	2301      	movs	r3, #1
 800140c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001410:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001412:	b10b      	cbz	r3, 8001418 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001414:	4620      	mov	r0, r4
 8001416:	4798      	blx	r3
}
 8001418:	b003      	add	sp, #12
 800141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141c:	20005498 	.word	0x20005498
 8001420:	1b4e81b5 	.word	0x1b4e81b5

08001424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001428:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142a:	2400      	movs	r4, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142c:	4f6f      	ldr	r7, [pc, #444]	; (80015ec <HAL_GPIO_Init+0x1c8>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800142e:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 80015f8 <HAL_GPIO_Init+0x1d4>
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001432:	4e6f      	ldr	r6, [pc, #444]	; (80015f0 <HAL_GPIO_Init+0x1cc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001434:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 80015fc <HAL_GPIO_Init+0x1d8>
 8001438:	e046      	b.n	80014c8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 800143a:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 800143e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8001442:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001446:	f004 0507 	and.w	r5, r4, #7
 800144a:	ea4f 0b85 	mov.w	fp, r5, lsl #2
 800144e:	250f      	movs	r5, #15
 8001450:	fa05 f50b 	lsl.w	r5, r5, fp
 8001454:	ea2a 0a05 	bic.w	sl, sl, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001458:	690d      	ldr	r5, [r1, #16]
 800145a:	fa05 f50b 	lsl.w	r5, r5, fp
 800145e:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001462:	f8c9 5020 	str.w	r5, [r9, #32]
 8001466:	e069      	b.n	800153c <HAL_GPIO_Init+0x118>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001468:	2500      	movs	r5, #0
 800146a:	fa05 f509 	lsl.w	r5, r5, r9
 800146e:	ea45 050a 	orr.w	r5, r5, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001472:	609d      	str	r5, [r3, #8]
        temp = EXTI->IMR;
 8001474:	6833      	ldr	r3, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8001476:	ea6f 0802 	mvn.w	r8, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800147a:	684d      	ldr	r5, [r1, #4]
 800147c:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001480:	bf0c      	ite	eq
 8001482:	ea08 0303 	andeq.w	r3, r8, r3
        {
          temp |= iocurrent;
 8001486:	4313      	orrne	r3, r2
        }
        EXTI->IMR = temp;
 8001488:	6033      	str	r3, [r6, #0]

        temp = EXTI->EMR;
 800148a:	6873      	ldr	r3, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800148c:	684d      	ldr	r5, [r1, #4]
 800148e:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001492:	bf0c      	ite	eq
 8001494:	ea08 0303 	andeq.w	r3, r8, r3
        {
          temp |= iocurrent;
 8001498:	4313      	orrne	r3, r2
        }
        EXTI->EMR = temp;
 800149a:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149c:	68b3      	ldr	r3, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800149e:	684d      	ldr	r5, [r1, #4]
 80014a0:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80014a4:	bf0c      	ite	eq
 80014a6:	ea08 0303 	andeq.w	r3, r8, r3
        {
          temp |= iocurrent;
 80014aa:	4313      	orrne	r3, r2
        }
        EXTI->RTSR = temp;
 80014ac:	60b3      	str	r3, [r6, #8]

        temp = EXTI->FTSR;
 80014ae:	68f3      	ldr	r3, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b0:	684d      	ldr	r5, [r1, #4]
 80014b2:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80014b6:	bf0c      	ite	eq
 80014b8:	ea08 0303 	andeq.w	r3, r8, r3
        {
          temp |= iocurrent;
 80014bc:	4313      	orrne	r3, r2
        }
        EXTI->FTSR = temp;
 80014be:	60f3      	str	r3, [r6, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c0:	3401      	adds	r4, #1
 80014c2:	2c10      	cmp	r4, #16
 80014c4:	f000 808e 	beq.w	80015e4 <HAL_GPIO_Init+0x1c0>
    ioposition = 0x01U << position;
 80014c8:	2301      	movs	r3, #1
 80014ca:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014cc:	680a      	ldr	r2, [r1, #0]
 80014ce:	401a      	ands	r2, r3
    if(iocurrent == ioposition)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d1f5      	bne.n	80014c0 <HAL_GPIO_Init+0x9c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014d4:	684d      	ldr	r5, [r1, #4]
 80014d6:	f025 0510 	bic.w	r5, r5, #16
 80014da:	3d01      	subs	r5, #1
 80014dc:	2d01      	cmp	r5, #1
 80014de:	d818      	bhi.n	8001512 <HAL_GPIO_Init+0xee>
        temp = GPIOx->OSPEEDR; 
 80014e0:	6885      	ldr	r5, [r0, #8]
 80014e2:	ea4f 0944 	mov.w	r9, r4, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014e6:	f04f 0803 	mov.w	r8, #3
 80014ea:	fa08 f809 	lsl.w	r8, r8, r9
 80014ee:	ea25 0808 	bic.w	r8, r5, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014f2:	68cd      	ldr	r5, [r1, #12]
 80014f4:	fa05 f509 	lsl.w	r5, r5, r9
 80014f8:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->OSPEEDR = temp;
 80014fc:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80014fe:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001500:	ea25 0803 	bic.w	r8, r5, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001504:	684d      	ldr	r5, [r1, #4]
 8001506:	f3c5 1300 	ubfx	r3, r5, #4, #1
 800150a:	40a3      	lsls	r3, r4
 800150c:	ea43 0308 	orr.w	r3, r3, r8
        GPIOx->OTYPER = temp;
 8001510:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8001512:	68c5      	ldr	r5, [r0, #12]
 8001514:	ea4f 0844 	mov.w	r8, r4, lsl #1
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001518:	2303      	movs	r3, #3
 800151a:	fa03 f308 	lsl.w	r3, r3, r8
 800151e:	43db      	mvns	r3, r3
 8001520:	ea03 0905 	and.w	r9, r3, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001524:	688d      	ldr	r5, [r1, #8]
 8001526:	fa05 f508 	lsl.w	r5, r5, r8
 800152a:	ea45 0509 	orr.w	r5, r5, r9
      GPIOx->PUPDR = temp;
 800152e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001530:	684d      	ldr	r5, [r1, #4]
 8001532:	f025 0510 	bic.w	r5, r5, #16
 8001536:	2d02      	cmp	r5, #2
 8001538:	f43f af7f 	beq.w	800143a <HAL_GPIO_Init+0x16>
      temp = GPIOx->MODER;
 800153c:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800153e:	401d      	ands	r5, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001540:	684b      	ldr	r3, [r1, #4]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	fa03 f308 	lsl.w	r3, r3, r8
 800154a:	432b      	orrs	r3, r5
      GPIOx->MODER = temp;
 800154c:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800154e:	684b      	ldr	r3, [r1, #4]
 8001550:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001554:	d0b4      	beq.n	80014c0 <HAL_GPIO_Init+0x9c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800155c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001560:	647b      	str	r3, [r7, #68]	; 0x44
 8001562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	9b01      	ldr	r3, [sp, #4]
 800156c:	f024 0303 	bic.w	r3, r4, #3
 8001570:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001574:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp = SYSCFG->EXTICR[position >> 2U];
 8001578:	689d      	ldr	r5, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800157a:	f004 0903 	and.w	r9, r4, #3
 800157e:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8001582:	f04f 0a0f 	mov.w	sl, #15
 8001586:	fa0a fa09 	lsl.w	sl, sl, r9
 800158a:	ea25 0a0a 	bic.w	sl, r5, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800158e:	4560      	cmp	r0, ip
 8001590:	f43f af6a 	beq.w	8001468 <HAL_GPIO_Init+0x44>
 8001594:	4570      	cmp	r0, lr
 8001596:	d019      	beq.n	80015cc <HAL_GPIO_Init+0x1a8>
 8001598:	4d16      	ldr	r5, [pc, #88]	; (80015f4 <HAL_GPIO_Init+0x1d0>)
 800159a:	42a8      	cmp	r0, r5
 800159c:	d018      	beq.n	80015d0 <HAL_GPIO_Init+0x1ac>
 800159e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015a2:	42a8      	cmp	r0, r5
 80015a4:	d016      	beq.n	80015d4 <HAL_GPIO_Init+0x1b0>
 80015a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015aa:	42a8      	cmp	r0, r5
 80015ac:	d014      	beq.n	80015d8 <HAL_GPIO_Init+0x1b4>
 80015ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015b2:	42a8      	cmp	r0, r5
 80015b4:	d012      	beq.n	80015dc <HAL_GPIO_Init+0x1b8>
 80015b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015ba:	42a8      	cmp	r0, r5
 80015bc:	d010      	beq.n	80015e0 <HAL_GPIO_Init+0x1bc>
 80015be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015c2:	42a8      	cmp	r0, r5
 80015c4:	bf0c      	ite	eq
 80015c6:	2507      	moveq	r5, #7
 80015c8:	2508      	movne	r5, #8
 80015ca:	e74e      	b.n	800146a <HAL_GPIO_Init+0x46>
 80015cc:	2501      	movs	r5, #1
 80015ce:	e74c      	b.n	800146a <HAL_GPIO_Init+0x46>
 80015d0:	2502      	movs	r5, #2
 80015d2:	e74a      	b.n	800146a <HAL_GPIO_Init+0x46>
 80015d4:	2503      	movs	r5, #3
 80015d6:	e748      	b.n	800146a <HAL_GPIO_Init+0x46>
 80015d8:	2504      	movs	r5, #4
 80015da:	e746      	b.n	800146a <HAL_GPIO_Init+0x46>
 80015dc:	2505      	movs	r5, #5
 80015de:	e744      	b.n	800146a <HAL_GPIO_Init+0x46>
 80015e0:	2506      	movs	r5, #6
 80015e2:	e742      	b.n	800146a <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 80015e4:	b003      	add	sp, #12
 80015e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40013c00 	.word	0x40013c00
 80015f4:	40020800 	.word	0x40020800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020400 	.word	0x40020400

08001600 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001600:	6903      	ldr	r3, [r0, #16]
 8001602:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001604:	bf14      	ite	ne
 8001606:	2001      	movne	r0, #1
 8001608:	2000      	moveq	r0, #0
 800160a:	4770      	bx	lr

0800160c <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800160c:	b308      	cbz	r0, 8001652 <HAL_IWDG_Init+0x46>
{
 800160e:	b538      	push	{r3, r4, r5, lr}
 8001610:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001612:	6803      	ldr	r3, [r0, #0]
 8001614:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001618:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800161a:	6803      	ldr	r3, [r0, #0]
 800161c:	f245 5255 	movw	r2, #21845	; 0x5555
 8001620:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001622:	6803      	ldr	r3, [r0, #0]
 8001624:	6842      	ldr	r2, [r0, #4]
 8001626:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001628:	6803      	ldr	r3, [r0, #0]
 800162a:	6882      	ldr	r2, [r0, #8]
 800162c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800162e:	f7ff fc97 	bl	8000f60 <HAL_GetTick>
 8001632:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	b132      	cbz	r2, 8001648 <HAL_IWDG_Init+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800163a:	f7ff fc91 	bl	8000f60 <HAL_GetTick>
 800163e:	1b40      	subs	r0, r0, r5
 8001640:	2830      	cmp	r0, #48	; 0x30
 8001642:	d9f7      	bls.n	8001634 <HAL_IWDG_Init+0x28>
    {
      return HAL_TIMEOUT;
 8001644:	2003      	movs	r0, #3
 8001646:	e003      	b.n	8001650 <HAL_IWDG_Init+0x44>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001648:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800164c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800164e:	2000      	movs	r0, #0
}
 8001650:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001652:	2001      	movs	r0, #1
}
 8001654:	4770      	bx	lr

08001656 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001656:	6803      	ldr	r3, [r0, #0]
 8001658:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800165c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800165e:	2000      	movs	r0, #0
 8001660:	4770      	bx	lr
	...

08001664 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001664:	2800      	cmp	r0, #0
 8001666:	f000 81e6 	beq.w	8001a36 <HAL_RCC_OscConfig+0x3d2>
{
 800166a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001672:	6803      	ldr	r3, [r0, #0]
 8001674:	f013 0f01 	tst.w	r3, #1
 8001678:	d03b      	beq.n	80016f2 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800167a:	4ba8      	ldr	r3, [pc, #672]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b04      	cmp	r3, #4
 8001684:	d02c      	beq.n	80016e0 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001686:	4ba5      	ldr	r3, [pc, #660]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800168e:	2b08      	cmp	r3, #8
 8001690:	d021      	beq.n	80016d6 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001692:	6863      	ldr	r3, [r4, #4]
 8001694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001698:	d04f      	beq.n	800173a <HAL_RCC_OscConfig+0xd6>
 800169a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800169e:	d052      	beq.n	8001746 <HAL_RCC_OscConfig+0xe2>
 80016a0:	4b9e      	ldr	r3, [pc, #632]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016b0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016b2:	6863      	ldr	r3, [r4, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d050      	beq.n	800175a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fc52 	bl	8000f60 <HAL_GetTick>
 80016bc:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	4d97      	ldr	r5, [pc, #604]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 80016c0:	682b      	ldr	r3, [r5, #0]
 80016c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80016c6:	d114      	bne.n	80016f2 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fc4a 	bl	8000f60 <HAL_GetTick>
 80016cc:	1b80      	subs	r0, r0, r6
 80016ce:	2864      	cmp	r0, #100	; 0x64
 80016d0:	d9f6      	bls.n	80016c0 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 80016d2:	2003      	movs	r0, #3
 80016d4:	e1b4      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016d6:	4b91      	ldr	r3, [pc, #580]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80016de:	d0d8      	beq.n	8001692 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e0:	4b8e      	ldr	r3, [pc, #568]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80016e8:	d003      	beq.n	80016f2 <HAL_RCC_OscConfig+0x8e>
 80016ea:	6863      	ldr	r3, [r4, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 81a4 	beq.w	8001a3a <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	f013 0f02 	tst.w	r3, #2
 80016f8:	d055      	beq.n	80017a6 <HAL_RCC_OscConfig+0x142>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016fa:	4b88      	ldr	r3, [pc, #544]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f013 0f0c 	tst.w	r3, #12
 8001702:	d03e      	beq.n	8001782 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001704:	4b85      	ldr	r3, [pc, #532]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800170c:	2b08      	cmp	r3, #8
 800170e:	d033      	beq.n	8001778 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001710:	68e3      	ldr	r3, [r4, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d068      	beq.n	80017e8 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001716:	4b82      	ldr	r3, [pc, #520]	; (8001920 <HAL_RCC_OscConfig+0x2bc>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff fc20 	bl	8000f60 <HAL_GetTick>
 8001720:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001722:	4d7e      	ldr	r5, [pc, #504]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 8001724:	682b      	ldr	r3, [r5, #0]
 8001726:	f013 0f02 	tst.w	r3, #2
 800172a:	d154      	bne.n	80017d6 <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800172c:	f7ff fc18 	bl	8000f60 <HAL_GetTick>
 8001730:	1b80      	subs	r0, r0, r6
 8001732:	2802      	cmp	r0, #2
 8001734:	d9f6      	bls.n	8001724 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 8001736:	2003      	movs	r0, #3
 8001738:	e182      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173a:	4a78      	ldr	r2, [pc, #480]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 800173c:	6813      	ldr	r3, [r2, #0]
 800173e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	e7b5      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e>
 8001746:	4b75      	ldr	r3, [pc, #468]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e7ab      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 800175a:	f7ff fc01 	bl	8000f60 <HAL_GetTick>
 800175e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001760:	4d6e      	ldr	r5, [pc, #440]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 8001762:	682b      	ldr	r3, [r5, #0]
 8001764:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001768:	d0c3      	beq.n	80016f2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800176a:	f7ff fbf9 	bl	8000f60 <HAL_GetTick>
 800176e:	1b80      	subs	r0, r0, r6
 8001770:	2864      	cmp	r0, #100	; 0x64
 8001772:	d9f6      	bls.n	8001762 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8001774:	2003      	movs	r0, #3
 8001776:	e163      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001778:	4b68      	ldr	r3, [pc, #416]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001780:	d1c6      	bne.n	8001710 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001782:	4b66      	ldr	r3, [pc, #408]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f013 0f02 	tst.w	r3, #2
 800178a:	d004      	beq.n	8001796 <HAL_RCC_OscConfig+0x132>
 800178c:	68e3      	ldr	r3, [r4, #12]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d001      	beq.n	8001796 <HAL_RCC_OscConfig+0x132>
        return HAL_ERROR;
 8001792:	2001      	movs	r0, #1
 8001794:	e154      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001796:	4a61      	ldr	r2, [pc, #388]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 8001798:	6813      	ldr	r3, [r2, #0]
 800179a:	6921      	ldr	r1, [r4, #16]
 800179c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017a0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80017a4:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a6:	6823      	ldr	r3, [r4, #0]
 80017a8:	f013 0f08 	tst.w	r3, #8
 80017ac:	d040      	beq.n	8001830 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017ae:	6963      	ldr	r3, [r4, #20]
 80017b0:	b363      	cbz	r3, 800180c <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b2:	4b5c      	ldr	r3, [pc, #368]	; (8001924 <HAL_RCC_OscConfig+0x2c0>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b8:	f7ff fbd2 	bl	8000f60 <HAL_GetTick>
 80017bc:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017be:	4d57      	ldr	r5, [pc, #348]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 80017c0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017c2:	f013 0f02 	tst.w	r3, #2
 80017c6:	d133      	bne.n	8001830 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c8:	f7ff fbca 	bl	8000f60 <HAL_GetTick>
 80017cc:	1b80      	subs	r0, r0, r6
 80017ce:	2802      	cmp	r0, #2
 80017d0:	d9f6      	bls.n	80017c0 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 80017d2:	2003      	movs	r0, #3
 80017d4:	e134      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d6:	4a51      	ldr	r2, [pc, #324]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 80017d8:	6813      	ldr	r3, [r2, #0]
 80017da:	6921      	ldr	r1, [r4, #16]
 80017dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017e0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	e7de      	b.n	80017a6 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 80017e8:	4b4d      	ldr	r3, [pc, #308]	; (8001920 <HAL_RCC_OscConfig+0x2bc>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017ee:	f7ff fbb7 	bl	8000f60 <HAL_GetTick>
 80017f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f4:	4d49      	ldr	r5, [pc, #292]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 80017f6:	682b      	ldr	r3, [r5, #0]
 80017f8:	f013 0f02 	tst.w	r3, #2
 80017fc:	d0d3      	beq.n	80017a6 <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fe:	f7ff fbaf 	bl	8000f60 <HAL_GetTick>
 8001802:	1b80      	subs	r0, r0, r6
 8001804:	2802      	cmp	r0, #2
 8001806:	d9f6      	bls.n	80017f6 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8001808:	2003      	movs	r0, #3
 800180a:	e119      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800180c:	4b45      	ldr	r3, [pc, #276]	; (8001924 <HAL_RCC_OscConfig+0x2c0>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7ff fba5 	bl	8000f60 <HAL_GetTick>
 8001816:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001818:	4d40      	ldr	r5, [pc, #256]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 800181a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800181c:	f013 0f02 	tst.w	r3, #2
 8001820:	d006      	beq.n	8001830 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001822:	f7ff fb9d 	bl	8000f60 <HAL_GetTick>
 8001826:	1b80      	subs	r0, r0, r6
 8001828:	2802      	cmp	r0, #2
 800182a:	d9f6      	bls.n	800181a <HAL_RCC_OscConfig+0x1b6>
        {
          return HAL_TIMEOUT;
 800182c:	2003      	movs	r0, #3
 800182e:	e107      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	f013 0f04 	tst.w	r3, #4
 8001836:	d07a      	beq.n	800192e <HAL_RCC_OscConfig+0x2ca>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001838:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001840:	d134      	bne.n	80018ac <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	4b35      	ldr	r3, [pc, #212]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 8001848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800184a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800184e:	641a      	str	r2, [r3, #64]	; 0x40
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800185a:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185c:	4b32      	ldr	r3, [pc, #200]	; (8001928 <HAL_RCC_OscConfig+0x2c4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001864:	d024      	beq.n	80018b0 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001866:	68a3      	ldr	r3, [r4, #8]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d035      	beq.n	80018d8 <HAL_RCC_OscConfig+0x274>
 800186c:	2b05      	cmp	r3, #5
 800186e:	d039      	beq.n	80018e4 <HAL_RCC_OscConfig+0x280>
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 8001872:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001874:	f022 0201 	bic.w	r2, r2, #1
 8001878:	671a      	str	r2, [r3, #112]	; 0x70
 800187a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800187c:	f022 0204 	bic.w	r2, r2, #4
 8001880:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001882:	68a3      	ldr	r3, [r4, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d037      	beq.n	80018f8 <HAL_RCC_OscConfig+0x294>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001888:	f7ff fb6a 	bl	8000f60 <HAL_GetTick>
 800188c:	4680      	mov	r8, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800188e:	4e23      	ldr	r6, [pc, #140]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001890:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001894:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001896:	f013 0f02 	tst.w	r3, #2
 800189a:	d147      	bne.n	800192c <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800189c:	f7ff fb60 	bl	8000f60 <HAL_GetTick>
 80018a0:	eba0 0008 	sub.w	r0, r0, r8
 80018a4:	42b8      	cmp	r0, r7
 80018a6:	d9f5      	bls.n	8001894 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80018a8:	2003      	movs	r0, #3
 80018aa:	e0c9      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
    FlagStatus       pwrclkchanged = RESET;
 80018ac:	2500      	movs	r5, #0
 80018ae:	e7d5      	b.n	800185c <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b0:	4a1d      	ldr	r2, [pc, #116]	; (8001928 <HAL_RCC_OscConfig+0x2c4>)
 80018b2:	6813      	ldr	r3, [r2, #0]
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80018ba:	f7ff fb51 	bl	8000f60 <HAL_GetTick>
 80018be:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	4e19      	ldr	r6, [pc, #100]	; (8001928 <HAL_RCC_OscConfig+0x2c4>)
 80018c2:	6833      	ldr	r3, [r6, #0]
 80018c4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80018c8:	d1cd      	bne.n	8001866 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ca:	f7ff fb49 	bl	8000f60 <HAL_GetTick>
 80018ce:	1bc0      	subs	r0, r0, r7
 80018d0:	2802      	cmp	r0, #2
 80018d2:	d9f6      	bls.n	80018c2 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 80018d4:	2003      	movs	r0, #3
 80018d6:	e0b3      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d8:	4a10      	ldr	r2, [pc, #64]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 80018da:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6713      	str	r3, [r2, #112]	; 0x70
 80018e2:	e7ce      	b.n	8001882 <HAL_RCC_OscConfig+0x21e>
 80018e4:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
 80018e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018e8:	f042 0204 	orr.w	r2, r2, #4
 80018ec:	671a      	str	r2, [r3, #112]	; 0x70
 80018ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018f0:	f042 0201 	orr.w	r2, r2, #1
 80018f4:	671a      	str	r2, [r3, #112]	; 0x70
 80018f6:	e7c4      	b.n	8001882 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f8:	f7ff fb32 	bl	8000f60 <HAL_GetTick>
 80018fc:	4680      	mov	r8, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fe:	4e07      	ldr	r6, [pc, #28]	; (800191c <HAL_RCC_OscConfig+0x2b8>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001900:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001904:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001906:	f013 0f02 	tst.w	r3, #2
 800190a:	d00f      	beq.n	800192c <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190c:	f7ff fb28 	bl	8000f60 <HAL_GetTick>
 8001910:	eba0 0008 	sub.w	r0, r0, r8
 8001914:	42b8      	cmp	r0, r7
 8001916:	d9f5      	bls.n	8001904 <HAL_RCC_OscConfig+0x2a0>
        {
          return HAL_TIMEOUT;
 8001918:	2003      	movs	r0, #3
 800191a:	e091      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
 800191c:	40023800 	.word	0x40023800
 8001920:	42470000 	.word	0x42470000
 8001924:	42470e80 	.word	0x42470e80
 8001928:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800192c:	b9ed      	cbnz	r5, 800196a <HAL_RCC_OscConfig+0x306>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800192e:	69a3      	ldr	r3, [r4, #24]
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 8084 	beq.w	8001a3e <HAL_RCC_OscConfig+0x3da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001936:	4a45      	ldr	r2, [pc, #276]	; (8001a4c <HAL_RCC_OscConfig+0x3e8>)
 8001938:	6892      	ldr	r2, [r2, #8]
 800193a:	f002 020c 	and.w	r2, r2, #12
 800193e:	2a08      	cmp	r2, #8
 8001940:	d051      	beq.n	80019e6 <HAL_RCC_OscConfig+0x382>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001942:	2b02      	cmp	r3, #2
 8001944:	d017      	beq.n	8001976 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001946:	4b42      	ldr	r3, [pc, #264]	; (8001a50 <HAL_RCC_OscConfig+0x3ec>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff fb08 	bl	8000f60 <HAL_GetTick>
 8001950:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001952:	4c3e      	ldr	r4, [pc, #248]	; (8001a4c <HAL_RCC_OscConfig+0x3e8>)
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800195a:	d042      	beq.n	80019e2 <HAL_RCC_OscConfig+0x37e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff fb00 	bl	8000f60 <HAL_GetTick>
 8001960:	1b40      	subs	r0, r0, r5
 8001962:	2802      	cmp	r0, #2
 8001964:	d9f6      	bls.n	8001954 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8001966:	2003      	movs	r0, #3
 8001968:	e06a      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
      __HAL_RCC_PWR_CLK_DISABLE();
 800196a:	4a38      	ldr	r2, [pc, #224]	; (8001a4c <HAL_RCC_OscConfig+0x3e8>)
 800196c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800196e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001972:	6413      	str	r3, [r2, #64]	; 0x40
 8001974:	e7db      	b.n	800192e <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_PLL_DISABLE();
 8001976:	4b36      	ldr	r3, [pc, #216]	; (8001a50 <HAL_RCC_OscConfig+0x3ec>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800197c:	f7ff faf0 	bl	8000f60 <HAL_GetTick>
 8001980:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001982:	4d32      	ldr	r5, [pc, #200]	; (8001a4c <HAL_RCC_OscConfig+0x3e8>)
 8001984:	682b      	ldr	r3, [r5, #0]
 8001986:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800198a:	d006      	beq.n	800199a <HAL_RCC_OscConfig+0x336>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff fae8 	bl	8000f60 <HAL_GetTick>
 8001990:	1b80      	subs	r0, r0, r6
 8001992:	2802      	cmp	r0, #2
 8001994:	d9f6      	bls.n	8001984 <HAL_RCC_OscConfig+0x320>
            return HAL_TIMEOUT;
 8001996:	2003      	movs	r0, #3
 8001998:	e052      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800199a:	69e3      	ldr	r3, [r4, #28]
 800199c:	6a22      	ldr	r2, [r4, #32]
 800199e:	4313      	orrs	r3, r2
 80019a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019a2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80019a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80019a8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80019ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80019ae:	0852      	lsrs	r2, r2, #1
 80019b0:	3a01      	subs	r2, #1
 80019b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80019b6:	4a25      	ldr	r2, [pc, #148]	; (8001a4c <HAL_RCC_OscConfig+0x3e8>)
 80019b8:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80019ba:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <HAL_RCC_OscConfig+0x3ec>)
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019c0:	f7ff face 	bl	8000f60 <HAL_GetTick>
 80019c4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c6:	4c21      	ldr	r4, [pc, #132]	; (8001a4c <HAL_RCC_OscConfig+0x3e8>)
 80019c8:	6823      	ldr	r3, [r4, #0]
 80019ca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80019ce:	d106      	bne.n	80019de <HAL_RCC_OscConfig+0x37a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff fac6 	bl	8000f60 <HAL_GetTick>
 80019d4:	1b40      	subs	r0, r0, r5
 80019d6:	2802      	cmp	r0, #2
 80019d8:	d9f6      	bls.n	80019c8 <HAL_RCC_OscConfig+0x364>
            return HAL_TIMEOUT;
 80019da:	2003      	movs	r0, #3
 80019dc:	e030      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80019de:	2000      	movs	r0, #0
 80019e0:	e02e      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
 80019e2:	2000      	movs	r0, #0
 80019e4:	e02c      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d02d      	beq.n	8001a46 <HAL_RCC_OscConfig+0x3e2>
        pll_config = RCC->PLLCFGR;
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_RCC_OscConfig+0x3e8>)
 80019ec:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80019f2:	69e2      	ldr	r2, [r4, #28]
 80019f4:	4291      	cmp	r1, r2
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_OscConfig+0x398>
          return HAL_ERROR;
 80019f8:	2001      	movs	r0, #1
 80019fa:	e021      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a00:	6a21      	ldr	r1, [r4, #32]
 8001a02:	428a      	cmp	r2, r1
 8001a04:	d001      	beq.n	8001a0a <HAL_RCC_OscConfig+0x3a6>
          return HAL_ERROR;
 8001a06:	2001      	movs	r0, #1
 8001a08:	e01a      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a0c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001a10:	401a      	ands	r2, r3
 8001a12:	428a      	cmp	r2, r1
 8001a14:	d001      	beq.n	8001a1a <HAL_RCC_OscConfig+0x3b6>
          return HAL_ERROR;
 8001a16:	2001      	movs	r0, #1
 8001a18:	e012      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a1e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001a20:	428a      	cmp	r2, r1
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_OscConfig+0x3c4>
          return HAL_ERROR;
 8001a24:	2001      	movs	r0, #1
 8001a26:	e00b      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001a28:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a2c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001a2e:	1a18      	subs	r0, r3, r0
 8001a30:	bf18      	it	ne
 8001a32:	2001      	movne	r0, #1
 8001a34:	e004      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
 8001a36:	2001      	movs	r0, #1
}
 8001a38:	4770      	bx	lr
        return HAL_ERROR;
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
  return HAL_OK;
 8001a3e:	2000      	movs	r0, #0
}
 8001a40:	b002      	add	sp, #8
 8001a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8001a46:	2001      	movs	r0, #1
 8001a48:	e7fa      	b.n	8001a40 <HAL_RCC_OscConfig+0x3dc>
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	42470060 	.word	0x42470060

08001a54 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a54:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d003      	beq.n	8001a68 <HAL_RCC_GetSysClockFreq+0x14>
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d003      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x18>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a64:	482f      	ldr	r0, [pc, #188]	; (8001b24 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001a66:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001a68:	482f      	ldr	r0, [pc, #188]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001a6a:	4770      	bx	lr
{
 8001a6c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a70:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001a7e:	d02b      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x84>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a80:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001a88:	461e      	mov	r6, r3
 8001a8a:	2700      	movs	r7, #0
 8001a8c:	015c      	lsls	r4, r3, #5
 8001a8e:	2500      	movs	r5, #0
 8001a90:	1ae4      	subs	r4, r4, r3
 8001a92:	eb65 0507 	sbc.w	r5, r5, r7
 8001a96:	01a9      	lsls	r1, r5, #6
 8001a98:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001a9c:	01a0      	lsls	r0, r4, #6
 8001a9e:	1b00      	subs	r0, r0, r4
 8001aa0:	eb61 0105 	sbc.w	r1, r1, r5
 8001aa4:	00cb      	lsls	r3, r1, #3
 8001aa6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001aaa:	00c4      	lsls	r4, r0, #3
 8001aac:	19a0      	adds	r0, r4, r6
 8001aae:	eb43 0107 	adc.w	r1, r3, r7
 8001ab2:	024b      	lsls	r3, r1, #9
 8001ab4:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8001ab8:	0244      	lsls	r4, r0, #9
 8001aba:	4620      	mov	r0, r4
 8001abc:	4619      	mov	r1, r3
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f7fe fb82 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ac4:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001acc:	3301      	adds	r3, #1
 8001ace:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001ad0:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001ad4:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001ae0:	461e      	mov	r6, r3
 8001ae2:	2700      	movs	r7, #0
 8001ae4:	015c      	lsls	r4, r3, #5
 8001ae6:	2500      	movs	r5, #0
 8001ae8:	1ae4      	subs	r4, r4, r3
 8001aea:	eb65 0507 	sbc.w	r5, r5, r7
 8001aee:	01a9      	lsls	r1, r5, #6
 8001af0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001af4:	01a0      	lsls	r0, r4, #6
 8001af6:	1b00      	subs	r0, r0, r4
 8001af8:	eb61 0105 	sbc.w	r1, r1, r5
 8001afc:	00cb      	lsls	r3, r1, #3
 8001afe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b02:	00c4      	lsls	r4, r0, #3
 8001b04:	19a0      	adds	r0, r4, r6
 8001b06:	eb43 0107 	adc.w	r1, r3, r7
 8001b0a:	028b      	lsls	r3, r1, #10
 8001b0c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001b10:	0284      	lsls	r4, r0, #10
 8001b12:	4620      	mov	r0, r4
 8001b14:	4619      	mov	r1, r3
 8001b16:	2300      	movs	r3, #0
 8001b18:	f7fe fb56 	bl	80001c8 <__aeabi_uldivmod>
 8001b1c:	e7d2      	b.n	8001ac4 <HAL_RCC_GetSysClockFreq+0x70>
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800
 8001b24:	00f42400 	.word	0x00f42400
 8001b28:	007a1200 	.word	0x007a1200

08001b2c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001b2c:	2800      	cmp	r0, #0
 8001b2e:	f000 80a1 	beq.w	8001c74 <HAL_RCC_ClockConfig+0x148>
{
 8001b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b36:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b38:	4b50      	ldr	r3, [pc, #320]	; (8001c7c <HAL_RCC_ClockConfig+0x150>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	428b      	cmp	r3, r1
 8001b42:	d20a      	bcs.n	8001b5a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b44:	b2cb      	uxtb	r3, r1
 8001b46:	4a4d      	ldr	r2, [pc, #308]	; (8001c7c <HAL_RCC_ClockConfig+0x150>)
 8001b48:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	6813      	ldr	r3, [r2, #0]
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	428b      	cmp	r3, r1
 8001b52:	d002      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x2e>
      return HAL_ERROR;
 8001b54:	2001      	movs	r0, #1
}
 8001b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	f013 0f02 	tst.w	r3, #2
 8001b60:	d017      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x66>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b62:	f013 0f04 	tst.w	r3, #4
 8001b66:	d004      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b68:	4a45      	ldr	r2, [pc, #276]	; (8001c80 <HAL_RCC_ClockConfig+0x154>)
 8001b6a:	6893      	ldr	r3, [r2, #8]
 8001b6c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b70:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	f013 0f08 	tst.w	r3, #8
 8001b78:	d004      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x58>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b7a:	4a41      	ldr	r2, [pc, #260]	; (8001c80 <HAL_RCC_ClockConfig+0x154>)
 8001b7c:	6893      	ldr	r3, [r2, #8]
 8001b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b82:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b84:	4a3e      	ldr	r2, [pc, #248]	; (8001c80 <HAL_RCC_ClockConfig+0x154>)
 8001b86:	6893      	ldr	r3, [r2, #8]
 8001b88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b8c:	68a0      	ldr	r0, [r4, #8]
 8001b8e:	4303      	orrs	r3, r0
 8001b90:	6093      	str	r3, [r2, #8]
 8001b92:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	f013 0f01 	tst.w	r3, #1
 8001b9a:	d033      	beq.n	8001c04 <HAL_RCC_ClockConfig+0xd8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9c:	6862      	ldr	r2, [r4, #4]
 8001b9e:	2a01      	cmp	r2, #1
 8001ba0:	d022      	beq.n	8001be8 <HAL_RCC_ClockConfig+0xbc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ba2:	1e93      	subs	r3, r2, #2
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d926      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba8:	4b35      	ldr	r3, [pc, #212]	; (8001c80 <HAL_RCC_ClockConfig+0x154>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f013 0f02 	tst.w	r3, #2
 8001bb0:	d062      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x14c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bb2:	4933      	ldr	r1, [pc, #204]	; (8001c80 <HAL_RCC_ClockConfig+0x154>)
 8001bb4:	688b      	ldr	r3, [r1, #8]
 8001bb6:	f023 0303 	bic.w	r3, r3, #3
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001bbe:	f7ff f9cf 	bl	8000f60 <HAL_GetTick>
 8001bc2:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc4:	4e2e      	ldr	r6, [pc, #184]	; (8001c80 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc6:	f241 3788 	movw	r7, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bca:	68b3      	ldr	r3, [r6, #8]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	6862      	ldr	r2, [r4, #4]
 8001bd2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001bd6:	d015      	beq.n	8001c04 <HAL_RCC_ClockConfig+0xd8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd8:	f7ff f9c2 	bl	8000f60 <HAL_GetTick>
 8001bdc:	eba0 0008 	sub.w	r0, r0, r8
 8001be0:	42b8      	cmp	r0, r7
 8001be2:	d9f2      	bls.n	8001bca <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8001be4:	2003      	movs	r0, #3
 8001be6:	e7b6      	b.n	8001b56 <HAL_RCC_ClockConfig+0x2a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be8:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <HAL_RCC_ClockConfig+0x154>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001bf0:	d1df      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	e7af      	b.n	8001b56 <HAL_RCC_ClockConfig+0x2a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf6:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <HAL_RCC_ClockConfig+0x154>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001bfe:	d1d8      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001c00:	2001      	movs	r0, #1
 8001c02:	e7a8      	b.n	8001b56 <HAL_RCC_ClockConfig+0x2a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_RCC_ClockConfig+0x150>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	42ab      	cmp	r3, r5
 8001c0e:	d909      	bls.n	8001c24 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c10:	b2ea      	uxtb	r2, r5
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_RCC_ClockConfig+0x150>)
 8001c14:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	42ab      	cmp	r3, r5
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_ClockConfig+0xf8>
      return HAL_ERROR;
 8001c20:	2001      	movs	r0, #1
 8001c22:	e798      	b.n	8001b56 <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	f013 0f04 	tst.w	r3, #4
 8001c2a:	d006      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c2c:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <HAL_RCC_ClockConfig+0x154>)
 8001c2e:	6893      	ldr	r3, [r2, #8]
 8001c30:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001c34:	68e1      	ldr	r1, [r4, #12]
 8001c36:	430b      	orrs	r3, r1
 8001c38:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	f013 0f08 	tst.w	r3, #8
 8001c40:	d007      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c42:	4a0f      	ldr	r2, [pc, #60]	; (8001c80 <HAL_RCC_ClockConfig+0x154>)
 8001c44:	6893      	ldr	r3, [r2, #8]
 8001c46:	6921      	ldr	r1, [r4, #16]
 8001c48:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001c4c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c50:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c52:	f7ff feff 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_RCC_ClockConfig+0x154>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c5e:	4a09      	ldr	r2, [pc, #36]	; (8001c84 <HAL_RCC_ClockConfig+0x158>)
 8001c60:	5cd3      	ldrb	r3, [r2, r3]
 8001c62:	40d8      	lsrs	r0, r3
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <HAL_RCC_ClockConfig+0x15c>)
 8001c66:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_RCC_ClockConfig+0x160>)
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	f7ff f92c 	bl	8000ec8 <HAL_InitTick>
  return HAL_OK;
 8001c70:	2000      	movs	r0, #0
 8001c72:	e770      	b.n	8001b56 <HAL_RCC_ClockConfig+0x2a>
    return HAL_ERROR;
 8001c74:	2001      	movs	r0, #1
}
 8001c76:	4770      	bx	lr
        return HAL_ERROR;
 8001c78:	2001      	movs	r0, #1
 8001c7a:	e76c      	b.n	8001b56 <HAL_RCC_ClockConfig+0x2a>
 8001c7c:	40023c00 	.word	0x40023c00
 8001c80:	40023800 	.word	0x40023800
 8001c84:	08002278 	.word	0x08002278
 8001c88:	20005498 	.word	0x20005498
 8001c8c:	200054a0 	.word	0x200054a0

08001c90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c92:	4607      	mov	r7, r0
 8001c94:	460e      	mov	r6, r1
 8001c96:	4615      	mov	r5, r2
 8001c98:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	6893      	ldr	r3, [r2, #8]
 8001c9e:	ea36 0303 	bics.w	r3, r6, r3
 8001ca2:	bf0c      	ite	eq
 8001ca4:	2301      	moveq	r3, #1
 8001ca6:	2300      	movne	r3, #0
 8001ca8:	42ab      	cmp	r3, r5
 8001caa:	d037      	beq.n	8001d1c <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001cac:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001cb0:	d0f4      	beq.n	8001c9c <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001cb2:	f7ff f955 	bl	8000f60 <HAL_GetTick>
 8001cb6:	9b06      	ldr	r3, [sp, #24]
 8001cb8:	1ac0      	subs	r0, r0, r3
 8001cba:	42a0      	cmp	r0, r4
 8001cbc:	d201      	bcs.n	8001cc2 <SPI_WaitFlagStateUntilTimeout+0x32>
 8001cbe:	2c00      	cmp	r4, #0
 8001cc0:	d1eb      	bne.n	8001c9a <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	6853      	ldr	r3, [r2, #4]
 8001cc6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8001cca:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cd2:	d00b      	beq.n	8001cec <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cda:	d014      	beq.n	8001d06 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

        return HAL_TIMEOUT;
 8001ce8:	2003      	movs	r0, #3
 8001cea:	e018      	b.n	8001d1e <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cf2:	d002      	beq.n	8001cfa <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf8:	d1ec      	bne.n	8001cd4 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	6813      	ldr	r3, [r2, #0]
 8001cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	e7e6      	b.n	8001cd4 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	6813      	ldr	r3, [r2, #0]
 8001d0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	6813      	ldr	r3, [r2, #0]
 8001d14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e7df      	b.n	8001cdc <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8001d1c:	2000      	movs	r0, #0
}
 8001d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d20:	b530      	push	{r4, r5, lr}
 8001d22:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001d24:	4c16      	ldr	r4, [pc, #88]	; (8001d80 <SPI_EndRxTxTransaction+0x60>)
 8001d26:	6824      	ldr	r4, [r4, #0]
 8001d28:	4d16      	ldr	r5, [pc, #88]	; (8001d84 <SPI_EndRxTxTransaction+0x64>)
 8001d2a:	fba5 3404 	umull	r3, r4, r5, r4
 8001d2e:	0d64      	lsrs	r4, r4, #21
 8001d30:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001d34:	fb05 f404 	mul.w	r4, r5, r4
 8001d38:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d3a:	6844      	ldr	r4, [r0, #4]
 8001d3c:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8001d40:	d00b      	beq.n	8001d5a <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001d42:	9b03      	ldr	r3, [sp, #12]
 8001d44:	b1c3      	cbz	r3, 8001d78 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8001d46:	9b03      	ldr	r3, [sp, #12]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001d4c:	6803      	ldr	r3, [r0, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d54:	d1f5      	bne.n	8001d42 <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e00f      	b.n	8001d7a <SPI_EndRxTxTransaction+0x5a>
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d5e:	9200      	str	r2, [sp, #0]
 8001d60:	2200      	movs	r2, #0
 8001d62:	2180      	movs	r1, #128	; 0x80
 8001d64:	f7ff ff94 	bl	8001c90 <SPI_WaitFlagStateUntilTimeout>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	b130      	cbz	r0, 8001d7a <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d6e:	f043 0320 	orr.w	r3, r3, #32
 8001d72:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e000      	b.n	8001d7a <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	b005      	add	sp, #20
 8001d7e:	bd30      	pop	{r4, r5, pc}
 8001d80:	20005498 	.word	0x20005498
 8001d84:	165e9f81 	.word	0x165e9f81

08001d88 <SPI_EndRxTransaction>:
{
 8001d88:	b510      	push	{r4, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d8e:	6840      	ldr	r0, [r0, #4]
 8001d90:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8001d94:	d00c      	beq.n	8001db0 <SPI_EndRxTransaction+0x28>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001d96:	9200      	str	r2, [sp, #0]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	4620      	mov	r0, r4
 8001da0:	f7ff ff76 	bl	8001c90 <SPI_WaitFlagStateUntilTimeout>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2800      	cmp	r0, #0
 8001da8:	d136      	bne.n	8001e18 <SPI_EndRxTransaction+0x90>
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	b002      	add	sp, #8
 8001dae:	bd10      	pop	{r4, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001db0:	68a3      	ldr	r3, [r4, #8]
 8001db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db6:	d002      	beq.n	8001dbe <SPI_EndRxTransaction+0x36>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dbc:	d10c      	bne.n	8001dd8 <SPI_EndRxTransaction+0x50>
    __HAL_SPI_DISABLE(hspi);
 8001dbe:	6820      	ldr	r0, [r4, #0]
 8001dc0:	6803      	ldr	r3, [r0, #0]
 8001dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dc6:	6003      	str	r3, [r0, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dc8:	6863      	ldr	r3, [r4, #4]
 8001dca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dce:	d1e2      	bne.n	8001d96 <SPI_EndRxTransaction+0xe>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8001dd0:	68a3      	ldr	r3, [r4, #8]
 8001dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd6:	d00f      	beq.n	8001df8 <SPI_EndRxTransaction+0x70>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001dd8:	9200      	str	r2, [sp, #0]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2180      	movs	r1, #128	; 0x80
 8001de0:	4620      	mov	r0, r4
 8001de2:	f7ff ff55 	bl	8001c90 <SPI_WaitFlagStateUntilTimeout>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2800      	cmp	r0, #0
 8001dea:	d0de      	beq.n	8001daa <SPI_EndRxTransaction+0x22>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001dee:	f043 0320 	orr.w	r3, r3, #32
 8001df2:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e7d8      	b.n	8001daa <SPI_EndRxTransaction+0x22>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001df8:	9200      	str	r2, [sp, #0]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2101      	movs	r1, #1
 8001e00:	4620      	mov	r0, r4
 8001e02:	f7ff ff45 	bl	8001c90 <SPI_WaitFlagStateUntilTimeout>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2800      	cmp	r0, #0
 8001e0a:	d0ce      	beq.n	8001daa <SPI_EndRxTransaction+0x22>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e0e:	f043 0320 	orr.w	r3, r3, #32
 8001e12:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e7c8      	b.n	8001daa <SPI_EndRxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e1a:	f043 0320 	orr.w	r3, r3, #32
 8001e1e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e7c2      	b.n	8001daa <SPI_EndRxTransaction+0x22>

08001e24 <HAL_SPI_Init>:
  if (hspi == NULL)
 8001e24:	2800      	cmp	r0, #0
 8001e26:	d03b      	beq.n	8001ea0 <HAL_SPI_Init+0x7c>
{
 8001e28:	b510      	push	{r4, lr}
 8001e2a:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e30:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d02e      	beq.n	8001e96 <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001e3e:	6822      	ldr	r2, [r4, #0]
 8001e40:	6813      	ldr	r3, [r2, #0]
 8001e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e46:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001e48:	6822      	ldr	r2, [r4, #0]
 8001e4a:	6863      	ldr	r3, [r4, #4]
 8001e4c:	68a1      	ldr	r1, [r4, #8]
 8001e4e:	430b      	orrs	r3, r1
 8001e50:	68e1      	ldr	r1, [r4, #12]
 8001e52:	430b      	orrs	r3, r1
 8001e54:	6921      	ldr	r1, [r4, #16]
 8001e56:	430b      	orrs	r3, r1
 8001e58:	6961      	ldr	r1, [r4, #20]
 8001e5a:	430b      	orrs	r3, r1
 8001e5c:	69e1      	ldr	r1, [r4, #28]
 8001e5e:	430b      	orrs	r3, r1
 8001e60:	6a21      	ldr	r1, [r4, #32]
 8001e62:	430b      	orrs	r3, r1
 8001e64:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001e66:	430b      	orrs	r3, r1
 8001e68:	69a1      	ldr	r1, [r4, #24]
 8001e6a:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8001e6e:	430b      	orrs	r3, r1
 8001e70:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001e72:	6822      	ldr	r2, [r4, #0]
 8001e74:	8b63      	ldrh	r3, [r4, #26]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e80:	6822      	ldr	r2, [r4, #0]
 8001e82:	69d3      	ldr	r3, [r2, #28]
 8001e84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e88:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8001e94:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8001e96:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001e9a:	f7fe ff29 	bl	8000cf0 <HAL_SPI_MspInit>
 8001e9e:	e7cb      	b.n	8001e38 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8001ea0:	2001      	movs	r0, #1
}
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_SPI_TransmitReceive_DMA>:
{
 8001ea4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8001ea6:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8001eaa:	2c01      	cmp	r4, #1
 8001eac:	f000 8095 	beq.w	8001fda <HAL_SPI_TransmitReceive_DMA+0x136>
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  tmp_state           = hspi->State;
 8001eb8:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001ebc:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8001ebe:	2801      	cmp	r0, #1
 8001ec0:	d010      	beq.n	8001ee4 <HAL_SPI_TransmitReceive_DMA+0x40>
 8001ec2:	6865      	ldr	r5, [r4, #4]
 8001ec4:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8001ec8:	d005      	beq.n	8001ed6 <HAL_SPI_TransmitReceive_DMA+0x32>
    errorcode = HAL_BUSY;
 8001eca:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	bd38      	pop	{r3, r4, r5, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001ed6:	68a5      	ldr	r5, [r4, #8]
 8001ed8:	2d00      	cmp	r5, #0
 8001eda:	d176      	bne.n	8001fca <HAL_SPI_TransmitReceive_DMA+0x126>
 8001edc:	2804      	cmp	r0, #4
 8001ede:	d001      	beq.n	8001ee4 <HAL_SPI_TransmitReceive_DMA+0x40>
    errorcode = HAL_BUSY;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e7f3      	b.n	8001ecc <HAL_SPI_TransmitReceive_DMA+0x28>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ee4:	2900      	cmp	r1, #0
 8001ee6:	d072      	beq.n	8001fce <HAL_SPI_TransmitReceive_DMA+0x12a>
 8001ee8:	2a00      	cmp	r2, #0
 8001eea:	d072      	beq.n	8001fd2 <HAL_SPI_TransmitReceive_DMA+0x12e>
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d072      	beq.n	8001fd6 <HAL_SPI_TransmitReceive_DMA+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ef0:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001ef4:	b2c0      	uxtb	r0, r0
 8001ef6:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ef8:	bf1c      	itt	ne
 8001efa:	2005      	movne	r0, #5
 8001efc:	f884 0051 	strbne.w	r0, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f00:	2000      	movs	r0, #0
 8001f02:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f04:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f06:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f08:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f0a:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001f0c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001f0e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001f10:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f12:	6460      	str	r0, [r4, #68]	; 0x44
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001f14:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d01b      	beq.n	8001f56 <HAL_SPI_TransmitReceive_DMA+0xb2>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8001f1e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001f20:	4a2f      	ldr	r2, [pc, #188]	; (8001fe0 <HAL_SPI_TransmitReceive_DMA+0x13c>)
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8001f24:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001f26:	4a2f      	ldr	r2, [pc, #188]	; (8001fe4 <HAL_SPI_TransmitReceive_DMA+0x140>)
 8001f28:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001f2a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001f2c:	4a2e      	ldr	r2, [pc, #184]	; (8001fe8 <HAL_SPI_TransmitReceive_DMA+0x144>)
 8001f2e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8001f30:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001f32:	2200      	movs	r2, #0
 8001f34:	651a      	str	r2, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 8001f36:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001f38:	6821      	ldr	r1, [r4, #0]
 8001f3a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001f3c:	310c      	adds	r1, #12
 8001f3e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001f40:	f7ff f93c 	bl	80011bc <HAL_DMA_Start_IT>
 8001f44:	b170      	cbz	r0, 8001f64 <HAL_SPI_TransmitReceive_DMA+0xc0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001f46:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f48:	f043 0310 	orr.w	r3, r3, #16
 8001f4c:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 8001f54:	e7ba      	b.n	8001ecc <HAL_SPI_TransmitReceive_DMA+0x28>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8001f56:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001f58:	4a24      	ldr	r2, [pc, #144]	; (8001fec <HAL_SPI_TransmitReceive_DMA+0x148>)
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8001f5c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001f5e:	4a24      	ldr	r2, [pc, #144]	; (8001ff0 <HAL_SPI_TransmitReceive_DMA+0x14c>)
 8001f60:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f62:	e7e2      	b.n	8001f2a <HAL_SPI_TransmitReceive_DMA+0x86>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001f64:	6822      	ldr	r2, [r4, #0]
 8001f66:	6853      	ldr	r3, [r2, #4]
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8001f6e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001f70:	2300      	movs	r3, #0
 8001f72:	6413      	str	r3, [r2, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8001f74:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001f76:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8001f78:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001f7a:	64d3      	str	r3, [r2, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8001f7c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001f7e:	6513      	str	r3, [r2, #80]	; 0x50
                                 hspi->TxXferCount))
 8001f80:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001f82:	6822      	ldr	r2, [r4, #0]
 8001f84:	320c      	adds	r2, #12
 8001f86:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001f88:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001f8a:	f7ff f917 	bl	80011bc <HAL_DMA_Start_IT>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	b138      	cbz	r0, 8001fa2 <HAL_SPI_TransmitReceive_DMA+0xfe>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001f92:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f94:	f043 0310 	orr.w	r3, r3, #16
 8001f98:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 8001fa0:	e794      	b.n	8001ecc <HAL_SPI_TransmitReceive_DMA+0x28>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fa2:	6822      	ldr	r2, [r4, #0]
 8001fa4:	6811      	ldr	r1, [r2, #0]
 8001fa6:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001faa:	d103      	bne.n	8001fb4 <HAL_SPI_TransmitReceive_DMA+0x110>
    __HAL_SPI_ENABLE(hspi);
 8001fac:	6811      	ldr	r1, [r2, #0]
 8001fae:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001fb2:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001fb4:	6821      	ldr	r1, [r4, #0]
 8001fb6:	684a      	ldr	r2, [r1, #4]
 8001fb8:	f042 0220 	orr.w	r2, r2, #32
 8001fbc:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001fbe:	6821      	ldr	r1, [r4, #0]
 8001fc0:	684a      	ldr	r2, [r1, #4]
 8001fc2:	f042 0202 	orr.w	r2, r2, #2
 8001fc6:	604a      	str	r2, [r1, #4]
 8001fc8:	e780      	b.n	8001ecc <HAL_SPI_TransmitReceive_DMA+0x28>
    errorcode = HAL_BUSY;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e77e      	b.n	8001ecc <HAL_SPI_TransmitReceive_DMA+0x28>
    errorcode = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e77c      	b.n	8001ecc <HAL_SPI_TransmitReceive_DMA+0x28>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e77a      	b.n	8001ecc <HAL_SPI_TransmitReceive_DMA+0x28>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e778      	b.n	8001ecc <HAL_SPI_TransmitReceive_DMA+0x28>
  __HAL_LOCK(hspi);
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e779      	b.n	8001ed2 <HAL_SPI_TransmitReceive_DMA+0x2e>
 8001fde:	bf00      	nop
 8001fe0:	080020f9 	.word	0x080020f9
 8001fe4:	08002195 	.word	0x08002195
 8001fe8:	08002105 	.word	0x08002105
 8001fec:	080020ed 	.word	0x080020ed
 8001ff0:	08002127 	.word	0x08002127

08001ff4 <HAL_SPI_Receive_DMA>:
{
 8001ff4:	b538      	push	{r3, r4, r5, lr}
 8001ff6:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001ff8:	6885      	ldr	r5, [r0, #8]
 8001ffa:	b91d      	cbnz	r5, 8002004 <HAL_SPI_Receive_DMA+0x10>
 8001ffc:	6843      	ldr	r3, [r0, #4]
 8001ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002002:	d011      	beq.n	8002028 <HAL_SPI_Receive_DMA+0x34>
  __HAL_LOCK(hspi);
 8002004:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8002008:	2801      	cmp	r0, #1
 800200a:	d064      	beq.n	80020d6 <HAL_SPI_Receive_DMA+0xe2>
 800200c:	2001      	movs	r0, #1
 800200e:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 8002012:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8002016:	b2c0      	uxtb	r0, r0
 8002018:	2801      	cmp	r0, #1
 800201a:	d00e      	beq.n	800203a <HAL_SPI_Receive_DMA+0x46>
    errorcode = HAL_BUSY;
 800201c:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 800201e:	2200      	movs	r2, #0
 8002020:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8002024:	4618      	mov	r0, r3
 8002026:	bd38      	pop	{r3, r4, r5, pc}
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002028:	2304      	movs	r3, #4
 800202a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800202e:	4613      	mov	r3, r2
 8002030:	460a      	mov	r2, r1
 8002032:	f7ff ff37 	bl	8001ea4 <HAL_SPI_TransmitReceive_DMA>
 8002036:	4603      	mov	r3, r0
 8002038:	e7f4      	b.n	8002024 <HAL_SPI_Receive_DMA+0x30>
  if ((pData == NULL) || (Size == 0U))
 800203a:	2900      	cmp	r1, #0
 800203c:	d047      	beq.n	80020ce <HAL_SPI_Receive_DMA+0xda>
 800203e:	2a00      	cmp	r2, #0
 8002040:	d047      	beq.n	80020d2 <HAL_SPI_Receive_DMA+0xde>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002042:	2304      	movs	r3, #4
 8002044:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002048:	2300      	movs	r3, #0
 800204a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800204c:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800204e:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002050:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002052:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002054:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8002056:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002058:	86e3      	strh	r3, [r4, #54]	; 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800205a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800205e:	d01c      	beq.n	800209a <HAL_SPI_Receive_DMA+0xa6>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002060:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002062:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <HAL_SPI_Receive_DMA+0xe8>)
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8002066:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002068:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <HAL_SPI_Receive_DMA+0xec>)
 800206a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800206c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800206e:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <HAL_SPI_Receive_DMA+0xf0>)
 8002070:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8002072:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002074:	2200      	movs	r2, #0
 8002076:	651a      	str	r2, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 8002078:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800207a:	6821      	ldr	r1, [r4, #0]
 800207c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800207e:	310c      	adds	r1, #12
 8002080:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002082:	f7ff f89b 	bl	80011bc <HAL_DMA_Start_IT>
 8002086:	4603      	mov	r3, r0
 8002088:	b168      	cbz	r0, 80020a6 <HAL_SPI_Receive_DMA+0xb2>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800208a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800208c:	f043 0310 	orr.w	r3, r3, #16
 8002090:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8002092:	2301      	movs	r3, #1
 8002094:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 8002098:	e7c1      	b.n	800201e <HAL_SPI_Receive_DMA+0x2a>
    SPI_1LINE_RX(hspi);
 800209a:	6822      	ldr	r2, [r4, #0]
 800209c:	6813      	ldr	r3, [r2, #0]
 800209e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	e7dc      	b.n	8002060 <HAL_SPI_Receive_DMA+0x6c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020a6:	6822      	ldr	r2, [r4, #0]
 80020a8:	6811      	ldr	r1, [r2, #0]
 80020aa:	f011 0f40 	tst.w	r1, #64	; 0x40
 80020ae:	d103      	bne.n	80020b8 <HAL_SPI_Receive_DMA+0xc4>
    __HAL_SPI_ENABLE(hspi);
 80020b0:	6811      	ldr	r1, [r2, #0]
 80020b2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80020b6:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80020b8:	6821      	ldr	r1, [r4, #0]
 80020ba:	684a      	ldr	r2, [r1, #4]
 80020bc:	f042 0220 	orr.w	r2, r2, #32
 80020c0:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80020c2:	6821      	ldr	r1, [r4, #0]
 80020c4:	684a      	ldr	r2, [r1, #4]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	604a      	str	r2, [r1, #4]
 80020cc:	e7a7      	b.n	800201e <HAL_SPI_Receive_DMA+0x2a>
    errorcode = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e7a5      	b.n	800201e <HAL_SPI_Receive_DMA+0x2a>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e7a3      	b.n	800201e <HAL_SPI_Receive_DMA+0x2a>
  __HAL_LOCK(hspi);
 80020d6:	2302      	movs	r3, #2
 80020d8:	e7a4      	b.n	8002024 <HAL_SPI_Receive_DMA+0x30>
 80020da:	bf00      	nop
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	08002127 	.word	0x08002127
 80020e4:	08002105 	.word	0x08002105

080020e8 <HAL_SPI_TxRxCpltCallback>:
}
 80020e8:	4770      	bx	lr

080020ea <HAL_SPI_RxHalfCpltCallback>:
}
 80020ea:	4770      	bx	lr

080020ec <SPI_DMAHalfReceiveCplt>:
{
 80020ec:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 80020ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80020f0:	f7ff fffb 	bl	80020ea <HAL_SPI_RxHalfCpltCallback>
}
 80020f4:	bd08      	pop	{r3, pc}

080020f6 <HAL_SPI_TxRxHalfCpltCallback>:
}
 80020f6:	4770      	bx	lr

080020f8 <SPI_DMAHalfTransmitReceiveCplt>:
{
 80020f8:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80020fa:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80020fc:	f7ff fffb 	bl	80020f6 <HAL_SPI_TxRxHalfCpltCallback>
}
 8002100:	bd08      	pop	{r3, pc}

08002102 <HAL_SPI_ErrorCallback>:
}
 8002102:	4770      	bx	lr

08002104 <SPI_DMAError>:
{
 8002104:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002106:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002108:	6802      	ldr	r2, [r0, #0]
 800210a:	6853      	ldr	r3, [r2, #4]
 800210c:	f023 0303 	bic.w	r3, r3, #3
 8002110:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002112:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002114:	f043 0310 	orr.w	r3, r3, #16
 8002118:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800211a:	2301      	movs	r3, #1
 800211c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8002120:	f7ff ffef 	bl	8002102 <HAL_SPI_ErrorCallback>
}
 8002124:	bd08      	pop	{r3, pc}

08002126 <SPI_DMAReceiveCplt>:
{
 8002126:	b538      	push	{r3, r4, r5, lr}
 8002128:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800212a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 800212c:	f7fe ff18 	bl	8000f60 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002130:	682b      	ldr	r3, [r5, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002138:	d11e      	bne.n	8002178 <SPI_DMAReceiveCplt+0x52>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800213a:	6821      	ldr	r1, [r4, #0]
 800213c:	684b      	ldr	r3, [r1, #4]
 800213e:	f023 0320 	bic.w	r3, r3, #32
 8002142:	604b      	str	r3, [r1, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002144:	68a3      	ldr	r3, [r4, #8]
 8002146:	b91b      	cbnz	r3, 8002150 <SPI_DMAReceiveCplt+0x2a>
 8002148:	6863      	ldr	r3, [r4, #4]
 800214a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800214e:	d017      	beq.n	8002180 <SPI_DMAReceiveCplt+0x5a>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002150:	6822      	ldr	r2, [r4, #0]
 8002152:	6853      	ldr	r3, [r2, #4]
 8002154:	f023 0301 	bic.w	r3, r3, #1
 8002158:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800215a:	4602      	mov	r2, r0
 800215c:	2164      	movs	r1, #100	; 0x64
 800215e:	4620      	mov	r0, r4
 8002160:	f7ff fe12 	bl	8001d88 <SPI_EndRxTransaction>
 8002164:	b108      	cbz	r0, 800216a <SPI_DMAReceiveCplt+0x44>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002166:	2320      	movs	r3, #32
 8002168:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800216e:	2301      	movs	r3, #1
 8002170:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002174:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002176:	b94b      	cbnz	r3, 800218c <SPI_DMAReceiveCplt+0x66>
  HAL_SPI_RxCpltCallback(hspi);
 8002178:	4620      	mov	r0, r4
 800217a:	f7fe fbc9 	bl	8000910 <HAL_SPI_RxCpltCallback>
}
 800217e:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002180:	6822      	ldr	r2, [r4, #0]
 8002182:	6853      	ldr	r3, [r2, #4]
 8002184:	f023 0303 	bic.w	r3, r3, #3
 8002188:	6053      	str	r3, [r2, #4]
 800218a:	e7e6      	b.n	800215a <SPI_DMAReceiveCplt+0x34>
      HAL_SPI_ErrorCallback(hspi);
 800218c:	4620      	mov	r0, r4
 800218e:	f7ff ffb8 	bl	8002102 <HAL_SPI_ErrorCallback>
      return;
 8002192:	e7f4      	b.n	800217e <SPI_DMAReceiveCplt+0x58>

08002194 <SPI_DMATransmitReceiveCplt>:
{
 8002194:	b538      	push	{r3, r4, r5, lr}
 8002196:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002198:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 800219a:	f7fe fee1 	bl	8000f60 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800219e:	682b      	ldr	r3, [r5, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80021a6:	d11b      	bne.n	80021e0 <SPI_DMATransmitReceiveCplt+0x4c>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80021a8:	6822      	ldr	r2, [r4, #0]
 80021aa:	6853      	ldr	r3, [r2, #4]
 80021ac:	f023 0320 	bic.w	r3, r3, #32
 80021b0:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80021b2:	4602      	mov	r2, r0
 80021b4:	2164      	movs	r1, #100	; 0x64
 80021b6:	4620      	mov	r0, r4
 80021b8:	f7ff fdb2 	bl	8001d20 <SPI_EndRxTxTransaction>
 80021bc:	b118      	cbz	r0, 80021c6 <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80021c0:	f043 0320 	orr.w	r3, r3, #32
 80021c4:	6563      	str	r3, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80021c6:	6822      	ldr	r2, [r4, #0]
 80021c8:	6853      	ldr	r3, [r2, #4]
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80021d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80021d6:	2301      	movs	r3, #1
 80021d8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80021de:	b91b      	cbnz	r3, 80021e8 <SPI_DMATransmitReceiveCplt+0x54>
  HAL_SPI_TxRxCpltCallback(hspi);
 80021e0:	4620      	mov	r0, r4
 80021e2:	f7ff ff81 	bl	80020e8 <HAL_SPI_TxRxCpltCallback>
}
 80021e6:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 80021e8:	4620      	mov	r0, r4
 80021ea:	f7ff ff8a 	bl	8002102 <HAL_SPI_ErrorCallback>
      return;
 80021ee:	e7fa      	b.n	80021e6 <SPI_DMATransmitReceiveCplt+0x52>

080021f0 <__libc_init_array>:
 80021f0:	b570      	push	{r4, r5, r6, lr}
 80021f2:	4e0d      	ldr	r6, [pc, #52]	; (8002228 <__libc_init_array+0x38>)
 80021f4:	4c0d      	ldr	r4, [pc, #52]	; (800222c <__libc_init_array+0x3c>)
 80021f6:	1ba4      	subs	r4, r4, r6
 80021f8:	10a4      	asrs	r4, r4, #2
 80021fa:	2500      	movs	r5, #0
 80021fc:	42a5      	cmp	r5, r4
 80021fe:	d109      	bne.n	8002214 <__libc_init_array+0x24>
 8002200:	4e0b      	ldr	r6, [pc, #44]	; (8002230 <__libc_init_array+0x40>)
 8002202:	4c0c      	ldr	r4, [pc, #48]	; (8002234 <__libc_init_array+0x44>)
 8002204:	f000 f82c 	bl	8002260 <_init>
 8002208:	1ba4      	subs	r4, r4, r6
 800220a:	10a4      	asrs	r4, r4, #2
 800220c:	2500      	movs	r5, #0
 800220e:	42a5      	cmp	r5, r4
 8002210:	d105      	bne.n	800221e <__libc_init_array+0x2e>
 8002212:	bd70      	pop	{r4, r5, r6, pc}
 8002214:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002218:	4798      	blx	r3
 800221a:	3501      	adds	r5, #1
 800221c:	e7ee      	b.n	80021fc <__libc_init_array+0xc>
 800221e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002222:	4798      	blx	r3
 8002224:	3501      	adds	r5, #1
 8002226:	e7f2      	b.n	800220e <__libc_init_array+0x1e>
 8002228:	08002298 	.word	0x08002298
 800222c:	08002298 	.word	0x08002298
 8002230:	08002298 	.word	0x08002298
 8002234:	0800229c 	.word	0x0800229c

08002238 <memcpy>:
 8002238:	b510      	push	{r4, lr}
 800223a:	1e43      	subs	r3, r0, #1
 800223c:	440a      	add	r2, r1
 800223e:	4291      	cmp	r1, r2
 8002240:	d100      	bne.n	8002244 <memcpy+0xc>
 8002242:	bd10      	pop	{r4, pc}
 8002244:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002248:	f803 4f01 	strb.w	r4, [r3, #1]!
 800224c:	e7f7      	b.n	800223e <memcpy+0x6>

0800224e <memset>:
 800224e:	4402      	add	r2, r0
 8002250:	4603      	mov	r3, r0
 8002252:	4293      	cmp	r3, r2
 8002254:	d100      	bne.n	8002258 <memset+0xa>
 8002256:	4770      	bx	lr
 8002258:	f803 1b01 	strb.w	r1, [r3], #1
 800225c:	e7f9      	b.n	8002252 <memset+0x4>
	...

08002260 <_init>:
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	bf00      	nop
 8002264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002266:	bc08      	pop	{r3}
 8002268:	469e      	mov	lr, r3
 800226a:	4770      	bx	lr

0800226c <_fini>:
 800226c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226e:	bf00      	nop
 8002270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002272:	bc08      	pop	{r3}
 8002274:	469e      	mov	lr, r3
 8002276:	4770      	bx	lr
