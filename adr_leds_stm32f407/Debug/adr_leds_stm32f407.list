
adr_leds_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002270  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080023f8  080023f8  000123f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002410  08002410  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08002410  08002410  00012410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002418  08002418  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800241c  0800241c  0001241c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000074  08002494  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  200001ec  08002494  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d1b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001909  00000000  00000000  00029dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000035e0  00000000  00000000  0002b6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000640  00000000  00000000  0002eca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000638  00000000  00000000  0002f2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001fe28  00000000  00000000  0002f920  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000633d  00000000  00000000  0004f748  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000c0dc9  00000000  00000000  00055a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0011684e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ff4  00000000  00000000  001168cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080023e0 	.word	0x080023e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	080023e0 	.word	0x080023e0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004cc:	2230      	movs	r2, #48	; 0x30
 80004ce:	2100      	movs	r1, #0
 80004d0:	a808      	add	r0, sp, #32
 80004d2:	f001 ff7d 	bl	80023d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d6:	2400      	movs	r4, #0
 80004d8:	9403      	str	r4, [sp, #12]
 80004da:	9404      	str	r4, [sp, #16]
 80004dc:	9405      	str	r4, [sp, #20]
 80004de:	9406      	str	r4, [sp, #24]
 80004e0:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	9401      	str	r4, [sp, #4]
 80004e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004f2:	641a      	str	r2, [r3, #64]	; 0x40
 80004f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004fe:	9402      	str	r4, [sp, #8]
 8000500:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000504:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000516:	9302      	str	r3, [sp, #8]
 8000518:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800051a:	230a      	movs	r3, #10
 800051c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051e:	2301      	movs	r3, #1
 8000520:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000522:	2210      	movs	r2, #16
 8000524:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000526:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000528:	2502      	movs	r5, #2
 800052a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052c:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800052e:	2308      	movs	r3, #8
 8000530:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000532:	23a8      	movs	r3, #168	; 0xa8
 8000534:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000536:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000538:	2304      	movs	r3, #4
 800053a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053c:	a808      	add	r0, sp, #32
 800053e:	f001 f8a3 	bl	8001688 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000542:	230f      	movs	r3, #15
 8000544:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000546:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000548:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800054a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800054e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000554:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000556:	2105      	movs	r1, #5
 8000558:	a803      	add	r0, sp, #12
 800055a:	f001 fb79 	bl	8001c50 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800055e:	b015      	add	sp, #84	; 0x54
 8000560:	bd30      	pop	{r4, r5, pc}

08000562 <LED_SendData>:
	TIM8->CR1 &= ~TIM_CR1_CEN; 			//Bit 0 CEN: Counter enable
}

void LED_SendData( uint16_t data_len )
{
	if (!((TIM1->CR1 & TIM_CR1_CEN)||(TIM4->CR1 & TIM_CR1_CEN)))
 8000562:	2300      	movs	r3, #0
 8000564:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f013 0f01 	tst.w	r3, #1
 800056e:	f040 80bf 	bne.w	80006f0 <LED_SendData+0x18e>
{
 8000572:	b4f0      	push	{r4, r5, r6, r7}
 8000574:	4606      	mov	r6, r0
	if (!((TIM1->CR1 & TIM_CR1_CEN)||(TIM4->CR1 & TIM_CR1_CEN)))
 8000576:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800057a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f013 0f01 	tst.w	r3, #1
 8000584:	d001      	beq.n	800058a <LED_SendData+0x28>
		TIM8->CCR4 = local.pulse[(0x80 & local.data_buf[7][local.byte_count] << local.bit_count) >> 7]+9;

		TIM1->CR1 |= TIM_CR1_CEN;
		TIM8->CR1 |= TIM_CR1_CEN;
	}
}
 8000586:	bcf0      	pop	{r4, r5, r6, r7}
 8000588:	4770      	bx	lr
		memcpy( local.buff_s.data_buf, add_leds_buff.data_buf, PIXELS_NUM*24);
 800058a:	f240 0490 	movw	r4, #144	; 0x90
 800058e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000592:	f240 0700 	movw	r7, #0
 8000596:	f2c2 0700 	movt	r7, #8192	; 0x2000
 800059a:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800059e:	463d      	mov	r5, r7
 80005a0:	6820      	ldr	r0, [r4, #0]
 80005a2:	6861      	ldr	r1, [r4, #4]
 80005a4:	68a2      	ldr	r2, [r4, #8]
 80005a6:	68e3      	ldr	r3, [r4, #12]
 80005a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005aa:	3410      	adds	r4, #16
 80005ac:	462f      	mov	r7, r5
 80005ae:	4564      	cmp	r4, ip
 80005b0:	d1f5      	bne.n	800059e <LED_SendData+0x3c>
		local.data_buf[0] = (uint8_t *)local.buff_s.led_data.line1;
 80005b2:	f240 0300 	movw	r3, #0
 80005b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005ba:	635b      	str	r3, [r3, #52]	; 0x34
		local.data_buf[1] = (uint8_t *)local.buff_s.led_data.line2;
 80005bc:	1d98      	adds	r0, r3, #6
 80005be:	6398      	str	r0, [r3, #56]	; 0x38
		local.data_buf[2] = (uint8_t *)local.buff_s.led_data.line3;
 80005c0:	f103 020c 	add.w	r2, r3, #12
 80005c4:	63da      	str	r2, [r3, #60]	; 0x3c
		local.data_buf[3] = (uint8_t *)local.buff_s.led_data.line4;
 80005c6:	f103 0212 	add.w	r2, r3, #18
 80005ca:	641a      	str	r2, [r3, #64]	; 0x40
		local.data_buf[4] = (uint8_t *)local.buff_s.led_data.line5;
 80005cc:	f103 0218 	add.w	r2, r3, #24
 80005d0:	645a      	str	r2, [r3, #68]	; 0x44
		local.data_buf[5] = (uint8_t *)local.buff_s.led_data.line6;
 80005d2:	f103 021e 	add.w	r2, r3, #30
 80005d6:	649a      	str	r2, [r3, #72]	; 0x48
		local.data_buf[6] = (uint8_t *)local.buff_s.led_data.line7;
 80005d8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80005dc:	64da      	str	r2, [r3, #76]	; 0x4c
		local.data_buf[7] = (uint8_t *)local.buff_s.led_data.line8;
 80005de:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80005e2:	651a      	str	r2, [r3, #80]	; 0x50
		local.data_len = data_len/8;
 80005e4:	08f6      	lsrs	r6, r6, #3
 80005e6:	f8a3 6054 	strh.w	r6, [r3, #84]	; 0x54
		local.send_start = 1;
 80005ea:	2201      	movs	r2, #1
 80005ec:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		local.mem_buf_rd = 0;
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		local.bit_count = 0;
 80005f6:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		local.byte_count = 0;
 80005fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		local.last_bit = 0;
 80005fe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
		TIM1->CCR1 = local.pulse[(0x80 & local.data_buf[0][local.byte_count] << local.bit_count) >> 7];
 8000602:	781a      	ldrb	r2, [r3, #0]
 8000604:	11d2      	asrs	r2, r2, #7
 8000606:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800060a:	f8b2 2056 	ldrh.w	r2, [r2, #86]	; 0x56
 800060e:	2100      	movs	r1, #0
 8000610:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8000614:	634a      	str	r2, [r1, #52]	; 0x34
		TIM1->CCR2 = local.pulse[(0x80 & local.data_buf[1][local.byte_count] << local.bit_count) >> 7];
 8000616:	799a      	ldrb	r2, [r3, #6]
 8000618:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 800061c:	4082      	lsls	r2, r0
 800061e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8000622:	3228      	adds	r2, #40	; 0x28
 8000624:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000628:	88d2      	ldrh	r2, [r2, #6]
 800062a:	638a      	str	r2, [r1, #56]	; 0x38
		TIM1->CCR3 = local.pulse[(0x80 & local.data_buf[2][local.byte_count] << local.bit_count) >> 7];
 800062c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8000630:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000632:	5c82      	ldrb	r2, [r0, r2]
 8000634:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 8000638:	4082      	lsls	r2, r0
 800063a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800063e:	3228      	adds	r2, #40	; 0x28
 8000640:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000644:	88d2      	ldrh	r2, [r2, #6]
 8000646:	63ca      	str	r2, [r1, #60]	; 0x3c
		TIM1->CCR4 = local.pulse[(0x80 & local.data_buf[3][local.byte_count] << local.bit_count) >> 7];
 8000648:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800064c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800064e:	5c82      	ldrb	r2, [r0, r2]
 8000650:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 8000654:	4082      	lsls	r2, r0
 8000656:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800065a:	3228      	adds	r2, #40	; 0x28
 800065c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000660:	88d2      	ldrh	r2, [r2, #6]
 8000662:	640a      	str	r2, [r1, #64]	; 0x40
		TIM8->CCR1 = local.pulse[(0x80 & local.data_buf[4][local.byte_count] << local.bit_count) >> 7];
 8000664:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8000668:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800066a:	5c82      	ldrb	r2, [r0, r2]
 800066c:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 8000670:	4082      	lsls	r2, r0
 8000672:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8000676:	3228      	adds	r2, #40	; 0x28
 8000678:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800067c:	88d2      	ldrh	r2, [r2, #6]
 800067e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000682:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000686:	6342      	str	r2, [r0, #52]	; 0x34
		TIM8->CCR2 = local.pulse[(0x80 & local.data_buf[5][local.byte_count] << local.bit_count) >> 7];
 8000688:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800068c:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800068e:	5ca2      	ldrb	r2, [r4, r2]
 8000690:	f893 405a 	ldrb.w	r4, [r3, #90]	; 0x5a
 8000694:	40a2      	lsls	r2, r4
 8000696:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800069a:	3228      	adds	r2, #40	; 0x28
 800069c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80006a0:	88d2      	ldrh	r2, [r2, #6]
 80006a2:	6382      	str	r2, [r0, #56]	; 0x38
		TIM8->CCR3 = local.pulse[(0x80 & local.data_buf[6][local.byte_count] << local.bit_count) >> 7];
 80006a4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80006a8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80006aa:	5ca2      	ldrb	r2, [r4, r2]
 80006ac:	f893 405a 	ldrb.w	r4, [r3, #90]	; 0x5a
 80006b0:	40a2      	lsls	r2, r4
 80006b2:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80006b6:	3228      	adds	r2, #40	; 0x28
 80006b8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80006bc:	88d2      	ldrh	r2, [r2, #6]
 80006be:	63c2      	str	r2, [r0, #60]	; 0x3c
		TIM8->CCR4 = local.pulse[(0x80 & local.data_buf[7][local.byte_count] << local.bit_count) >> 7]+9;
 80006c0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80006c4:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 80006c6:	5ca2      	ldrb	r2, [r4, r2]
 80006c8:	f893 405a 	ldrb.w	r4, [r3, #90]	; 0x5a
 80006cc:	40a2      	lsls	r2, r4
 80006ce:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80006d2:	3228      	adds	r2, #40	; 0x28
 80006d4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80006d8:	88db      	ldrh	r3, [r3, #6]
 80006da:	3309      	adds	r3, #9
 80006dc:	6403      	str	r3, [r0, #64]	; 0x40
		TIM1->CR1 |= TIM_CR1_CEN;
 80006de:	680b      	ldr	r3, [r1, #0]
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	600b      	str	r3, [r1, #0]
		TIM8->CR1 |= TIM_CR1_CEN;
 80006e6:	6803      	ldr	r3, [r0, #0]
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6003      	str	r3, [r0, #0]
}
 80006ee:	e74a      	b.n	8000586 <LED_SendData+0x24>
 80006f0:	4770      	bx	lr

080006f2 <TIM1_UPD_Servo_Set>:

	local.send_start = 0;
}
void TIM1_UPD_Servo_Set( void )
{
	if(local.bit_count++ > 6)
 80006f2:	f240 0300 	movw	r3, #0
 80006f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006fa:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 80006fe:	2b06      	cmp	r3, #6
 8000700:	f200 8091 	bhi.w	8000826 <TIM1_UPD_Servo_Set+0x134>
 8000704:	f240 0200 	movw	r2, #0
 8000708:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800070c:	3301      	adds	r3, #1
 800070e:	f882 305a 	strb.w	r3, [r2, #90]	; 0x5a
	{
		local.bit_count = 0;
		local.byte_count++;
	}
	TIM1->CCR1 = local.pulse[(0x80 & local.data_buf[0][local.byte_count] << local.bit_count) >> 7];
 8000712:	f240 0300 	movw	r3, #0
 8000716:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800071a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800071e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000720:	5c8a      	ldrb	r2, [r1, r2]
 8000722:	f893 105a 	ldrb.w	r1, [r3, #90]	; 0x5a
 8000726:	408a      	lsls	r2, r1
 8000728:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800072c:	3228      	adds	r2, #40	; 0x28
 800072e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000732:	88d2      	ldrh	r2, [r2, #6]
 8000734:	2100      	movs	r1, #0
 8000736:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800073a:	634a      	str	r2, [r1, #52]	; 0x34
	TIM1->CCR2 = local.pulse[(0x80 & local.data_buf[1][local.byte_count] << local.bit_count) >> 7];
 800073c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8000740:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000742:	5c82      	ldrb	r2, [r0, r2]
 8000744:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 8000748:	4082      	lsls	r2, r0
 800074a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800074e:	3228      	adds	r2, #40	; 0x28
 8000750:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000754:	88d2      	ldrh	r2, [r2, #6]
 8000756:	638a      	str	r2, [r1, #56]	; 0x38
	TIM1->CCR3 = local.pulse[(0x80 & local.data_buf[2][local.byte_count] << local.bit_count) >> 7];
 8000758:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800075c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800075e:	5c82      	ldrb	r2, [r0, r2]
 8000760:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 8000764:	4082      	lsls	r2, r0
 8000766:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800076a:	3228      	adds	r2, #40	; 0x28
 800076c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000770:	88d2      	ldrh	r2, [r2, #6]
 8000772:	63ca      	str	r2, [r1, #60]	; 0x3c
	TIM1->CCR4 = local.pulse[(0x80 & local.data_buf[3][local.byte_count] << local.bit_count) >> 7];
 8000774:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8000778:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800077a:	5c82      	ldrb	r2, [r0, r2]
 800077c:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 8000780:	4082      	lsls	r2, r0
 8000782:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8000786:	3228      	adds	r2, #40	; 0x28
 8000788:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800078c:	88d2      	ldrh	r2, [r2, #6]
 800078e:	640a      	str	r2, [r1, #64]	; 0x40

	TIM8->CCR1 = local.pulse[(0x80 & local.data_buf[4][local.byte_count] << local.bit_count) >> 7];
 8000790:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8000794:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000796:	5c8a      	ldrb	r2, [r1, r2]
 8000798:	f893 105a 	ldrb.w	r1, [r3, #90]	; 0x5a
 800079c:	408a      	lsls	r2, r1
 800079e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80007a2:	3228      	adds	r2, #40	; 0x28
 80007a4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80007a8:	88d2      	ldrh	r2, [r2, #6]
 80007aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ae:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80007b2:	634a      	str	r2, [r1, #52]	; 0x34
	TIM8->CCR2 = local.pulse[(0x80 & local.data_buf[5][local.byte_count] << local.bit_count) >> 7];
 80007b4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80007b8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80007ba:	5c82      	ldrb	r2, [r0, r2]
 80007bc:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 80007c0:	4082      	lsls	r2, r0
 80007c2:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80007c6:	3228      	adds	r2, #40	; 0x28
 80007c8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80007cc:	88d2      	ldrh	r2, [r2, #6]
 80007ce:	638a      	str	r2, [r1, #56]	; 0x38
	TIM8->CCR3 = local.pulse[(0x80 & local.data_buf[6][local.byte_count] << local.bit_count) >> 7];
 80007d0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80007d4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80007d6:	5c82      	ldrb	r2, [r0, r2]
 80007d8:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 80007dc:	4082      	lsls	r2, r0
 80007de:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80007e2:	3228      	adds	r2, #40	; 0x28
 80007e4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80007e8:	88d2      	ldrh	r2, [r2, #6]
 80007ea:	63ca      	str	r2, [r1, #60]	; 0x3c
	TIM8->CCR4 = local.pulse[(0x80 & local.data_buf[7][local.byte_count] << local.bit_count) >> 7]+9;
 80007ec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80007f0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80007f2:	5c82      	ldrb	r2, [r0, r2]
 80007f4:	f893 005a 	ldrb.w	r0, [r3, #90]	; 0x5a
 80007f8:	4082      	lsls	r2, r0
 80007fa:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80007fe:	3228      	adds	r2, #40	; 0x28
 8000800:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000804:	88d2      	ldrh	r2, [r2, #6]
 8000806:	3209      	adds	r2, #9
 8000808:	640a      	str	r2, [r1, #64]	; 0x40

	( local.byte_count == local.data_len )?( TIM_SendEnd() ):( TIM1->CR1 |= TIM_CR1_CEN );
 800080a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800080e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000812:	429a      	cmp	r2, r3
 8000814:	d014      	beq.n	8000840 <TIM1_UPD_Servo_Set+0x14e>
 8000816:	2300      	movs	r3, #0
 8000818:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	f042 0201 	orr.w	r2, r2, #1
 8000822:	601a      	str	r2, [r3, #0]
}
 8000824:	4770      	bx	lr
		local.bit_count = 0;
 8000826:	f240 0300 	movw	r3, #0
 800082a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800082e:	2200      	movs	r2, #0
 8000830:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
		local.byte_count++;
 8000834:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8000838:	3201      	adds	r2, #1
 800083a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800083e:	e768      	b.n	8000712 <TIM1_UPD_Servo_Set+0x20>
	TIM1->CR1 &= ~TIM_CR1_CEN;
 8000840:	2300      	movs	r3, #0
 8000842:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	f022 0201 	bic.w	r2, r2, #1
 800084c:	601a      	str	r2, [r3, #0]
	TIM8->CR1 &= ~TIM_CR1_CEN;
 800084e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000852:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	f022 0201 	bic.w	r2, r2, #1
 800085c:	601a      	str	r2, [r3, #0]
	local.send_start = 0;
 800085e:	f240 0300 	movw	r3, #0
 8000862:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800086c:	4770      	bx	lr

0800086e <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback( SPI_HandleTypeDef *hspi )
{
	if (hspi == &hspi1)
 800086e:	f240 03d0 	movw	r3, #208	; 0xd0
 8000872:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000876:	4283      	cmp	r3, r0
 8000878:	d000      	beq.n	800087c <HAL_SPI_RxCpltCallback+0xe>
	{
//		HAL_SPI_Receive_DMA(&hspi1,add_leds_buff.data_buf, PIXELS_NUM*24);
		local.mem_buf_rd = 1;
	}
}
 800087a:	4770      	bx	lr
		local.mem_buf_rd = 1;
 800087c:	f240 0300 	movw	r3, #0
 8000880:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000884:	2201      	movs	r2, #1
 8000886:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 800088a:	e7f6      	b.n	800087a <HAL_SPI_RxCpltCallback+0xc>

0800088c <Delay>:
void Delay( uint16_t ms )
{
	uint16_t tmp_ms = ms;
	while(tmp_ms--)
 800088c:	b1a0      	cbz	r0, 80008b8 <Delay+0x2c>
{
 800088e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000890:	1e44      	subs	r4, r0, #1
 8000892:	b2a4      	uxth	r4, r4
	{
		HAL_Delay(1);
 8000894:	2701      	movs	r7, #1
		HAL_IWDG_Refresh(&hiwdg);
 8000896:	f240 05c4 	movw	r5, #196	; 0xc4
 800089a:	f2c2 0500 	movt	r5, #8192	; 0x2000
	while(tmp_ms--)
 800089e:	f64f 76ff 	movw	r6, #65535	; 0xffff
		HAL_Delay(1);
 80008a2:	4638      	mov	r0, r7
 80008a4:	f000 fb55 	bl	8000f52 <HAL_Delay>
		HAL_IWDG_Refresh(&hiwdg);
 80008a8:	4628      	mov	r0, r5
 80008aa:	f000 fee7 	bl	800167c <HAL_IWDG_Refresh>
	while(tmp_ms--)
 80008ae:	3c01      	subs	r4, #1
 80008b0:	b2a4      	uxth	r4, r4
 80008b2:	42b4      	cmp	r4, r6
 80008b4:	d1f5      	bne.n	80008a2 <Delay+0x16>
	}
}
 80008b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008b8:	4770      	bx	lr

080008ba <main>:
{
 80008ba:	b500      	push	{lr}
 80008bc:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80008be:	f000 fb1a 	bl	8000ef6 <HAL_Init>
  SystemClock_Config();
 80008c2:	f7ff fe01 	bl	80004c8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	2400      	movs	r4, #0
 80008c8:	9404      	str	r4, [sp, #16]
 80008ca:	9405      	str	r4, [sp, #20]
 80008cc:	9406      	str	r4, [sp, #24]
 80008ce:	9407      	str	r4, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d0:	9400      	str	r4, [sp, #0]
 80008d2:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 80008d6:	f2c4 0502 	movt	r5, #16386	; 0x4002
 80008da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	632b      	str	r3, [r5, #48]	; 0x30
 80008e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80008e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	9401      	str	r4, [sp, #4]
 80008ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	632b      	str	r3, [r5, #48]	; 0x30
 80008f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	9301      	str	r3, [sp, #4]
 80008fe:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000900:	9402      	str	r4, [sp, #8]
 8000902:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	632b      	str	r3, [r5, #48]	; 0x30
 800090a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800090c:	f003 0302 	and.w	r3, r3, #2
 8000910:	9302      	str	r3, [sp, #8]
 8000912:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000914:	a908      	add	r1, sp, #32
 8000916:	2301      	movs	r3, #1
 8000918:	f841 3d14 	str.w	r3, [r1, #-20]!
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	4620      	mov	r0, r4
 800091e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000922:	f000 fd7b 	bl	800141c <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000926:	9403      	str	r4, [sp, #12]
 8000928:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800092a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800092e:	632b      	str	r3, [r5, #48]	; 0x30
 8000930:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000936:	9303      	str	r3, [sp, #12]
 8000938:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800093a:	4622      	mov	r2, r4
 800093c:	4621      	mov	r1, r4
 800093e:	2038      	movs	r0, #56	; 0x38
 8000940:	f000 fb2e 	bl	8000fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000944:	2038      	movs	r0, #56	; 0x38
 8000946:	f000 fb60 	bl	800100a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800094a:	4622      	mov	r2, r4
 800094c:	4621      	mov	r1, r4
 800094e:	203b      	movs	r0, #59	; 0x3b
 8000950:	f000 fb26 	bl	8000fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000954:	203b      	movs	r0, #59	; 0x3b
 8000956:	f000 fb58 	bl	800100a <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 800095a:	f240 06d0 	movw	r6, #208	; 0xd0
 800095e:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8000962:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000966:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800096a:	6033      	str	r3, [r6, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800096c:	6074      	str	r4, [r6, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800096e:	60b4      	str	r4, [r6, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000970:	60f4      	str	r4, [r6, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000972:	6134      	str	r4, [r6, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000974:	6174      	str	r4, [r6, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800097a:	61b3      	str	r3, [r6, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097c:	6234      	str	r4, [r6, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800097e:	6274      	str	r4, [r6, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000980:	62b4      	str	r4, [r6, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000982:	230a      	movs	r3, #10
 8000984:	62f3      	str	r3, [r6, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000986:	4630      	mov	r0, r6
 8000988:	f001 fb0d 	bl	8001fa6 <HAL_SPI_Init>
  hiwdg.Instance = IWDG;
 800098c:	f240 00c4 	movw	r0, #196	; 0xc4
 8000990:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000994:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000998:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800099c:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800099e:	6044      	str	r4, [r0, #4]
  hiwdg.Init.Reload = 400;
 80009a0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80009a4:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80009a6:	f000 fe44 	bl	8001632 <HAL_IWDG_Init>
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80009aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80009ac:	f043 0310 	orr.w	r3, r3, #16
 80009b0:	632b      	str	r3, [r5, #48]	; 0x30
	GPIOE->AFR[1] |=  (1 << GPIO_AFRH_AFSEL9_Pos)
 80009b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009ba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80009bc:	f241 0210 	movw	r2, #4112	; 0x1010
 80009c0:	f2c0 1210 	movt	r2, #272	; 0x110
 80009c4:	430a      	orrs	r2, r1
 80009c6:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOE->MODER |= GPIO_MODER_MODER9_1
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	f042 5222 	orr.w	r2, r2, #679477248	; 0x28800000
 80009ce:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80009d2:	601a      	str	r2, [r3, #0]
	GPIOE->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_0 | GPIO_OSPEEDER_OSPEEDR9_1
 80009d4:	689a      	ldr	r2, [r3, #8]
 80009d6:	f042 5273 	orr.w	r2, r2, #1019215872	; 0x3cc00000
 80009da:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 80009de:	609a      	str	r2, [r3, #8]
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80009e0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	646b      	str	r3, [r5, #68]	; 0x44
	TIM1->CR1 |= TIM_CR1_ARPE;
 80009e8:	4623      	mov	r3, r4
 80009ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009f4:	601a      	str	r2, [r3, #0]
	TIM1->PSC = 0;
 80009f6:	629c      	str	r4, [r3, #40]	; 0x28
	TIM1->ARR = PERIOD_SYG;
 80009f8:	f44f 7082 	mov.w	r0, #260	; 0x104
 80009fc:	62d8      	str	r0, [r3, #44]	; 0x2c
	TIM1->CCER |= TIM_CCER_CC1E;   	// Capture/Compare 1 output enable
 80009fe:	6a1a      	ldr	r2, [r3, #32]
 8000a00:	f042 0201 	orr.w	r2, r2, #1
 8000a04:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC1P;
 8000a06:	6a1a      	ldr	r2, [r3, #32]
 8000a08:	f042 0202 	orr.w	r2, r2, #2
 8000a0c:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC2E;   	// Capture/Compare 2 output enable
 8000a0e:	6a1a      	ldr	r2, [r3, #32]
 8000a10:	f042 0210 	orr.w	r2, r2, #16
 8000a14:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC2P;
 8000a16:	6a1a      	ldr	r2, [r3, #32]
 8000a18:	f042 0220 	orr.w	r2, r2, #32
 8000a1c:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC3E;   	// Capture/Compare 2 output enable
 8000a1e:	6a1a      	ldr	r2, [r3, #32]
 8000a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a24:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC3P;
 8000a26:	6a1a      	ldr	r2, [r3, #32]
 8000a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a2c:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC4E;   	// Capture/Compare 2 output enable
 8000a2e:	6a1a      	ldr	r2, [r3, #32]
 8000a30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a34:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC4P;
 8000a36:	6a1a      	ldr	r2, [r3, #32]
 8000a38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000a3c:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 |= TIM_CCMR1_OC1PE;
 8000a3e:	699a      	ldr	r2, [r3, #24]
 8000a40:	f042 0208 	orr.w	r2, r2, #8
 8000a44:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8000a46:	699a      	ldr	r2, [r3, #24]
 8000a48:	f022 0210 	bic.w	r2, r2, #16
 8000a4c:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC1M_1;
 8000a4e:	699a      	ldr	r2, [r3, #24]
 8000a50:	f042 0220 	orr.w	r2, r2, #32
 8000a54:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC1M_2; 	//110: PWM mode 1
 8000a56:	699a      	ldr	r2, [r3, #24]
 8000a58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a5c:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC2PE;
 8000a5e:	699a      	ldr	r2, [r3, #24]
 8000a60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a64:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 &= ~TIM_CCMR1_OC2M_0;
 8000a66:	699a      	ldr	r2, [r3, #24]
 8000a68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a6c:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC2M_1;
 8000a6e:	699a      	ldr	r2, [r3, #24]
 8000a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000a74:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC2M_2; 	//110: PWM mode 1
 8000a76:	699a      	ldr	r2, [r3, #24]
 8000a78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a7c:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 |= TIM_CCMR2_OC3PE;
 8000a7e:	69da      	ldr	r2, [r3, #28]
 8000a80:	f042 0208 	orr.w	r2, r2, #8
 8000a84:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 &= ~TIM_CCMR2_OC3M_0;
 8000a86:	69da      	ldr	r2, [r3, #28]
 8000a88:	f022 0210 	bic.w	r2, r2, #16
 8000a8c:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC3M_1;
 8000a8e:	69da      	ldr	r2, [r3, #28]
 8000a90:	f042 0220 	orr.w	r2, r2, #32
 8000a94:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC3M_2; 	//110: PWM mode 1
 8000a96:	69da      	ldr	r2, [r3, #28]
 8000a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a9c:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC4PE;
 8000a9e:	69da      	ldr	r2, [r3, #28]
 8000aa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000aa4:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 &= ~TIM_CCMR2_OC4M_0;
 8000aa6:	69da      	ldr	r2, [r3, #28]
 8000aa8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000aac:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC4M_1;
 8000aae:	69da      	ldr	r2, [r3, #28]
 8000ab0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ab4:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC4M_2; 	//110: PWM mode 1
 8000ab6:	69da      	ldr	r2, [r3, #28]
 8000ab8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000abc:	61da      	str	r2, [r3, #28]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000abe:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000ac2:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000ac6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000aca:	6011      	str	r1, [r2, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	2110      	movs	r1, #16
 8000ace:	f882 1319 	strb.w	r1, [r2, #793]	; 0x319
	TIM1->DIER |= TIM_DIER_UIE;
 8000ad2:	68da      	ldr	r2, [r3, #12]
 8000ad4:	f042 0201 	orr.w	r2, r2, #1
 8000ad8:	60da      	str	r2, [r3, #12]
	TIM1->BDTR|= TIM_BDTR_OSSR;
 8000ada:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ae0:	645a      	str	r2, [r3, #68]	; 0x44
	TIM1->BDTR|= TIM_BDTR_MOE;     		//MOE: Main output enable
 8000ae2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ae4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ae8:	645a      	str	r2, [r3, #68]	; 0x44
	TIM1->CR1 &= ~TIM_CR1_CEN; 			//Bit 0 CEN: Counter enable
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	f022 0201 	bic.w	r2, r2, #1
 8000af0:	601a      	str	r2, [r3, #0]
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000af2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	632b      	str	r3, [r5, #48]	; 0x30
	GPIOC->AFR[0] |=  (3 << GPIO_AFRL_AFSEL6_Pos)
 8000afa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000afe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b02:	6a1a      	ldr	r2, [r3, #32]
 8000b04:	f042 524c 	orr.w	r2, r2, #855638016	; 0x33000000
 8000b08:	621a      	str	r2, [r3, #32]
	GPIOC->AFR[1] |=  (3 << GPIO_AFRH_AFSEL8_Pos)
 8000b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b0c:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->MODER |= GPIO_MODER_MODER6_1
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	f442 222a 	orr.w	r2, r2, #696320	; 0xaa000
 8000b18:	601a      	str	r2, [r3, #0]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_0 | GPIO_OSPEEDER_OSPEEDR6_1
 8000b1a:	689a      	ldr	r2, [r3, #8]
 8000b1c:	f442 227f 	orr.w	r2, r2, #1044480	; 0xff000
 8000b20:	609a      	str	r2, [r3, #8]
	RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 8000b22:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	646b      	str	r3, [r5, #68]	; 0x44
	TIM8->CR1 |= TIM_CR1_ARPE;
 8000b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b38:	601a      	str	r2, [r3, #0]
	TIM8->PSC = 0;
 8000b3a:	629c      	str	r4, [r3, #40]	; 0x28
	TIM8->ARR = PERIOD_SYG;
 8000b3c:	62d8      	str	r0, [r3, #44]	; 0x2c
	TIM8->CCER |= TIM_CCER_CC1E;   	// Capture/Compare 1 output enable
 8000b3e:	6a1a      	ldr	r2, [r3, #32]
 8000b40:	f042 0201 	orr.w	r2, r2, #1
 8000b44:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC1P;
 8000b46:	6a1a      	ldr	r2, [r3, #32]
 8000b48:	f042 0202 	orr.w	r2, r2, #2
 8000b4c:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC2E;   	// Capture/Compare 2 output enable
 8000b4e:	6a1a      	ldr	r2, [r3, #32]
 8000b50:	430a      	orrs	r2, r1
 8000b52:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC2P;
 8000b54:	6a1a      	ldr	r2, [r3, #32]
 8000b56:	f042 0220 	orr.w	r2, r2, #32
 8000b5a:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC3E;   	// Capture/Compare 2 output enable
 8000b5c:	6a1a      	ldr	r2, [r3, #32]
 8000b5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b62:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC3P;
 8000b64:	6a1a      	ldr	r2, [r3, #32]
 8000b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b6a:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC4E;   	// Capture/Compare 2 output enable
 8000b6c:	6a1a      	ldr	r2, [r3, #32]
 8000b6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000b72:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC4P;
 8000b74:	6a1a      	ldr	r2, [r3, #32]
 8000b76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b7a:	621a      	str	r2, [r3, #32]
	TIM8->CCMR1 |= TIM_CCMR1_OC1PE;
 8000b7c:	699a      	ldr	r2, [r3, #24]
 8000b7e:	f042 0208 	orr.w	r2, r2, #8
 8000b82:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8000b84:	699a      	ldr	r2, [r3, #24]
 8000b86:	f022 0210 	bic.w	r2, r2, #16
 8000b8a:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC1M_1;
 8000b8c:	699a      	ldr	r2, [r3, #24]
 8000b8e:	f042 0220 	orr.w	r2, r2, #32
 8000b92:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC1M_2; 	//110: PWM mode 1
 8000b94:	699a      	ldr	r2, [r3, #24]
 8000b96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b9a:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC2PE;
 8000b9c:	699a      	ldr	r2, [r3, #24]
 8000b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ba2:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 &= ~TIM_CCMR1_OC2M_0;
 8000ba4:	699a      	ldr	r2, [r3, #24]
 8000ba6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000baa:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC2M_1;
 8000bac:	699a      	ldr	r2, [r3, #24]
 8000bae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000bb2:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC2M_2; 	//110: PWM mode 1
 8000bb4:	699a      	ldr	r2, [r3, #24]
 8000bb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bba:	619a      	str	r2, [r3, #24]
	TIM8->CCMR2 |= TIM_CCMR2_OC3PE;
 8000bbc:	69da      	ldr	r2, [r3, #28]
 8000bbe:	f042 0208 	orr.w	r2, r2, #8
 8000bc2:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 &= ~TIM_CCMR2_OC3M_0;
 8000bc4:	69da      	ldr	r2, [r3, #28]
 8000bc6:	f022 0210 	bic.w	r2, r2, #16
 8000bca:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC3M_1;
 8000bcc:	69da      	ldr	r2, [r3, #28]
 8000bce:	f042 0220 	orr.w	r2, r2, #32
 8000bd2:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC3M_2; 	//110: PWM mode 1
 8000bd4:	69da      	ldr	r2, [r3, #28]
 8000bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bda:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC4PE;
 8000bdc:	69da      	ldr	r2, [r3, #28]
 8000bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000be2:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 &= ~TIM_CCMR2_OC4M_0;
 8000be4:	69da      	ldr	r2, [r3, #28]
 8000be6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000bea:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC4M_1;
 8000bec:	69da      	ldr	r2, [r3, #28]
 8000bee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000bf2:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC4M_2; 	//110: PWM mode 1
 8000bf4:	69da      	ldr	r2, [r3, #28]
 8000bf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bfa:	61da      	str	r2, [r3, #28]
	TIM8->BDTR|= TIM_BDTR_MOE;     		//MOE: Main output enable
 8000bfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c02:	645a      	str	r2, [r3, #68]	; 0x44
	TIM8->CR1 &= ~TIM_CR1_CEN; 			//Bit 0 CEN: Counter enable
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	f022 0201 	bic.w	r2, r2, #1
 8000c0a:	601a      	str	r2, [r3, #0]
  memset( add_leds_buff.data_buf, 0x10, PIXELS_NUM*24 );
 8000c0c:	f240 0490 	movw	r4, #144	; 0x90
 8000c10:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000c14:	2230      	movs	r2, #48	; 0x30
 8000c16:	4620      	mov	r0, r4
 8000c18:	f001 fbda 	bl	80023d0 <memset>
  HAL_SPI_Receive_DMA(&hspi1, add_leds_buff.data_buf, PIXELS_NUM*24);
 8000c1c:	2230      	movs	r2, #48	; 0x30
 8000c1e:	4621      	mov	r1, r4
 8000c20:	4630      	mov	r0, r6
 8000c22:	f001 fab0 	bl	8002186 <HAL_SPI_Receive_DMA>
		HAL_IWDG_Refresh(&hiwdg);
 8000c26:	f240 05c4 	movw	r5, #196	; 0xc4
 8000c2a:	f2c2 0500 	movt	r5, #8192	; 0x2000
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000c2e:	2600      	movs	r6, #0
 8000c30:	f2c4 0602 	movt	r6, #16386	; 0x4002
		if(local.mem_buf_rd)
 8000c34:	f240 0400 	movw	r4, #0
 8000c38:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000c3c:	e002      	b.n	8000c44 <main+0x38a>
 8000c3e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8000c42:	b97b      	cbnz	r3, 8000c64 <main+0x3aa>
		HAL_IWDG_Refresh(&hiwdg);
 8000c44:	4628      	mov	r0, r5
 8000c46:	f000 fd19 	bl	800167c <HAL_IWDG_Refresh>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	4630      	mov	r0, r6
 8000c4e:	f000 fcea 	bl	8001626 <HAL_GPIO_ReadPin>
 8000c52:	2800      	cmp	r0, #0
 8000c54:	d0f3      	beq.n	8000c3e <main+0x384>
			LED_SendData(PIXELS_NUM*24);
 8000c56:	2030      	movs	r0, #48	; 0x30
 8000c58:	f7ff fc83 	bl	8000562 <LED_SendData>
			Delay(50);
 8000c5c:	2032      	movs	r0, #50	; 0x32
 8000c5e:	f7ff fe15 	bl	800088c <Delay>
 8000c62:	e7ec      	b.n	8000c3e <main+0x384>
			Delay(2);
 8000c64:	2002      	movs	r0, #2
 8000c66:	f7ff fe11 	bl	800088c <Delay>
			LED_SendData(PIXELS_NUM*24);
 8000c6a:	2030      	movs	r0, #48	; 0x30
 8000c6c:	f7ff fc79 	bl	8000562 <LED_SendData>
 8000c70:	e7e8      	b.n	8000c44 <main+0x38a>

08000c72 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c72:	4770      	bx	lr

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	2100      	movs	r1, #0
 8000c78:	9100      	str	r1, [sp, #0]
 8000c7a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c88:	645a      	str	r2, [r3, #68]	; 0x44
 8000c8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c8c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000c90:	9200      	str	r2, [sp, #0]
 8000c92:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c94:	9101      	str	r1, [sp, #4]
 8000c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	9301      	str	r3, [sp, #4]
 8000ca6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca8:	b002      	add	sp, #8
 8000caa:	4770      	bx	lr

08000cac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cac:	b530      	push	{r4, r5, lr}
 8000cae:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	9303      	str	r3, [sp, #12]
 8000cb4:	9304      	str	r3, [sp, #16]
 8000cb6:	9305      	str	r3, [sp, #20]
 8000cb8:	9306      	str	r3, [sp, #24]
 8000cba:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8000cbc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cc0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000cc4:	6802      	ldr	r2, [r0, #0]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d001      	beq.n	8000cce <HAL_SPI_MspInit+0x22>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cca:	b009      	add	sp, #36	; 0x24
 8000ccc:	bd30      	pop	{r4, r5, pc}
 8000cce:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cd0:	2500      	movs	r5, #0
 8000cd2:	9501      	str	r5, [sp, #4]
 8000cd4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ce2:	645a      	str	r2, [r3, #68]	; 0x44
 8000ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ce6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000cea:	9201      	str	r2, [sp, #4]
 8000cec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	9502      	str	r5, [sp, #8]
 8000cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cf2:	f042 0202 	orr.w	r2, r2, #2
 8000cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d02:	2338      	movs	r3, #56	; 0x38
 8000d04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d0e:	2305      	movs	r3, #5
 8000d10:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d12:	a903      	add	r1, sp, #12
 8000d14:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d18:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000d1c:	f000 fb7e 	bl	800141c <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000d20:	f240 1028 	movw	r0, #296	; 0x128
 8000d24:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000d28:	f246 4310 	movw	r3, #25616	; 0x6410
 8000d2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d30:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000d32:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000d36:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d38:	6085      	str	r5, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d3a:	60c5      	str	r5, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d40:	6103      	str	r3, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d42:	6145      	str	r5, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d44:	6185      	str	r5, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4a:	61c3      	str	r3, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d4c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000d50:	6203      	str	r3, [r0, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d52:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000d54:	f000 f999 	bl	800108a <HAL_DMA_Init>
 8000d58:	bb38      	cbnz	r0, 8000daa <HAL_SPI_MspInit+0xfe>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000d5a:	f240 1328 	movw	r3, #296	; 0x128
 8000d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d62:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000d64:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000d66:	f240 1088 	movw	r0, #392	; 0x188
 8000d6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000d6e:	f246 4358 	movw	r3, #25688	; 0x6458
 8000d72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d76:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000d78:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000d7c:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d7e:	2340      	movs	r3, #64	; 0x40
 8000d80:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d8a:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d8c:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d8e:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000d90:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d92:	6203      	str	r3, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d94:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000d96:	f000 f978 	bl	800108a <HAL_DMA_Init>
 8000d9a:	b948      	cbnz	r0, 8000db0 <HAL_SPI_MspInit+0x104>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000d9c:	f240 1388 	movw	r3, #392	; 0x188
 8000da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000da4:	64a3      	str	r3, [r4, #72]	; 0x48
 8000da6:	639c      	str	r4, [r3, #56]	; 0x38
}
 8000da8:	e78f      	b.n	8000cca <HAL_SPI_MspInit+0x1e>
      Error_Handler();
 8000daa:	f7ff ff62 	bl	8000c72 <Error_Handler>
 8000dae:	e7d4      	b.n	8000d5a <HAL_SPI_MspInit+0xae>
      Error_Handler();
 8000db0:	f7ff ff5f 	bl	8000c72 <Error_Handler>
 8000db4:	e7f2      	b.n	8000d9c <HAL_SPI_MspInit+0xf0>

08000db6 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000db6:	4770      	bx	lr

08000db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db8:	e7fe      	b.n	8000db8 <HardFault_Handler>

08000dba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dba:	e7fe      	b.n	8000dba <MemManage_Handler>

08000dbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbc:	e7fe      	b.n	8000dbc <BusFault_Handler>

08000dbe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dbe:	e7fe      	b.n	8000dbe <UsageFault_Handler>

08000dc0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc0:	4770      	bx	lr

08000dc2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc2:	4770      	bx	lr

08000dc4 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc4:	4770      	bx	lr

08000dc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc8:	f000 f8b0 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dcc:	bd08      	pop	{r3, pc}

08000dce <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000dce:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000dd0:	f240 1028 	movw	r0, #296	; 0x128
 8000dd4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000dd8:	f000 fa30 	bl	800123c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ddc:	bd08      	pop	{r3, pc}

08000dde <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000dde:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000de0:	f240 1088 	movw	r0, #392	; 0x188
 8000de4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000de8:	f000 fa28 	bl	800123c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000dec:	bd08      	pop	{r3, pc}

08000dee <TIM1_UP_TIM10_IRQHandler>:

/* USER CODE BEGIN 1 */
void TIM1_UP_TIM10_IRQHandler( void )
{
 8000dee:	b508      	push	{r3, lr}
	if (TIM1->SR & TIM_SR_UIF)
 8000df0:	2300      	movs	r3, #0
 8000df2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	f013 0f01 	tst.w	r3, #1
 8000dfc:	d100      	bne.n	8000e00 <TIM1_UP_TIM10_IRQHandler+0x12>
	{
		TIM1->SR &= ~TIM_SR_UIF;
		TIM1_UPD_Servo_Set();
	}
}
 8000dfe:	bd08      	pop	{r3, pc}
		TIM1->SR &= ~TIM_SR_UIF;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e06:	691a      	ldr	r2, [r3, #16]
 8000e08:	f022 0201 	bic.w	r2, r2, #1
 8000e0c:	611a      	str	r2, [r3, #16]
		TIM1_UPD_Servo_Set();
 8000e0e:	f7ff fc70 	bl	80006f2 <TIM1_UPD_Servo_Set>
}
 8000e12:	e7f4      	b.n	8000dfe <TIM1_UP_TIM10_IRQHandler+0x10>

08000e14 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
	if (TIM4->SR & TIM_SR_UIF)
 8000e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e18:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	f013 0f01 	tst.w	r3, #1
 8000e22:	d007      	beq.n	8000e34 <TIM4_IRQHandler+0x20>
	{
		TIM4->SR &= ~TIM_SR_UIF;
 8000e24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e28:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e2c:	691a      	ldr	r2, [r3, #16]
 8000e2e:	f022 0201 	bic.w	r2, r2, #1
 8000e32:	611a      	str	r2, [r3, #16]
	}
}
 8000e34:	4770      	bx	lr

08000e36 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e36:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000e3a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000e3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000e42:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e50:	4770      	bx	lr
	...

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e5a:	e003      	b.n	8000e64 <LoopCopyDataInit>

08000e5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e62:	3104      	adds	r1, #4

08000e64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e64:	480b      	ldr	r0, [pc, #44]	; (8000e94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e6c:	d3f6      	bcc.n	8000e5c <CopyDataInit>
  ldr  r2, =_sbss
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e70:	e002      	b.n	8000e78 <LoopFillZerobss>

08000e72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e74:	f842 3b04 	str.w	r3, [r2], #4

08000e78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e7c:	d3f9      	bcc.n	8000e72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e7e:	f7ff ffda 	bl	8000e36 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e82:	f001 fa81 	bl	8002388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fd18 	bl	80008ba <main>
  bx  lr    
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e90:	08002420 	.word	0x08002420
  ldr  r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e98:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000e9c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000ea0:	200001ec 	.word	0x200001ec

08000ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>

08000ea6 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea6:	b510      	push	{r4, lr}
 8000ea8:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eaa:	f240 0268 	movw	r2, #104	; 0x68
 8000eae:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000eb2:	f240 036c 	movw	r3, #108	; 0x6c
 8000eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000eba:	7818      	ldrb	r0, [r3, #0]
 8000ebc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec0:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ec4:	6810      	ldr	r0, [r2, #0]
 8000ec6:	fbb0 f0f3 	udiv	r0, r0, r3
 8000eca:	f000 f8ad 	bl	8001028 <HAL_SYSTICK_Config>
 8000ece:	b980      	cbnz	r0, 8000ef2 <HAL_InitTick+0x4c>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed0:	2c0f      	cmp	r4, #15
 8000ed2:	d901      	bls.n	8000ed8 <HAL_InitTick+0x32>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	e00d      	b.n	8000ef4 <HAL_InitTick+0x4e>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4621      	mov	r1, r4
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee0:	f000 f85e 	bl	8000fa0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	f240 0370 	movw	r3, #112	; 0x70
 8000ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000eec:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000eee:	2000      	movs	r0, #0
 8000ef0:	e000      	b.n	8000ef4 <HAL_InitTick+0x4e>
    return HAL_ERROR;
 8000ef2:	2001      	movs	r0, #1
}
 8000ef4:	bd10      	pop	{r4, pc}

08000ef6 <HAL_Init>:
{
 8000ef6:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000efc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f06:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f0e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f16:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 f82e 	bl	8000f7a <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f7ff ffc1 	bl	8000ea6 <HAL_InitTick>
  HAL_MspInit();
 8000f24:	f7ff fea6 	bl	8000c74 <HAL_MspInit>
}
 8000f28:	2000      	movs	r0, #0
 8000f2a:	bd08      	pop	{r3, pc}

08000f2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f2c:	f240 13e8 	movw	r3, #488	; 0x1e8
 8000f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f34:	6818      	ldr	r0, [r3, #0]
 8000f36:	f240 016c 	movw	r1, #108	; 0x6c
 8000f3a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000f3e:	780a      	ldrb	r2, [r1, #0]
 8000f40:	4402      	add	r2, r0
 8000f42:	601a      	str	r2, [r3, #0]
}
 8000f44:	4770      	bx	lr

08000f46 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f46:	f240 13e8 	movw	r3, #488	; 0x1e8
 8000f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f4e:	6818      	ldr	r0, [r3, #0]
}
 8000f50:	4770      	bx	lr

08000f52 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f52:	b538      	push	{r3, r4, r5, lr}
 8000f54:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f56:	f7ff fff6 	bl	8000f46 <HAL_GetTick>
 8000f5a:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x1c>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f62:	f240 036c 	movw	r3, #108	; 0x6c
 8000f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f6e:	f7ff ffea 	bl	8000f46 <HAL_GetTick>
 8000f72:	1b40      	subs	r0, r0, r5
 8000f74:	42a0      	cmp	r0, r4
 8000f76:	d3fa      	bcc.n	8000f6e <HAL_Delay+0x1c>
  {
  }
}
 8000f78:	bd38      	pop	{r3, r4, r5, pc}

08000f7a <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f7a:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000f7e:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000f82:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f88:	041b      	lsls	r3, r3, #16
 8000f8a:	0c1b      	lsrs	r3, r3, #16
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	0200      	lsls	r0, r0, #8
 8000f96:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000f9a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000f9c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f9e:	4770      	bx	lr

08000fa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa0:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000fa6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	f1c3 0407 	rsb	r4, r3, #7
 8000fb4:	2c04      	cmp	r4, #4
 8000fb6:	bf28      	it	cs
 8000fb8:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	1d1d      	adds	r5, r3, #4
 8000fbc:	2d06      	cmp	r5, #6
 8000fbe:	bf8c      	ite	hi
 8000fc0:	3b03      	subhi	r3, #3
 8000fc2:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000fc8:	fa05 f404 	lsl.w	r4, r5, r4
 8000fcc:	ea21 0104 	bic.w	r1, r1, r4
 8000fd0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd2:	fa05 f303 	lsl.w	r3, r5, r3
 8000fd6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fda:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	2800      	cmp	r0, #0
 8000fde:	db09      	blt.n	8000ff4 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	0109      	lsls	r1, r1, #4
 8000fe2:	b2c9      	uxtb	r1, r1
 8000fe4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000fe8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000fec:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ff0:	bc30      	pop	{r4, r5}
 8000ff2:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	f000 000f 	and.w	r0, r0, #15
 8000ff8:	0109      	lsls	r1, r1, #4
 8000ffa:	b2c9      	uxtb	r1, r1
 8000ffc:	f64e 43fc 	movw	r3, #60668	; 0xecfc
 8001000:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001004:	4403      	add	r3, r0
 8001006:	7619      	strb	r1, [r3, #24]
 8001008:	e7f2      	b.n	8000ff0 <HAL_NVIC_SetPriority+0x50>

0800100a <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800100a:	2800      	cmp	r0, #0
 800100c:	db0b      	blt.n	8001026 <HAL_NVIC_EnableIRQ+0x1c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100e:	0942      	lsrs	r2, r0, #5
 8001010:	f000 001f 	and.w	r0, r0, #31
 8001014:	2301      	movs	r3, #1
 8001016:	fa03 f000 	lsl.w	r0, r3, r0
 800101a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800101e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001022:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001026:	4770      	bx	lr

08001028 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001028:	3801      	subs	r0, #1
 800102a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800102e:	d210      	bcs.n	8001052 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001030:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001034:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001038:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800103e:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8001042:	21f0      	movs	r1, #240	; 0xf0
 8001044:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001048:	2000      	movs	r0, #0
 800104a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001054:	4770      	bx	lr

08001056 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001056:	6802      	ldr	r2, [r0, #0]
 8001058:	b2d3      	uxtb	r3, r2
 800105a:	3b10      	subs	r3, #16
 800105c:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 8001060:	f6ca 21aa 	movt	r1, #43690	; 0xaaaa
 8001064:	fba1 1303 	umull	r1, r3, r1, r3
 8001068:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800106a:	f242 4108 	movw	r1, #9224	; 0x2408
 800106e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001072:	5cc9      	ldrb	r1, [r1, r3]
 8001074:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001076:	2b03      	cmp	r3, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001078:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 800107c:	f022 0203 	bic.w	r2, r2, #3
 8001080:	bf88      	it	hi
 8001082:	3204      	addhi	r2, #4
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001084:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8001086:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001088:	4770      	bx	lr

0800108a <HAL_DMA_Init>:
{
 800108a:	b538      	push	{r3, r4, r5, lr}
 800108c:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800108e:	f7ff ff5a 	bl	8000f46 <HAL_GetTick>
  if(hdma == NULL)
 8001092:	2c00      	cmp	r4, #0
 8001094:	f000 808b 	beq.w	80011ae <HAL_DMA_Init+0x124>
 8001098:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 800109a:	2300      	movs	r3, #0
 800109c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80010a0:	2302      	movs	r3, #2
 80010a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80010a6:	6822      	ldr	r2, [r4, #0]
 80010a8:	6813      	ldr	r3, [r2, #0]
 80010aa:	f023 0301 	bic.w	r3, r3, #1
 80010ae:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010b0:	6823      	ldr	r3, [r4, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	f012 0f01 	tst.w	r2, #1
 80010b8:	d00a      	beq.n	80010d0 <HAL_DMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ba:	f7ff ff44 	bl	8000f46 <HAL_GetTick>
 80010be:	1b40      	subs	r0, r0, r5
 80010c0:	2805      	cmp	r0, #5
 80010c2:	d9f5      	bls.n	80010b0 <HAL_DMA_Init+0x26>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010c4:	2320      	movs	r3, #32
 80010c6:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010c8:	2003      	movs	r0, #3
 80010ca:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80010ce:	bd38      	pop	{r3, r4, r5, pc}
  tmp = hdma->Instance->CR;
 80010d0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010d2:	f248 003f 	movw	r0, #32831	; 0x803f
 80010d6:	f2cf 0010 	movt	r0, #61456	; 0xf010
 80010da:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010dc:	6861      	ldr	r1, [r4, #4]
 80010de:	68a2      	ldr	r2, [r4, #8]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	68e1      	ldr	r1, [r4, #12]
 80010e4:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e6:	6921      	ldr	r1, [r4, #16]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	6961      	ldr	r1, [r4, #20]
 80010ec:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ee:	69a1      	ldr	r1, [r4, #24]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	69e1      	ldr	r1, [r4, #28]
 80010f4:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f6:	6a21      	ldr	r1, [r4, #32]
 80010f8:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010fa:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80010fe:	2904      	cmp	r1, #4
 8001100:	d015      	beq.n	800112e <HAL_DMA_Init+0xa4>
  hdma->Instance->CR = tmp;  
 8001102:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001104:	6821      	ldr	r1, [r4, #0]
 8001106:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001108:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800110c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800110e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001110:	2a04      	cmp	r2, #4
 8001112:	d115      	bne.n	8001140 <HAL_DMA_Init+0xb6>
    tmp |= hdma->Init.FIFOThreshold;
 8001114:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001116:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001118:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800111a:	b18a      	cbz	r2, 8001140 <HAL_DMA_Init+0xb6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800111c:	69a5      	ldr	r5, [r4, #24]
 800111e:	bb1d      	cbnz	r5, 8001168 <HAL_DMA_Init+0xde>
  {
    switch (tmp)
 8001120:	2801      	cmp	r0, #1
 8001122:	d01b      	beq.n	800115c <HAL_DMA_Init+0xd2>
 8001124:	b140      	cbz	r0, 8001138 <HAL_DMA_Init+0xae>
 8001126:	2802      	cmp	r0, #2
 8001128:	d006      	beq.n	8001138 <HAL_DMA_Init+0xae>
  HAL_StatusTypeDef status = HAL_OK;
 800112a:	2200      	movs	r2, #0
 800112c:	e006      	b.n	800113c <HAL_DMA_Init+0xb2>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800112e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001130:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001132:	4301      	orrs	r1, r0
 8001134:	430a      	orrs	r2, r1
 8001136:	e7e4      	b.n	8001102 <HAL_DMA_Init+0x78>
  HAL_StatusTypeDef status = HAL_OK;
 8001138:	f3c2 6200 	ubfx	r2, r2, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800113c:	2a00      	cmp	r2, #0
 800113e:	d130      	bne.n	80011a2 <HAL_DMA_Init+0x118>
  hdma->Instance->FCR = tmp;
 8001140:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001142:	4620      	mov	r0, r4
 8001144:	f7ff ff87 	bl	8001056 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001148:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800114a:	233f      	movs	r3, #63	; 0x3f
 800114c:	4093      	lsls	r3, r2
 800114e:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001150:	2000      	movs	r0, #0
 8001152:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001154:	2301      	movs	r3, #1
 8001156:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800115a:	e7b8      	b.n	80010ce <HAL_DMA_Init+0x44>
  HAL_StatusTypeDef status = HAL_OK;
 800115c:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 8001160:	bf14      	ite	ne
 8001162:	2200      	movne	r2, #0
 8001164:	2201      	moveq	r2, #1
 8001166:	e7e9      	b.n	800113c <HAL_DMA_Init+0xb2>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001168:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 800116c:	d006      	beq.n	800117c <HAL_DMA_Init+0xf2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800116e:	2802      	cmp	r0, #2
 8001170:	d917      	bls.n	80011a2 <HAL_DMA_Init+0x118>
 8001172:	2803      	cmp	r0, #3
 8001174:	d113      	bne.n	800119e <HAL_DMA_Init+0x114>
  HAL_StatusTypeDef status = HAL_OK;
 8001176:	f3c2 6200 	ubfx	r2, r2, #24, #1
 800117a:	e7df      	b.n	800113c <HAL_DMA_Init+0xb2>
    switch (tmp)
 800117c:	2803      	cmp	r0, #3
 800117e:	d80c      	bhi.n	800119a <HAL_DMA_Init+0x110>
 8001180:	e8df f000 	tbb	[pc, r0]
 8001184:	050f020f 	.word	0x050f020f
  HAL_StatusTypeDef status = HAL_OK;
 8001188:	f3c2 6200 	ubfx	r2, r2, #24, #1
 800118c:	e7d6      	b.n	800113c <HAL_DMA_Init+0xb2>
 800118e:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 8001192:	bf14      	ite	ne
 8001194:	2200      	movne	r2, #0
 8001196:	2201      	moveq	r2, #1
 8001198:	e7d0      	b.n	800113c <HAL_DMA_Init+0xb2>
 800119a:	2200      	movs	r2, #0
 800119c:	e7ce      	b.n	800113c <HAL_DMA_Init+0xb2>
 800119e:	2200      	movs	r2, #0
 80011a0:	e7cc      	b.n	800113c <HAL_DMA_Init+0xb2>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011a2:	2340      	movs	r3, #64	; 0x40
 80011a4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80011a6:	2001      	movs	r0, #1
 80011a8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80011ac:	e78f      	b.n	80010ce <HAL_DMA_Init+0x44>
    return HAL_ERROR;
 80011ae:	2001      	movs	r0, #1
 80011b0:	e78d      	b.n	80010ce <HAL_DMA_Init+0x44>

080011b2 <HAL_DMA_Start_IT>:
{
 80011b2:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 80011b4:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80011b8:	2c01      	cmp	r4, #1
 80011ba:	d03d      	beq.n	8001238 <HAL_DMA_Start_IT+0x86>
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011bc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80011be:	2401      	movs	r4, #1
 80011c0:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80011c4:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80011c8:	b2e4      	uxtb	r4, r4
 80011ca:	2c01      	cmp	r4, #1
 80011cc:	d005      	beq.n	80011da <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80011ce:	2300      	movs	r3, #0
 80011d0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 80011d4:	2002      	movs	r0, #2
}
 80011d6:	bc70      	pop	{r4, r5, r6}
 80011d8:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80011da:	2402      	movs	r4, #2
 80011dc:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e0:	2400      	movs	r4, #0
 80011e2:	6544      	str	r4, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80011e4:	6806      	ldr	r6, [r0, #0]
 80011e6:	6834      	ldr	r4, [r6, #0]
 80011e8:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80011ec:	6034      	str	r4, [r6, #0]
  hdma->Instance->NDTR = DataLength;
 80011ee:	6804      	ldr	r4, [r0, #0]
 80011f0:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011f2:	6883      	ldr	r3, [r0, #8]
 80011f4:	2b40      	cmp	r3, #64	; 0x40
 80011f6:	d01a      	beq.n	800122e <HAL_DMA_Start_IT+0x7c>
    hdma->Instance->PAR = SrcAddress;
 80011f8:	6803      	ldr	r3, [r0, #0]
 80011fa:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80011fc:	6803      	ldr	r3, [r0, #0]
 80011fe:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001200:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001202:	233f      	movs	r3, #63	; 0x3f
 8001204:	4093      	lsls	r3, r2
 8001206:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001208:	6802      	ldr	r2, [r0, #0]
 800120a:	6813      	ldr	r3, [r2, #0]
 800120c:	f043 0316 	orr.w	r3, r3, #22
 8001210:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001212:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001214:	b123      	cbz	r3, 8001220 <HAL_DMA_Start_IT+0x6e>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001216:	6802      	ldr	r2, [r0, #0]
 8001218:	6813      	ldr	r3, [r2, #0]
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001220:	6802      	ldr	r2, [r0, #0]
 8001222:	6813      	ldr	r3, [r2, #0]
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800122a:	2000      	movs	r0, #0
 800122c:	e7d3      	b.n	80011d6 <HAL_DMA_Start_IT+0x24>
    hdma->Instance->PAR = DstAddress;
 800122e:	6803      	ldr	r3, [r0, #0]
 8001230:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001232:	6803      	ldr	r3, [r0, #0]
 8001234:	60d9      	str	r1, [r3, #12]
 8001236:	e7e3      	b.n	8001200 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8001238:	2002      	movs	r0, #2
 800123a:	e7cc      	b.n	80011d6 <HAL_DMA_Start_IT+0x24>

0800123c <HAL_DMA_IRQHandler>:
{
 800123c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800123e:	b083      	sub	sp, #12
 8001240:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001242:	2300      	movs	r3, #0
 8001244:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001246:	f240 0368 	movw	r3, #104	; 0x68
 800124a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800124e:	681e      	ldr	r6, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001250:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001252:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001254:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001256:	2308      	movs	r3, #8
 8001258:	4093      	lsls	r3, r2
 800125a:	422b      	tst	r3, r5
 800125c:	d010      	beq.n	8001280 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800125e:	6803      	ldr	r3, [r0, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	f012 0f04 	tst.w	r2, #4
 8001266:	d00b      	beq.n	8001280 <HAL_DMA_IRQHandler+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	f022 0204 	bic.w	r2, r2, #4
 800126e:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001270:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001272:	2308      	movs	r3, #8
 8001274:	4093      	lsls	r3, r2
 8001276:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001278:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001280:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001282:	2301      	movs	r3, #1
 8001284:	4093      	lsls	r3, r2
 8001286:	422b      	tst	r3, r5
 8001288:	d009      	beq.n	800129e <HAL_DMA_IRQHandler+0x62>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800128a:	6822      	ldr	r2, [r4, #0]
 800128c:	6952      	ldr	r2, [r2, #20]
 800128e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001292:	d004      	beq.n	800129e <HAL_DMA_IRQHandler+0x62>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001294:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001296:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800129e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80012a0:	2304      	movs	r3, #4
 80012a2:	4093      	lsls	r3, r2
 80012a4:	422b      	tst	r3, r5
 80012a6:	d009      	beq.n	80012bc <HAL_DMA_IRQHandler+0x80>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012a8:	6822      	ldr	r2, [r4, #0]
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	f012 0f02 	tst.w	r2, #2
 80012b0:	d004      	beq.n	80012bc <HAL_DMA_IRQHandler+0x80>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012b2:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012bc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80012be:	2310      	movs	r3, #16
 80012c0:	4093      	lsls	r3, r2
 80012c2:	422b      	tst	r3, r5
 80012c4:	d024      	beq.n	8001310 <HAL_DMA_IRQHandler+0xd4>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012c6:	6822      	ldr	r2, [r4, #0]
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	f012 0f08 	tst.w	r2, #8
 80012ce:	d01f      	beq.n	8001310 <HAL_DMA_IRQHandler+0xd4>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012d0:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80012da:	d00d      	beq.n	80012f8 <HAL_DMA_IRQHandler+0xbc>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80012e2:	d104      	bne.n	80012ee <HAL_DMA_IRQHandler+0xb2>
          if(hdma->XferHalfCpltCallback != NULL)
 80012e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012e6:	b19b      	cbz	r3, 8001310 <HAL_DMA_IRQHandler+0xd4>
            hdma->XferHalfCpltCallback(hdma);
 80012e8:	4620      	mov	r0, r4
 80012ea:	4798      	blx	r3
 80012ec:	e010      	b.n	8001310 <HAL_DMA_IRQHandler+0xd4>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80012f0:	b173      	cbz	r3, 8001310 <HAL_DMA_IRQHandler+0xd4>
            hdma->XferM1HalfCpltCallback(hdma);
 80012f2:	4620      	mov	r0, r4
 80012f4:	4798      	blx	r3
 80012f6:	e00b      	b.n	8001310 <HAL_DMA_IRQHandler+0xd4>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	f412 7f80 	tst.w	r2, #256	; 0x100
 80012fe:	d103      	bne.n	8001308 <HAL_DMA_IRQHandler+0xcc>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	f022 0208 	bic.w	r2, r2, #8
 8001306:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001308:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800130a:	b10b      	cbz	r3, 8001310 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferHalfCpltCallback(hdma);
 800130c:	4620      	mov	r0, r4
 800130e:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001310:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001312:	2320      	movs	r3, #32
 8001314:	4093      	lsls	r3, r2
 8001316:	422b      	tst	r3, r5
 8001318:	d055      	beq.n	80013c6 <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800131a:	6822      	ldr	r2, [r4, #0]
 800131c:	6812      	ldr	r2, [r2, #0]
 800131e:	f012 0f10 	tst.w	r2, #16
 8001322:	d050      	beq.n	80013c6 <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001324:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001326:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b05      	cmp	r3, #5
 800132e:	d00e      	beq.n	800134e <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001338:	d033      	beq.n	80013a2 <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001340:	d12a      	bne.n	8001398 <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 8001342:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001344:	2b00      	cmp	r3, #0
 8001346:	d03e      	beq.n	80013c6 <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 8001348:	4620      	mov	r0, r4
 800134a:	4798      	blx	r3
 800134c:	e03b      	b.n	80013c6 <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800134e:	6822      	ldr	r2, [r4, #0]
 8001350:	6813      	ldr	r3, [r2, #0]
 8001352:	f023 0316 	bic.w	r3, r3, #22
 8001356:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001358:	6822      	ldr	r2, [r4, #0]
 800135a:	6953      	ldr	r3, [r2, #20]
 800135c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001360:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001362:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001364:	b1a3      	cbz	r3, 8001390 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001366:	6822      	ldr	r2, [r4, #0]
 8001368:	6813      	ldr	r3, [r2, #0]
 800136a:	f023 0308 	bic.w	r3, r3, #8
 800136e:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001370:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001372:	233f      	movs	r3, #63	; 0x3f
 8001374:	4093      	lsls	r3, r2
 8001376:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001378:	2300      	movs	r3, #0
 800137a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800137e:	2301      	movs	r3, #1
 8001380:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001384:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001386:	2b00      	cmp	r3, #0
 8001388:	d046      	beq.n	8001418 <HAL_DMA_IRQHandler+0x1dc>
          hdma->XferAbortCallback(hdma);
 800138a:	4620      	mov	r0, r4
 800138c:	4798      	blx	r3
 800138e:	e043      	b.n	8001418 <HAL_DMA_IRQHandler+0x1dc>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001390:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1e7      	bne.n	8001366 <HAL_DMA_IRQHandler+0x12a>
 8001396:	e7eb      	b.n	8001370 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 8001398:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800139a:	b1a3      	cbz	r3, 80013c6 <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 800139c:	4620      	mov	r0, r4
 800139e:	4798      	blx	r3
 80013a0:	e011      	b.n	80013c6 <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80013a8:	d109      	bne.n	80013be <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	f022 0210 	bic.w	r2, r2, #16
 80013b0:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80013b2:	2300      	movs	r3, #0
 80013b4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80013b8:	2301      	movs	r3, #1
 80013ba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80013be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80013c0:	b10b      	cbz	r3, 80013c6 <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 80013c2:	4620      	mov	r0, r4
 80013c4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013c8:	b333      	cbz	r3, 8001418 <HAL_DMA_IRQHandler+0x1dc>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013cc:	f013 0f01 	tst.w	r3, #1
 80013d0:	d01e      	beq.n	8001410 <HAL_DMA_IRQHandler+0x1d4>
      hdma->State = HAL_DMA_STATE_ABORT;
 80013d2:	2305      	movs	r3, #5
 80013d4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80013d8:	6822      	ldr	r2, [r4, #0]
 80013da:	6813      	ldr	r3, [r2, #0]
 80013dc:	f023 0301 	bic.w	r3, r3, #1
 80013e0:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013e2:	f248 13b5 	movw	r3, #33205	; 0x81b5
 80013e6:	f6c1 334e 	movt	r3, #6990	; 0x1b4e
 80013ea:	fba3 3606 	umull	r3, r6, r3, r6
 80013ee:	0ab6      	lsrs	r6, r6, #10
        if (++count > timeout)
 80013f0:	9b01      	ldr	r3, [sp, #4]
 80013f2:	3301      	adds	r3, #1
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	42b3      	cmp	r3, r6
 80013f8:	d804      	bhi.n	8001404 <HAL_DMA_IRQHandler+0x1c8>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f013 0f01 	tst.w	r3, #1
 8001402:	d1f5      	bne.n	80013f0 <HAL_DMA_IRQHandler+0x1b4>
      __HAL_UNLOCK(hdma);
 8001404:	2300      	movs	r3, #0
 8001406:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800140a:	2301      	movs	r3, #1
 800140c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001410:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001412:	b10b      	cbz	r3, 8001418 <HAL_DMA_IRQHandler+0x1dc>
      hdma->XferErrorCallback(hdma);
 8001414:	4620      	mov	r0, r4
 8001416:	4798      	blx	r3
}
 8001418:	b003      	add	sp, #12
 800141a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800141c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800141c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001420:	b089      	sub	sp, #36	; 0x24
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001422:	2400      	movs	r4, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001424:	f44f 5760 	mov.w	r7, #14336	; 0x3800
 8001428:	f2c4 0702 	movt	r7, #16386	; 0x4002

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800142c:	46a4      	mov	ip, r4
 800142e:	f2c4 0c02 	movt	ip, #16386	; 0x4002
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001432:	f44f 5670 	mov.w	r6, #15360	; 0x3c00
 8001436:	f2c4 0601 	movt	r6, #16385	; 0x4001
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800143a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 800143e:	f2c4 0e02 	movt	lr, #16386	; 0x4002
 8001442:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001446:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001450:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001454:	9302      	str	r3, [sp, #8]
 8001456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800145e:	9303      	str	r3, [sp, #12]
 8001460:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001464:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001468:	9304      	str	r3, [sp, #16]
 800146a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800146e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001472:	9305      	str	r3, [sp, #20]
 8001474:	e045      	b.n	8001502 <HAL_GPIO_Init+0xe6>
        temp = GPIOx->AFR[position >> 3U];
 8001476:	ea4f 0ad4 	mov.w	sl, r4, lsr #3
 800147a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800147e:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001482:	f004 0b07 	and.w	fp, r4, #7
 8001486:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800148a:	220f      	movs	r2, #15
 800148c:	fa02 f20b 	lsl.w	r2, r2, fp
 8001490:	ea25 0202 	bic.w	r2, r5, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001494:	690d      	ldr	r5, [r1, #16]
 8001496:	fa05 f50b 	lsl.w	r5, r5, fp
 800149a:	432a      	orrs	r2, r5
        GPIOx->AFR[position >> 3U] = temp;
 800149c:	f8ca 2020 	str.w	r2, [sl, #32]
 80014a0:	e06a      	b.n	8001578 <HAL_GPIO_Init+0x15c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014a2:	2500      	movs	r5, #0
 80014a4:	fa05 f50a 	lsl.w	r5, r5, sl
 80014a8:	ea45 0509 	orr.w	r5, r5, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ac:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 80014ae:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	ea6f 0803 	mvn.w	r8, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014b4:	684d      	ldr	r5, [r1, #4]
 80014b6:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80014ba:	bf0c      	ite	eq
 80014bc:	ea02 0208 	andeq.w	r2, r2, r8
        {
          temp |= iocurrent;
 80014c0:	431a      	orrne	r2, r3
        }
        EXTI->IMR = temp;
 80014c2:	6032      	str	r2, [r6, #0]

        temp = EXTI->EMR;
 80014c4:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014c6:	684d      	ldr	r5, [r1, #4]
 80014c8:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80014cc:	bf0c      	ite	eq
 80014ce:	ea02 0208 	andeq.w	r2, r2, r8
        {
          temp |= iocurrent;
 80014d2:	431a      	orrne	r2, r3
        }
        EXTI->EMR = temp;
 80014d4:	6072      	str	r2, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014d6:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d8:	684d      	ldr	r5, [r1, #4]
 80014da:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80014de:	bf0c      	ite	eq
 80014e0:	ea02 0208 	andeq.w	r2, r2, r8
        {
          temp |= iocurrent;
 80014e4:	431a      	orrne	r2, r3
        }
        EXTI->RTSR = temp;
 80014e6:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 80014e8:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ea:	684d      	ldr	r5, [r1, #4]
 80014ec:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80014f0:	bf0c      	ite	eq
 80014f2:	ea08 0302 	andeq.w	r3, r8, r2
        {
          temp |= iocurrent;
 80014f6:	4313      	orrne	r3, r2
        }
        EXTI->FTSR = temp;
 80014f8:	60f3      	str	r3, [r6, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fa:	3401      	adds	r4, #1
 80014fc:	2c10      	cmp	r4, #16
 80014fe:	f000 808f 	beq.w	8001620 <HAL_GPIO_Init+0x204>
    ioposition = 0x01U << position;
 8001502:	2501      	movs	r5, #1
 8001504:	40a5      	lsls	r5, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001506:	680b      	ldr	r3, [r1, #0]
 8001508:	402b      	ands	r3, r5
    if(iocurrent == ioposition)
 800150a:	429d      	cmp	r5, r3
 800150c:	d1f5      	bne.n	80014fa <HAL_GPIO_Init+0xde>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800150e:	684a      	ldr	r2, [r1, #4]
 8001510:	f022 0210 	bic.w	r2, r2, #16
 8001514:	3a01      	subs	r2, #1
 8001516:	2a01      	cmp	r2, #1
 8001518:	d818      	bhi.n	800154c <HAL_GPIO_Init+0x130>
        temp = GPIOx->OSPEEDR; 
 800151a:	6882      	ldr	r2, [r0, #8]
 800151c:	ea4f 0944 	mov.w	r9, r4, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001520:	f04f 0803 	mov.w	r8, #3
 8001524:	fa08 f809 	lsl.w	r8, r8, r9
 8001528:	ea22 0808 	bic.w	r8, r2, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800152c:	68ca      	ldr	r2, [r1, #12]
 800152e:	fa02 f209 	lsl.w	r2, r2, r9
 8001532:	ea42 0208 	orr.w	r2, r2, r8
        GPIOx->OSPEEDR = temp;
 8001536:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8001538:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800153a:	ea22 0805 	bic.w	r8, r2, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800153e:	684a      	ldr	r2, [r1, #4]
 8001540:	f3c2 1500 	ubfx	r5, r2, #4, #1
 8001544:	40a5      	lsls	r5, r4
 8001546:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->OTYPER = temp;
 800154a:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 800154c:	68c2      	ldr	r2, [r0, #12]
 800154e:	ea4f 0944 	mov.w	r9, r4, lsl #1
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001552:	f04f 0803 	mov.w	r8, #3
 8001556:	fa08 f809 	lsl.w	r8, r8, r9
 800155a:	ea6f 0808 	mvn.w	r8, r8
 800155e:	ea08 0202 	and.w	r2, r8, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001562:	688d      	ldr	r5, [r1, #8]
 8001564:	fa05 f509 	lsl.w	r5, r5, r9
 8001568:	4315      	orrs	r5, r2
      GPIOx->PUPDR = temp;
 800156a:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800156c:	684d      	ldr	r5, [r1, #4]
 800156e:	f025 0510 	bic.w	r5, r5, #16
 8001572:	2d02      	cmp	r5, #2
 8001574:	f43f af7f 	beq.w	8001476 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001578:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800157a:	ea08 0802 	and.w	r8, r8, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	684a      	ldr	r2, [r1, #4]
 8001580:	f002 0203 	and.w	r2, r2, #3
 8001584:	fa02 f909 	lsl.w	r9, r2, r9
 8001588:	ea49 0208 	orr.w	r2, r9, r8
      GPIOx->MODER = temp;
 800158c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800158e:	684a      	ldr	r2, [r1, #4]
 8001590:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001594:	d0b1      	beq.n	80014fa <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	2200      	movs	r2, #0
 8001598:	9207      	str	r2, [sp, #28]
 800159a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800159c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015a0:	647a      	str	r2, [r7, #68]	; 0x44
 80015a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015a4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80015a8:	9207      	str	r2, [sp, #28]
 80015aa:	9a07      	ldr	r2, [sp, #28]
 80015ac:	f024 0203 	bic.w	r2, r4, #3
 80015b0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80015b4:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
        temp = SYSCFG->EXTICR[position >> 2U];
 80015b8:	f8d2 9008 	ldr.w	r9, [r2, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015bc:	f004 0503 	and.w	r5, r4, #3
 80015c0:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 80015c4:	250f      	movs	r5, #15
 80015c6:	fa05 f50a 	lsl.w	r5, r5, sl
 80015ca:	ea29 0905 	bic.w	r9, r9, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ce:	4560      	cmp	r0, ip
 80015d0:	f43f af67 	beq.w	80014a2 <HAL_GPIO_Init+0x86>
 80015d4:	4570      	cmp	r0, lr
 80015d6:	d017      	beq.n	8001608 <HAL_GPIO_Init+0x1ec>
 80015d8:	9d01      	ldr	r5, [sp, #4]
 80015da:	42a8      	cmp	r0, r5
 80015dc:	d016      	beq.n	800160c <HAL_GPIO_Init+0x1f0>
 80015de:	9d02      	ldr	r5, [sp, #8]
 80015e0:	42a8      	cmp	r0, r5
 80015e2:	d015      	beq.n	8001610 <HAL_GPIO_Init+0x1f4>
 80015e4:	9d03      	ldr	r5, [sp, #12]
 80015e6:	42a8      	cmp	r0, r5
 80015e8:	d014      	beq.n	8001614 <HAL_GPIO_Init+0x1f8>
 80015ea:	9d04      	ldr	r5, [sp, #16]
 80015ec:	42a8      	cmp	r0, r5
 80015ee:	d013      	beq.n	8001618 <HAL_GPIO_Init+0x1fc>
 80015f0:	9d05      	ldr	r5, [sp, #20]
 80015f2:	42a8      	cmp	r0, r5
 80015f4:	d012      	beq.n	800161c <HAL_GPIO_Init+0x200>
 80015f6:	f44f 58e0 	mov.w	r8, #7168	; 0x1c00
 80015fa:	f2c4 0802 	movt	r8, #16386	; 0x4002
 80015fe:	4540      	cmp	r0, r8
 8001600:	bf0c      	ite	eq
 8001602:	2507      	moveq	r5, #7
 8001604:	2508      	movne	r5, #8
 8001606:	e74d      	b.n	80014a4 <HAL_GPIO_Init+0x88>
 8001608:	2501      	movs	r5, #1
 800160a:	e74b      	b.n	80014a4 <HAL_GPIO_Init+0x88>
 800160c:	2502      	movs	r5, #2
 800160e:	e749      	b.n	80014a4 <HAL_GPIO_Init+0x88>
 8001610:	2503      	movs	r5, #3
 8001612:	e747      	b.n	80014a4 <HAL_GPIO_Init+0x88>
 8001614:	2504      	movs	r5, #4
 8001616:	e745      	b.n	80014a4 <HAL_GPIO_Init+0x88>
 8001618:	2505      	movs	r5, #5
 800161a:	e743      	b.n	80014a4 <HAL_GPIO_Init+0x88>
 800161c:	2506      	movs	r5, #6
 800161e:	e741      	b.n	80014a4 <HAL_GPIO_Init+0x88>
      }
    }
  }
}
 8001620:	b009      	add	sp, #36	; 0x24
 8001622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001626 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001626:	6903      	ldr	r3, [r0, #16]
 8001628:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800162a:	bf14      	ite	ne
 800162c:	2001      	movne	r0, #1
 800162e:	2000      	moveq	r0, #0
 8001630:	4770      	bx	lr

08001632 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001632:	b308      	cbz	r0, 8001678 <HAL_IWDG_Init+0x46>
{
 8001634:	b538      	push	{r3, r4, r5, lr}
 8001636:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001638:	6803      	ldr	r3, [r0, #0]
 800163a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800163e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001640:	6803      	ldr	r3, [r0, #0]
 8001642:	f245 5255 	movw	r2, #21845	; 0x5555
 8001646:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001648:	6803      	ldr	r3, [r0, #0]
 800164a:	6842      	ldr	r2, [r0, #4]
 800164c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800164e:	6803      	ldr	r3, [r0, #0]
 8001650:	6882      	ldr	r2, [r0, #8]
 8001652:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001654:	f7ff fc77 	bl	8000f46 <HAL_GetTick>
 8001658:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	b132      	cbz	r2, 800166e <HAL_IWDG_Init+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001660:	f7ff fc71 	bl	8000f46 <HAL_GetTick>
 8001664:	1b40      	subs	r0, r0, r5
 8001666:	2830      	cmp	r0, #48	; 0x30
 8001668:	d9f7      	bls.n	800165a <HAL_IWDG_Init+0x28>
    {
      return HAL_TIMEOUT;
 800166a:	2003      	movs	r0, #3
 800166c:	e003      	b.n	8001676 <HAL_IWDG_Init+0x44>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800166e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001672:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001674:	2000      	movs	r0, #0
}
 8001676:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001678:	2001      	movs	r0, #1
}
 800167a:	4770      	bx	lr

0800167c <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800167c:	6803      	ldr	r3, [r0, #0]
 800167e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001682:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8001684:	2000      	movs	r0, #0
 8001686:	4770      	bx	lr

08001688 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001688:	2800      	cmp	r0, #0
 800168a:	f000 825d 	beq.w	8001b48 <HAL_RCC_OscConfig+0x4c0>
{
 800168e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	6803      	ldr	r3, [r0, #0]
 8001698:	f013 0f01 	tst.w	r3, #1
 800169c:	d04d      	beq.n	800173a <HAL_RCC_OscConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800169e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d038      	beq.n	8001722 <HAL_RCC_OscConfig+0x9a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016b0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d027      	beq.n	8001712 <HAL_RCC_OscConfig+0x8a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c2:	6863      	ldr	r3, [r4, #4]
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	d067      	beq.n	800179a <HAL_RCC_OscConfig+0x112>
 80016ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ce:	d06d      	beq.n	80017ac <HAL_RCC_OscConfig+0x124>
 80016d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016e8:	6863      	ldr	r3, [r4, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d06b      	beq.n	80017c6 <HAL_RCC_OscConfig+0x13e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fc2a 	bl	8000f46 <HAL_GetTick>
 80016f2:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f4:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 80016f8:	f2c4 0502 	movt	r5, #16386	; 0x4002
 80016fc:	682b      	ldr	r3, [r5, #0]
 80016fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001702:	d11a      	bne.n	800173a <HAL_RCC_OscConfig+0xb2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff fc1f 	bl	8000f46 <HAL_GetTick>
 8001708:	1b80      	subs	r0, r0, r6
 800170a:	2864      	cmp	r0, #100	; 0x64
 800170c:	d9f6      	bls.n	80016fc <HAL_RCC_OscConfig+0x74>
          {
            return HAL_TIMEOUT;
 800170e:	2003      	movs	r0, #3
 8001710:	e21f      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001712:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001716:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001720:	d0cf      	beq.n	80016c2 <HAL_RCC_OscConfig+0x3a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001722:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001726:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001730:	d003      	beq.n	800173a <HAL_RCC_OscConfig+0xb2>
 8001732:	6863      	ldr	r3, [r4, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 8209 	beq.w	8001b4c <HAL_RCC_OscConfig+0x4c4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173a:	6823      	ldr	r3, [r4, #0]
 800173c:	f013 0f02 	tst.w	r3, #2
 8001740:	d073      	beq.n	800182a <HAL_RCC_OscConfig+0x1a2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001742:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001746:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f013 0f0c 	tst.w	r3, #12
 8001750:	d053      	beq.n	80017fa <HAL_RCC_OscConfig+0x172>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001752:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001756:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001760:	2b08      	cmp	r3, #8
 8001762:	d042      	beq.n	80017ea <HAL_RCC_OscConfig+0x162>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001764:	68e3      	ldr	r3, [r4, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 808a 	beq.w	8001880 <HAL_RCC_OscConfig+0x1f8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800176c:	2300      	movs	r3, #0
 800176e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001772:	2201      	movs	r2, #1
 8001774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001776:	f7ff fbe6 	bl	8000f46 <HAL_GetTick>
 800177a:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177c:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 8001780:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8001784:	682b      	ldr	r3, [r5, #0]
 8001786:	f013 0f02 	tst.w	r3, #2
 800178a:	d16d      	bne.n	8001868 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178c:	f7ff fbdb 	bl	8000f46 <HAL_GetTick>
 8001790:	1b80      	subs	r0, r0, r6
 8001792:	2802      	cmp	r0, #2
 8001794:	d9f6      	bls.n	8001784 <HAL_RCC_OscConfig+0xfc>
          {
            return HAL_TIMEOUT;
 8001796:	2003      	movs	r0, #3
 8001798:	e1db      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800179a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800179e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e79d      	b.n	80016e8 <HAL_RCC_OscConfig+0x60>
 80017ac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	e790      	b.n	80016e8 <HAL_RCC_OscConfig+0x60>
        tickstart = HAL_GetTick();
 80017c6:	f7ff fbbe 	bl	8000f46 <HAL_GetTick>
 80017ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017cc:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 80017d0:	f2c4 0502 	movt	r5, #16386	; 0x4002
 80017d4:	682b      	ldr	r3, [r5, #0]
 80017d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80017da:	d0ae      	beq.n	800173a <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff fbb3 	bl	8000f46 <HAL_GetTick>
 80017e0:	1b80      	subs	r0, r0, r6
 80017e2:	2864      	cmp	r0, #100	; 0x64
 80017e4:	d9f6      	bls.n	80017d4 <HAL_RCC_OscConfig+0x14c>
            return HAL_TIMEOUT;
 80017e6:	2003      	movs	r0, #3
 80017e8:	e1b3      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80017f8:	d1b4      	bne.n	8001764 <HAL_RCC_OscConfig+0xdc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f013 0f02 	tst.w	r3, #2
 8001808:	d004      	beq.n	8001814 <HAL_RCC_OscConfig+0x18c>
 800180a:	68e3      	ldr	r3, [r4, #12]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d001      	beq.n	8001814 <HAL_RCC_OscConfig+0x18c>
        return HAL_ERROR;
 8001810:	2001      	movs	r0, #1
 8001812:	e19e      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001814:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001818:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800181c:	6813      	ldr	r3, [r2, #0]
 800181e:	6921      	ldr	r1, [r4, #16]
 8001820:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001824:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001828:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	f013 0f08 	tst.w	r3, #8
 8001830:	d055      	beq.n	80018de <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001832:	6963      	ldr	r3, [r4, #20]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d03a      	beq.n	80018ae <HAL_RCC_OscConfig+0x226>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001838:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 800183c:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff fb7f 	bl	8000f46 <HAL_GetTick>
 8001848:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184a:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 800184e:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8001852:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001854:	f013 0f02 	tst.w	r3, #2
 8001858:	d141      	bne.n	80018de <HAL_RCC_OscConfig+0x256>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff fb74 	bl	8000f46 <HAL_GetTick>
 800185e:	1b80      	subs	r0, r0, r6
 8001860:	2802      	cmp	r0, #2
 8001862:	d9f6      	bls.n	8001852 <HAL_RCC_OscConfig+0x1ca>
        {
          return HAL_TIMEOUT;
 8001864:	2003      	movs	r0, #3
 8001866:	e174      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001868:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800186c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001870:	6813      	ldr	r3, [r2, #0]
 8001872:	6921      	ldr	r1, [r4, #16]
 8001874:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001878:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e7d4      	b.n	800182a <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_DISABLE();
 8001880:	2300      	movs	r3, #0
 8001882:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800188a:	f7ff fb5c 	bl	8000f46 <HAL_GetTick>
 800188e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001890:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 8001894:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8001898:	682b      	ldr	r3, [r5, #0]
 800189a:	f013 0f02 	tst.w	r3, #2
 800189e:	d0c4      	beq.n	800182a <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a0:	f7ff fb51 	bl	8000f46 <HAL_GetTick>
 80018a4:	1b80      	subs	r0, r0, r6
 80018a6:	2802      	cmp	r0, #2
 80018a8:	d9f6      	bls.n	8001898 <HAL_RCC_OscConfig+0x210>
            return HAL_TIMEOUT;
 80018aa:	2003      	movs	r0, #3
 80018ac:	e151      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ae:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 80018b2:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ba:	f7ff fb44 	bl	8000f46 <HAL_GetTick>
 80018be:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c0:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 80018c4:	f2c4 0502 	movt	r5, #16386	; 0x4002
 80018c8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80018ca:	f013 0f02 	tst.w	r3, #2
 80018ce:	d006      	beq.n	80018de <HAL_RCC_OscConfig+0x256>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d0:	f7ff fb39 	bl	8000f46 <HAL_GetTick>
 80018d4:	1b80      	subs	r0, r0, r6
 80018d6:	2802      	cmp	r0, #2
 80018d8:	d9f6      	bls.n	80018c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018da:	2003      	movs	r0, #3
 80018dc:	e139      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018de:	6823      	ldr	r3, [r4, #0]
 80018e0:	f013 0f04 	tst.w	r3, #4
 80018e4:	f000 8091 	beq.w	8001a0a <HAL_RCC_OscConfig+0x382>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80018f6:	d140      	bne.n	800197a <HAL_RCC_OscConfig+0x2f2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001900:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001906:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800190a:	641a      	str	r2, [r3, #64]	; 0x40
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001916:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001918:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800191c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001926:	d02a      	beq.n	800197e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001928:	68a3      	ldr	r3, [r4, #8]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d041      	beq.n	80019b2 <HAL_RCC_OscConfig+0x32a>
 800192e:	2b05      	cmp	r3, #5
 8001930:	d048      	beq.n	80019c4 <HAL_RCC_OscConfig+0x33c>
 8001932:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001936:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800193a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800193c:	f022 0201 	bic.w	r2, r2, #1
 8001940:	671a      	str	r2, [r3, #112]	; 0x70
 8001942:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001944:	f022 0204 	bic.w	r2, r2, #4
 8001948:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800194a:	68a3      	ldr	r3, [r4, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d046      	beq.n	80019de <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff faf9 	bl	8000f46 <HAL_GetTick>
 8001954:	4680      	mov	r8, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001956:	f44f 5660 	mov.w	r6, #14336	; 0x3800
 800195a:	f2c4 0602 	movt	r6, #16386	; 0x4002
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800195e:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001962:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001964:	f013 0f02 	tst.w	r3, #2
 8001968:	d14e      	bne.n	8001a08 <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800196a:	f7ff faec 	bl	8000f46 <HAL_GetTick>
 800196e:	eba0 0008 	sub.w	r0, r0, r8
 8001972:	42b8      	cmp	r0, r7
 8001974:	d9f5      	bls.n	8001962 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8001976:	2003      	movs	r0, #3
 8001978:	e0eb      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
    FlagStatus       pwrclkchanged = RESET;
 800197a:	2500      	movs	r5, #0
 800197c:	e7cc      	b.n	8001918 <HAL_RCC_OscConfig+0x290>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001982:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800198c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800198e:	f7ff fada 	bl	8000f46 <HAL_GetTick>
 8001992:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001994:	f44f 46e0 	mov.w	r6, #28672	; 0x7000
 8001998:	f2c4 0600 	movt	r6, #16384	; 0x4000
 800199c:	6833      	ldr	r3, [r6, #0]
 800199e:	f413 7f80 	tst.w	r3, #256	; 0x100
 80019a2:	d1c1      	bne.n	8001928 <HAL_RCC_OscConfig+0x2a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a4:	f7ff facf 	bl	8000f46 <HAL_GetTick>
 80019a8:	1bc0      	subs	r0, r0, r7
 80019aa:	2802      	cmp	r0, #2
 80019ac:	d9f6      	bls.n	800199c <HAL_RCC_OscConfig+0x314>
          return HAL_TIMEOUT;
 80019ae:	2003      	movs	r0, #3
 80019b0:	e0cf      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019bc:	f042 0201 	orr.w	r2, r2, #1
 80019c0:	671a      	str	r2, [r3, #112]	; 0x70
 80019c2:	e7c2      	b.n	800194a <HAL_RCC_OscConfig+0x2c2>
 80019c4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019ce:	f042 0204 	orr.w	r2, r2, #4
 80019d2:	671a      	str	r2, [r3, #112]	; 0x70
 80019d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019d6:	f042 0201 	orr.w	r2, r2, #1
 80019da:	671a      	str	r2, [r3, #112]	; 0x70
 80019dc:	e7b5      	b.n	800194a <HAL_RCC_OscConfig+0x2c2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019de:	f7ff fab2 	bl	8000f46 <HAL_GetTick>
 80019e2:	4680      	mov	r8, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e4:	f44f 5660 	mov.w	r6, #14336	; 0x3800
 80019e8:	f2c4 0602 	movt	r6, #16386	; 0x4002
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ec:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80019f2:	f013 0f02 	tst.w	r3, #2
 80019f6:	d007      	beq.n	8001a08 <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f8:	f7ff faa5 	bl	8000f46 <HAL_GetTick>
 80019fc:	eba0 0008 	sub.w	r0, r0, r8
 8001a00:	42b8      	cmp	r0, r7
 8001a02:	d9f5      	bls.n	80019f0 <HAL_RCC_OscConfig+0x368>
        {
          return HAL_TIMEOUT;
 8001a04:	2003      	movs	r0, #3
 8001a06:	e0a4      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a08:	bb2d      	cbnz	r5, 8001a56 <HAL_RCC_OscConfig+0x3ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a0a:	69a3      	ldr	r3, [r4, #24]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 809f 	beq.w	8001b50 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a12:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001a16:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a1a:	6892      	ldr	r2, [r2, #8]
 8001a1c:	f002 020c 	and.w	r2, r2, #12
 8001a20:	2a08      	cmp	r2, #8
 8001a22:	d066      	beq.n	8001af2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d01f      	beq.n	8001a68 <HAL_RCC_OscConfig+0x3e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a28:	2360      	movs	r3, #96	; 0x60
 8001a2a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7ff fa88 	bl	8000f46 <HAL_GetTick>
 8001a36:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a38:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 8001a3c:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a46:	d052      	beq.n	8001aee <HAL_RCC_OscConfig+0x466>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a48:	f7ff fa7d 	bl	8000f46 <HAL_GetTick>
 8001a4c:	1b40      	subs	r0, r0, r5
 8001a4e:	2802      	cmp	r0, #2
 8001a50:	d9f6      	bls.n	8001a40 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001a52:	2003      	movs	r0, #3
 8001a54:	e07d      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a56:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a60:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40
 8001a66:	e7d0      	b.n	8001a0a <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_PLL_DISABLE();
 8001a68:	2360      	movs	r3, #96	; 0x60
 8001a6a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a72:	f7ff fa68 	bl	8000f46 <HAL_GetTick>
 8001a76:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a78:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 8001a7c:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8001a80:	682b      	ldr	r3, [r5, #0]
 8001a82:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a86:	d006      	beq.n	8001a96 <HAL_RCC_OscConfig+0x40e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a88:	f7ff fa5d 	bl	8000f46 <HAL_GetTick>
 8001a8c:	1b80      	subs	r0, r0, r6
 8001a8e:	2802      	cmp	r0, #2
 8001a90:	d9f6      	bls.n	8001a80 <HAL_RCC_OscConfig+0x3f8>
            return HAL_TIMEOUT;
 8001a92:	2003      	movs	r0, #3
 8001a94:	e05d      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a96:	69e3      	ldr	r3, [r4, #28]
 8001a98:	6a22      	ldr	r2, [r4, #32]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a9e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001aa2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001aa4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001aa8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001aaa:	0852      	lsrs	r2, r2, #1
 8001aac:	3a01      	subs	r2, #1
 8001aae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ab2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001ab6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001aba:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001abc:	2360      	movs	r3, #96	; 0x60
 8001abe:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fa3e 	bl	8000f46 <HAL_GetTick>
 8001aca:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001acc:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 8001ad0:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001ada:	d106      	bne.n	8001aea <HAL_RCC_OscConfig+0x462>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff fa33 	bl	8000f46 <HAL_GetTick>
 8001ae0:	1b40      	subs	r0, r0, r5
 8001ae2:	2802      	cmp	r0, #2
 8001ae4:	d9f6      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x44c>
            return HAL_TIMEOUT;
 8001ae6:	2003      	movs	r0, #3
 8001ae8:	e033      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001aea:	2000      	movs	r0, #0
 8001aec:	e031      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
 8001aee:	2000      	movs	r0, #0
 8001af0:	e02f      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d030      	beq.n	8001b58 <HAL_RCC_OscConfig+0x4d0>
        pll_config = RCC->PLLCFGR;
 8001af6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001afa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001afe:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b00:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001b04:	69e2      	ldr	r2, [r4, #28]
 8001b06:	4291      	cmp	r1, r2
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_OscConfig+0x486>
          return HAL_ERROR;
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	e021      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b12:	6a21      	ldr	r1, [r4, #32]
 8001b14:	428a      	cmp	r2, r1
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_OscConfig+0x494>
          return HAL_ERROR;
 8001b18:	2001      	movs	r0, #1
 8001b1a:	e01a      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b1e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001b22:	401a      	ands	r2, r3
 8001b24:	428a      	cmp	r2, r1
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_OscConfig+0x4a4>
          return HAL_ERROR;
 8001b28:	2001      	movs	r0, #1
 8001b2a:	e012      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b2c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b30:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001b32:	428a      	cmp	r2, r1
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0x4b2>
          return HAL_ERROR;
 8001b36:	2001      	movs	r0, #1
 8001b38:	e00b      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b3a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b3e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001b40:	1a18      	subs	r0, r3, r0
 8001b42:	bf18      	it	ne
 8001b44:	2001      	movne	r0, #1
 8001b46:	e004      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
 8001b48:	2001      	movs	r0, #1
}
 8001b4a:	4770      	bx	lr
        return HAL_ERROR;
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	e000      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>
  return HAL_OK;
 8001b50:	2000      	movs	r0, #0
}
 8001b52:	b002      	add	sp, #8
 8001b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8001b58:	2001      	movs	r0, #1
 8001b5a:	e7fa      	b.n	8001b52 <HAL_RCC_OscConfig+0x4ca>

08001b5c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b5c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d006      	beq.n	8001b7c <HAL_RCC_GetSysClockFreq+0x20>
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d009      	beq.n	8001b86 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b72:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 8001b76:	f2c0 00f4 	movt	r0, #244	; 0xf4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001b7a:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001b7c:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 8001b80:	f2c0 007a 	movt	r0, #122	; 0x7a
 8001b84:	4770      	bx	lr
{
 8001b86:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b8a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001b9e:	d031      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0xa8>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ba4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001bae:	461e      	mov	r6, r3
 8001bb0:	2700      	movs	r7, #0
 8001bb2:	015c      	lsls	r4, r3, #5
 8001bb4:	2500      	movs	r5, #0
 8001bb6:	1ae4      	subs	r4, r4, r3
 8001bb8:	eb65 0507 	sbc.w	r5, r5, r7
 8001bbc:	01a9      	lsls	r1, r5, #6
 8001bbe:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001bc2:	01a0      	lsls	r0, r4, #6
 8001bc4:	1b00      	subs	r0, r0, r4
 8001bc6:	eb61 0105 	sbc.w	r1, r1, r5
 8001bca:	00cb      	lsls	r3, r1, #3
 8001bcc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001bd0:	00c4      	lsls	r4, r0, #3
 8001bd2:	19a0      	adds	r0, r4, r6
 8001bd4:	eb43 0107 	adc.w	r1, r3, r7
 8001bd8:	024b      	lsls	r3, r1, #9
 8001bda:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8001bde:	0244      	lsls	r4, r0, #9
 8001be0:	4620      	mov	r0, r4
 8001be2:	4619      	mov	r1, r3
 8001be4:	2300      	movs	r3, #0
 8001be6:	f7fe faef 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001bee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001bfc:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001c00:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c04:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001c12:	461e      	mov	r6, r3
 8001c14:	2700      	movs	r7, #0
 8001c16:	015c      	lsls	r4, r3, #5
 8001c18:	2500      	movs	r5, #0
 8001c1a:	1ae4      	subs	r4, r4, r3
 8001c1c:	eb65 0507 	sbc.w	r5, r5, r7
 8001c20:	01a9      	lsls	r1, r5, #6
 8001c22:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001c26:	01a0      	lsls	r0, r4, #6
 8001c28:	1b00      	subs	r0, r0, r4
 8001c2a:	eb61 0105 	sbc.w	r1, r1, r5
 8001c2e:	00cb      	lsls	r3, r1, #3
 8001c30:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c34:	00c4      	lsls	r4, r0, #3
 8001c36:	19a0      	adds	r0, r4, r6
 8001c38:	eb43 0107 	adc.w	r1, r3, r7
 8001c3c:	028b      	lsls	r3, r1, #10
 8001c3e:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001c42:	0284      	lsls	r4, r0, #10
 8001c44:	4620      	mov	r0, r4
 8001c46:	4619      	mov	r1, r3
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f7fe fabd 	bl	80001c8 <__aeabi_uldivmod>
 8001c4e:	e7cc      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x8e>

08001c50 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001c50:	2800      	cmp	r0, #0
 8001c52:	f000 80d8 	beq.w	8001e06 <HAL_RCC_ClockConfig+0x1b6>
{
 8001c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c5a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001c60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	428b      	cmp	r3, r1
 8001c6c:	d20d      	bcs.n	8001c8a <HAL_RCC_ClockConfig+0x3a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	b2ca      	uxtb	r2, r1
 8001c70:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001c74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c78:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	428b      	cmp	r3, r1
 8001c82:	d002      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x3a>
      return HAL_ERROR;
 8001c84:	2001      	movs	r0, #1
}
 8001c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	f013 0f02 	tst.w	r3, #2
 8001c90:	d020      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x84>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c92:	f013 0f04 	tst.w	r3, #4
 8001c96:	d007      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x58>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c98:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001ca6:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	f013 0f08 	tst.w	r3, #8
 8001cae:	d007      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x70>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001cbe:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001cc4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001cc8:	6893      	ldr	r3, [r2, #8]
 8001cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cce:	68a0      	ldr	r0, [r4, #8]
 8001cd0:	4303      	orrs	r3, r0
 8001cd2:	6093      	str	r3, [r2, #8]
 8001cd4:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	f013 0f01 	tst.w	r3, #1
 8001cdc:	d043      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x116>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cde:	6862      	ldr	r2, [r4, #4]
 8001ce0:	2a01      	cmp	r2, #1
 8001ce2:	d02c      	beq.n	8001d3e <HAL_RCC_ClockConfig+0xee>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ce4:	1e93      	subs	r3, r2, #2
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d933      	bls.n	8001d52 <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f013 0f02 	tst.w	r3, #2
 8001cf8:	f000 8087 	beq.w	8001e0a <HAL_RCC_ClockConfig+0x1ba>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cfc:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001d00:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001d04:	688b      	ldr	r3, [r1, #8]
 8001d06:	f023 0303 	bic.w	r3, r3, #3
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001d0e:	f7ff f91a 	bl	8000f46 <HAL_GetTick>
 8001d12:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d14:	f44f 5660 	mov.w	r6, #14336	; 0x3800
 8001d18:	f2c4 0602 	movt	r6, #16386	; 0x4002
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1c:	f241 3788 	movw	r7, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d20:	68b3      	ldr	r3, [r6, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	6862      	ldr	r2, [r4, #4]
 8001d28:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d2c:	d01b      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x116>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2e:	f7ff f90a 	bl	8000f46 <HAL_GetTick>
 8001d32:	eba0 0008 	sub.w	r0, r0, r8
 8001d36:	42b8      	cmp	r0, r7
 8001d38:	d9f2      	bls.n	8001d20 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001d3a:	2003      	movs	r0, #3
 8001d3c:	e7a3      	b.n	8001c86 <HAL_RCC_ClockConfig+0x36>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d42:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d4c:	d1d6      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8001d4e:	2001      	movs	r0, #1
 8001d50:	e799      	b.n	8001c86 <HAL_RCC_ClockConfig+0x36>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d52:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d60:	d1cc      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8001d62:	2001      	movs	r0, #1
 8001d64:	e78f      	b.n	8001c86 <HAL_RCC_ClockConfig+0x36>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d66:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001d6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	42ab      	cmp	r3, r5
 8001d76:	d90c      	bls.n	8001d92 <HAL_RCC_ClockConfig+0x142>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d78:	b2ea      	uxtb	r2, r5
 8001d7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001d7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d82:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	42ab      	cmp	r3, r5
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x142>
      return HAL_ERROR;
 8001d8e:	2001      	movs	r0, #1
 8001d90:	e779      	b.n	8001c86 <HAL_RCC_ClockConfig+0x36>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	f013 0f04 	tst.w	r3, #4
 8001d98:	d009      	beq.n	8001dae <HAL_RCC_ClockConfig+0x15e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001d9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001da2:	6893      	ldr	r3, [r2, #8]
 8001da4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001da8:	68e1      	ldr	r1, [r4, #12]
 8001daa:	430b      	orrs	r3, r1
 8001dac:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dae:	6823      	ldr	r3, [r4, #0]
 8001db0:	f013 0f08 	tst.w	r3, #8
 8001db4:	d00a      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001db6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001dba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001dbe:	6893      	ldr	r3, [r2, #8]
 8001dc0:	6921      	ldr	r1, [r4, #16]
 8001dc2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001dc6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001dca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dcc:	f7ff fec6 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8001dd0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001dd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	f240 0368 	movw	r3, #104	; 0x68
 8001dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001de2:	f242 31f8 	movw	r1, #9208	; 0x23f8
 8001de6:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001dea:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001dee:	5c8a      	ldrb	r2, [r1, r2]
 8001df0:	40d0      	lsrs	r0, r2
 8001df2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001df4:	f240 0370 	movw	r3, #112	; 0x70
 8001df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	f7ff f852 	bl	8000ea6 <HAL_InitTick>
  return HAL_OK;
 8001e02:	2000      	movs	r0, #0
 8001e04:	e73f      	b.n	8001c86 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8001e06:	2001      	movs	r0, #1
}
 8001e08:	4770      	bx	lr
        return HAL_ERROR;
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	e73b      	b.n	8001c86 <HAL_RCC_ClockConfig+0x36>

08001e0e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e10:	4607      	mov	r7, r0
 8001e12:	460e      	mov	r6, r1
 8001e14:	4615      	mov	r5, r2
 8001e16:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	6893      	ldr	r3, [r2, #8]
 8001e1c:	ea36 0303 	bics.w	r3, r6, r3
 8001e20:	bf0c      	ite	eq
 8001e22:	2301      	moveq	r3, #1
 8001e24:	2300      	movne	r3, #0
 8001e26:	42ab      	cmp	r3, r5
 8001e28:	d037      	beq.n	8001e9a <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e2a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001e2e:	d0f4      	beq.n	8001e1a <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001e30:	f7ff f889 	bl	8000f46 <HAL_GetTick>
 8001e34:	9b06      	ldr	r3, [sp, #24]
 8001e36:	1ac0      	subs	r0, r0, r3
 8001e38:	42a0      	cmp	r0, r4
 8001e3a:	d201      	bcs.n	8001e40 <SPI_WaitFlagStateUntilTimeout+0x32>
 8001e3c:	2c00      	cmp	r4, #0
 8001e3e:	d1eb      	bne.n	8001e18 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	6853      	ldr	r3, [r2, #4]
 8001e44:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8001e48:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e50:	d00b      	beq.n	8001e6a <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e58:	d014      	beq.n	8001e84 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e60:	2300      	movs	r3, #0
 8001e62:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

        return HAL_TIMEOUT;
 8001e66:	2003      	movs	r0, #3
 8001e68:	e018      	b.n	8001e9c <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e70:	d002      	beq.n	8001e78 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e76:	d1ec      	bne.n	8001e52 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	6813      	ldr	r3, [r2, #0]
 8001e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e7e6      	b.n	8001e52 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	6813      	ldr	r3, [r2, #0]
 8001e88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	6813      	ldr	r3, [r2, #0]
 8001e92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	e7df      	b.n	8001e5a <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8001e9a:	2000      	movs	r0, #0
}
 8001e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e9e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e9e:	b530      	push	{r4, r5, lr}
 8001ea0:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001ea2:	f240 0468 	movw	r4, #104	; 0x68
 8001ea6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001eaa:	6824      	ldr	r4, [r4, #0]
 8001eac:	f649 7581 	movw	r5, #40833	; 0x9f81
 8001eb0:	f2c1 655e 	movt	r5, #5726	; 0x165e
 8001eb4:	fba5 3404 	umull	r3, r4, r5, r4
 8001eb8:	0d64      	lsrs	r4, r4, #21
 8001eba:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001ebe:	fb05 f404 	mul.w	r4, r5, r4
 8001ec2:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ec4:	6844      	ldr	r4, [r0, #4]
 8001ec6:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8001eca:	d00b      	beq.n	8001ee4 <SPI_EndRxTxTransaction+0x46>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001ecc:	9b03      	ldr	r3, [sp, #12]
 8001ece:	b1c3      	cbz	r3, 8001f02 <SPI_EndRxTxTransaction+0x64>
      {
        break;
      }
      count--;
 8001ed0:	9b03      	ldr	r3, [sp, #12]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001ed6:	6803      	ldr	r3, [r0, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ede:	d1f5      	bne.n	8001ecc <SPI_EndRxTxTransaction+0x2e>
  }

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e00f      	b.n	8001f04 <SPI_EndRxTxTransaction+0x66>
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ee8:	9200      	str	r2, [sp, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	2180      	movs	r1, #128	; 0x80
 8001eee:	f7ff ff8e 	bl	8001e0e <SPI_WaitFlagStateUntilTimeout>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	b130      	cbz	r0, 8001f04 <SPI_EndRxTxTransaction+0x66>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ef6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ef8:	f043 0320 	orr.w	r3, r3, #32
 8001efc:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e000      	b.n	8001f04 <SPI_EndRxTxTransaction+0x66>
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	b005      	add	sp, #20
 8001f08:	bd30      	pop	{r4, r5, pc}

08001f0a <SPI_EndRxTransaction>:
{
 8001f0a:	b510      	push	{r4, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f10:	6840      	ldr	r0, [r0, #4]
 8001f12:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8001f16:	d00c      	beq.n	8001f32 <SPI_EndRxTransaction+0x28>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001f18:	9200      	str	r2, [sp, #0]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2101      	movs	r1, #1
 8001f20:	4620      	mov	r0, r4
 8001f22:	f7ff ff74 	bl	8001e0e <SPI_WaitFlagStateUntilTimeout>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2800      	cmp	r0, #0
 8001f2a:	d136      	bne.n	8001f9a <SPI_EndRxTransaction+0x90>
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	b002      	add	sp, #8
 8001f30:	bd10      	pop	{r4, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f32:	68a3      	ldr	r3, [r4, #8]
 8001f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f38:	d002      	beq.n	8001f40 <SPI_EndRxTransaction+0x36>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3e:	d10c      	bne.n	8001f5a <SPI_EndRxTransaction+0x50>
    __HAL_SPI_DISABLE(hspi);
 8001f40:	6820      	ldr	r0, [r4, #0]
 8001f42:	6803      	ldr	r3, [r0, #0]
 8001f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f48:	6003      	str	r3, [r0, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f4a:	6863      	ldr	r3, [r4, #4]
 8001f4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f50:	d1e2      	bne.n	8001f18 <SPI_EndRxTransaction+0xe>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8001f52:	68a3      	ldr	r3, [r4, #8]
 8001f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f58:	d00f      	beq.n	8001f7a <SPI_EndRxTransaction+0x70>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f5a:	9200      	str	r2, [sp, #0]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2180      	movs	r1, #128	; 0x80
 8001f62:	4620      	mov	r0, r4
 8001f64:	f7ff ff53 	bl	8001e0e <SPI_WaitFlagStateUntilTimeout>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2800      	cmp	r0, #0
 8001f6c:	d0de      	beq.n	8001f2c <SPI_EndRxTransaction+0x22>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f70:	f043 0320 	orr.w	r3, r3, #32
 8001f74:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e7d8      	b.n	8001f2c <SPI_EndRxTransaction+0x22>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001f7a:	9200      	str	r2, [sp, #0]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2101      	movs	r1, #1
 8001f82:	4620      	mov	r0, r4
 8001f84:	f7ff ff43 	bl	8001e0e <SPI_WaitFlagStateUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2800      	cmp	r0, #0
 8001f8c:	d0ce      	beq.n	8001f2c <SPI_EndRxTransaction+0x22>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f90:	f043 0320 	orr.w	r3, r3, #32
 8001f94:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e7c8      	b.n	8001f2c <SPI_EndRxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f9c:	f043 0320 	orr.w	r3, r3, #32
 8001fa0:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e7c2      	b.n	8001f2c <SPI_EndRxTransaction+0x22>

08001fa6 <HAL_SPI_Init>:
  if (hspi == NULL)
 8001fa6:	2800      	cmp	r0, #0
 8001fa8:	d03b      	beq.n	8002022 <HAL_SPI_Init+0x7c>
{
 8001faa:	b510      	push	{r4, lr}
 8001fac:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fb2:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d02e      	beq.n	8002018 <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001fc0:	6822      	ldr	r2, [r4, #0]
 8001fc2:	6813      	ldr	r3, [r2, #0]
 8001fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fc8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001fca:	6822      	ldr	r2, [r4, #0]
 8001fcc:	6863      	ldr	r3, [r4, #4]
 8001fce:	68a1      	ldr	r1, [r4, #8]
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	68e1      	ldr	r1, [r4, #12]
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	6921      	ldr	r1, [r4, #16]
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	6961      	ldr	r1, [r4, #20]
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	69e1      	ldr	r1, [r4, #28]
 8001fe0:	430b      	orrs	r3, r1
 8001fe2:	6a21      	ldr	r1, [r4, #32]
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	69a1      	ldr	r1, [r4, #24]
 8001fec:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001ff4:	6822      	ldr	r2, [r4, #0]
 8001ff6:	8b63      	ldrh	r3, [r4, #26]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001ffe:	430b      	orrs	r3, r1
 8002000:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002002:	6822      	ldr	r2, [r4, #0]
 8002004:	69d3      	ldr	r3, [r2, #28]
 8002006:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800200a:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800200c:	2000      	movs	r0, #0
 800200e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002010:	2301      	movs	r3, #1
 8002012:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002016:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002018:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800201c:	f7fe fe46 	bl	8000cac <HAL_SPI_MspInit>
 8002020:	e7cb      	b.n	8001fba <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8002022:	2001      	movs	r0, #1
}
 8002024:	4770      	bx	lr

08002026 <HAL_SPI_TransmitReceive_DMA>:
{
 8002026:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8002028:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 800202c:	2c01      	cmp	r4, #1
 800202e:	f000 80a8 	beq.w	8002182 <HAL_SPI_TransmitReceive_DMA+0x15c>
 8002032:	4604      	mov	r4, r0
 8002034:	2001      	movs	r0, #1
 8002036:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  tmp_state           = hspi->State;
 800203a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800203e:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002040:	2801      	cmp	r0, #1
 8002042:	d011      	beq.n	8002068 <HAL_SPI_TransmitReceive_DMA+0x42>
 8002044:	6865      	ldr	r5, [r4, #4]
 8002046:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 800204a:	d005      	beq.n	8002058 <HAL_SPI_TransmitReceive_DMA+0x32>
    errorcode = HAL_BUSY;
 800204c:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 800204e:	2200      	movs	r2, #0
 8002050:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8002054:	4618      	mov	r0, r3
 8002056:	bd38      	pop	{r3, r4, r5, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002058:	68a5      	ldr	r5, [r4, #8]
 800205a:	2d00      	cmp	r5, #0
 800205c:	f040 8089 	bne.w	8002172 <HAL_SPI_TransmitReceive_DMA+0x14c>
 8002060:	2804      	cmp	r0, #4
 8002062:	d001      	beq.n	8002068 <HAL_SPI_TransmitReceive_DMA+0x42>
    errorcode = HAL_BUSY;
 8002064:	2302      	movs	r3, #2
 8002066:	e7f2      	b.n	800204e <HAL_SPI_TransmitReceive_DMA+0x28>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002068:	2900      	cmp	r1, #0
 800206a:	f000 8084 	beq.w	8002176 <HAL_SPI_TransmitReceive_DMA+0x150>
 800206e:	2a00      	cmp	r2, #0
 8002070:	f000 8083 	beq.w	800217a <HAL_SPI_TransmitReceive_DMA+0x154>
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8082 	beq.w	800217e <HAL_SPI_TransmitReceive_DMA+0x158>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800207a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800207e:	b2c0      	uxtb	r0, r0
 8002080:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002082:	bf1c      	itt	ne
 8002084:	2005      	movne	r0, #5
 8002086:	f884 0051 	strbne.w	r0, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800208a:	2000      	movs	r0, #0
 800208c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800208e:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002090:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002092:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002094:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002096:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002098:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800209a:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800209c:	6460      	str	r0, [r4, #68]	; 0x44
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800209e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d024      	beq.n	80020f2 <HAL_SPI_TransmitReceive_DMA+0xcc>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80020a8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80020aa:	f242 238f 	movw	r3, #8847	; 0x228f
 80020ae:	f6c0 0300 	movt	r3, #2048	; 0x800
 80020b2:	6413      	str	r3, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80020b4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80020b6:	f242 332b 	movw	r3, #9003	; 0x232b
 80020ba:	f6c0 0300 	movt	r3, #2048	; 0x800
 80020be:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80020c0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80020c2:	f242 239b 	movw	r3, #8859	; 0x229b
 80020c6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80020ca:	64d3      	str	r3, [r2, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 80020cc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80020ce:	2200      	movs	r2, #0
 80020d0:	651a      	str	r2, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 80020d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80020d4:	6821      	ldr	r1, [r4, #0]
 80020d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80020d8:	310c      	adds	r1, #12
 80020da:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80020dc:	f7ff f869 	bl	80011b2 <HAL_DMA_Start_IT>
 80020e0:	b1a0      	cbz	r0, 800210c <HAL_SPI_TransmitReceive_DMA+0xe6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80020e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80020e4:	f043 0310 	orr.w	r3, r3, #16
 80020e8:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 80020ea:	2301      	movs	r3, #1
 80020ec:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 80020f0:	e7ad      	b.n	800204e <HAL_SPI_TransmitReceive_DMA+0x28>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80020f2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80020f4:	f242 2383 	movw	r3, #8835	; 0x2283
 80020f8:	f6c0 0300 	movt	r3, #2048	; 0x800
 80020fc:	6413      	str	r3, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80020fe:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002100:	f242 23bd 	movw	r3, #8893	; 0x22bd
 8002104:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002108:	63d3      	str	r3, [r2, #60]	; 0x3c
 800210a:	e7d9      	b.n	80020c0 <HAL_SPI_TransmitReceive_DMA+0x9a>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800210c:	6822      	ldr	r2, [r4, #0]
 800210e:	6853      	ldr	r3, [r2, #4]
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002116:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002118:	2300      	movs	r3, #0
 800211a:	6413      	str	r3, [r2, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800211c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800211e:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002120:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002122:	64d3      	str	r3, [r2, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002124:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002126:	6513      	str	r3, [r2, #80]	; 0x50
                                 hspi->TxXferCount))
 8002128:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800212a:	6822      	ldr	r2, [r4, #0]
 800212c:	320c      	adds	r2, #12
 800212e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002130:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002132:	f7ff f83e 	bl	80011b2 <HAL_DMA_Start_IT>
 8002136:	4603      	mov	r3, r0
 8002138:	b138      	cbz	r0, 800214a <HAL_SPI_TransmitReceive_DMA+0x124>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800213a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800213c:	f043 0310 	orr.w	r3, r3, #16
 8002140:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8002142:	2301      	movs	r3, #1
 8002144:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 8002148:	e781      	b.n	800204e <HAL_SPI_TransmitReceive_DMA+0x28>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800214a:	6822      	ldr	r2, [r4, #0]
 800214c:	6811      	ldr	r1, [r2, #0]
 800214e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002152:	d103      	bne.n	800215c <HAL_SPI_TransmitReceive_DMA+0x136>
    __HAL_SPI_ENABLE(hspi);
 8002154:	6811      	ldr	r1, [r2, #0]
 8002156:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800215a:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800215c:	6821      	ldr	r1, [r4, #0]
 800215e:	684a      	ldr	r2, [r1, #4]
 8002160:	f042 0220 	orr.w	r2, r2, #32
 8002164:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002166:	6821      	ldr	r1, [r4, #0]
 8002168:	684a      	ldr	r2, [r1, #4]
 800216a:	f042 0202 	orr.w	r2, r2, #2
 800216e:	604a      	str	r2, [r1, #4]
 8002170:	e76d      	b.n	800204e <HAL_SPI_TransmitReceive_DMA+0x28>
    errorcode = HAL_BUSY;
 8002172:	2302      	movs	r3, #2
 8002174:	e76b      	b.n	800204e <HAL_SPI_TransmitReceive_DMA+0x28>
    errorcode = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e769      	b.n	800204e <HAL_SPI_TransmitReceive_DMA+0x28>
 800217a:	2301      	movs	r3, #1
 800217c:	e767      	b.n	800204e <HAL_SPI_TransmitReceive_DMA+0x28>
 800217e:	2301      	movs	r3, #1
 8002180:	e765      	b.n	800204e <HAL_SPI_TransmitReceive_DMA+0x28>
  __HAL_LOCK(hspi);
 8002182:	2302      	movs	r3, #2
 8002184:	e766      	b.n	8002054 <HAL_SPI_TransmitReceive_DMA+0x2e>

08002186 <HAL_SPI_Receive_DMA>:
{
 8002186:	b538      	push	{r3, r4, r5, lr}
 8002188:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800218a:	6885      	ldr	r5, [r0, #8]
 800218c:	b91d      	cbnz	r5, 8002196 <HAL_SPI_Receive_DMA+0x10>
 800218e:	6843      	ldr	r3, [r0, #4]
 8002190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002194:	d011      	beq.n	80021ba <HAL_SPI_Receive_DMA+0x34>
  __HAL_LOCK(hspi);
 8002196:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 800219a:	2801      	cmp	r0, #1
 800219c:	d06d      	beq.n	800227a <HAL_SPI_Receive_DMA+0xf4>
 800219e:	2001      	movs	r0, #1
 80021a0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 80021a4:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80021a8:	b2c0      	uxtb	r0, r0
 80021aa:	2801      	cmp	r0, #1
 80021ac:	d00e      	beq.n	80021cc <HAL_SPI_Receive_DMA+0x46>
    errorcode = HAL_BUSY;
 80021ae:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 80021b0:	2200      	movs	r2, #0
 80021b2:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	bd38      	pop	{r3, r4, r5, pc}
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80021ba:	2304      	movs	r3, #4
 80021bc:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80021c0:	4613      	mov	r3, r2
 80021c2:	460a      	mov	r2, r1
 80021c4:	f7ff ff2f 	bl	8002026 <HAL_SPI_TransmitReceive_DMA>
 80021c8:	4603      	mov	r3, r0
 80021ca:	e7f4      	b.n	80021b6 <HAL_SPI_Receive_DMA+0x30>
  if ((pData == NULL) || (Size == 0U))
 80021cc:	2900      	cmp	r1, #0
 80021ce:	d050      	beq.n	8002272 <HAL_SPI_Receive_DMA+0xec>
 80021d0:	2a00      	cmp	r2, #0
 80021d2:	d050      	beq.n	8002276 <HAL_SPI_Receive_DMA+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80021d4:	2304      	movs	r3, #4
 80021d6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021da:	2300      	movs	r3, #0
 80021dc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80021de:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80021e0:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80021e2:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80021e4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021e6:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80021e8:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80021ea:	86e3      	strh	r3, [r4, #54]	; 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021ec:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80021f0:	d025      	beq.n	800223e <HAL_SPI_Receive_DMA+0xb8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80021f2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80021f4:	f242 2383 	movw	r3, #8835	; 0x2283
 80021f8:	f6c0 0300 	movt	r3, #2048	; 0x800
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80021fe:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002200:	f242 23bd 	movw	r3, #8893	; 0x22bd
 8002204:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002208:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800220a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800220c:	f242 239b 	movw	r3, #8859	; 0x229b
 8002210:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002214:	64d3      	str	r3, [r2, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8002216:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002218:	2200      	movs	r2, #0
 800221a:	651a      	str	r2, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800221c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800221e:	6821      	ldr	r1, [r4, #0]
 8002220:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002222:	310c      	adds	r1, #12
 8002224:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002226:	f7fe ffc4 	bl	80011b2 <HAL_DMA_Start_IT>
 800222a:	4603      	mov	r3, r0
 800222c:	b168      	cbz	r0, 800224a <HAL_SPI_Receive_DMA+0xc4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800222e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002230:	f043 0310 	orr.w	r3, r3, #16
 8002234:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8002236:	2301      	movs	r3, #1
 8002238:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 800223c:	e7b8      	b.n	80021b0 <HAL_SPI_Receive_DMA+0x2a>
    SPI_1LINE_RX(hspi);
 800223e:	6822      	ldr	r2, [r4, #0]
 8002240:	6813      	ldr	r3, [r2, #0]
 8002242:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	e7d3      	b.n	80021f2 <HAL_SPI_Receive_DMA+0x6c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800224a:	6822      	ldr	r2, [r4, #0]
 800224c:	6811      	ldr	r1, [r2, #0]
 800224e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002252:	d103      	bne.n	800225c <HAL_SPI_Receive_DMA+0xd6>
    __HAL_SPI_ENABLE(hspi);
 8002254:	6811      	ldr	r1, [r2, #0]
 8002256:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800225a:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800225c:	6821      	ldr	r1, [r4, #0]
 800225e:	684a      	ldr	r2, [r1, #4]
 8002260:	f042 0220 	orr.w	r2, r2, #32
 8002264:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002266:	6821      	ldr	r1, [r4, #0]
 8002268:	684a      	ldr	r2, [r1, #4]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	604a      	str	r2, [r1, #4]
 8002270:	e79e      	b.n	80021b0 <HAL_SPI_Receive_DMA+0x2a>
    errorcode = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e79c      	b.n	80021b0 <HAL_SPI_Receive_DMA+0x2a>
 8002276:	2301      	movs	r3, #1
 8002278:	e79a      	b.n	80021b0 <HAL_SPI_Receive_DMA+0x2a>
  __HAL_LOCK(hspi);
 800227a:	2302      	movs	r3, #2
 800227c:	e79b      	b.n	80021b6 <HAL_SPI_Receive_DMA+0x30>

0800227e <HAL_SPI_TxRxCpltCallback>:
}
 800227e:	4770      	bx	lr

08002280 <HAL_SPI_RxHalfCpltCallback>:
}
 8002280:	4770      	bx	lr

08002282 <SPI_DMAHalfReceiveCplt>:
{
 8002282:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002284:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002286:	f7ff fffb 	bl	8002280 <HAL_SPI_RxHalfCpltCallback>
}
 800228a:	bd08      	pop	{r3, pc}

0800228c <HAL_SPI_TxRxHalfCpltCallback>:
}
 800228c:	4770      	bx	lr

0800228e <SPI_DMAHalfTransmitReceiveCplt>:
{
 800228e:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002290:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002292:	f7ff fffb 	bl	800228c <HAL_SPI_TxRxHalfCpltCallback>
}
 8002296:	bd08      	pop	{r3, pc}

08002298 <HAL_SPI_ErrorCallback>:
}
 8002298:	4770      	bx	lr

0800229a <SPI_DMAError>:
{
 800229a:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800229c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800229e:	6802      	ldr	r2, [r0, #0]
 80022a0:	6853      	ldr	r3, [r2, #4]
 80022a2:	f023 0303 	bic.w	r3, r3, #3
 80022a6:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80022a8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80022aa:	f043 0310 	orr.w	r3, r3, #16
 80022ae:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80022b0:	2301      	movs	r3, #1
 80022b2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 80022b6:	f7ff ffef 	bl	8002298 <HAL_SPI_ErrorCallback>
}
 80022ba:	bd08      	pop	{r3, pc}

080022bc <SPI_DMAReceiveCplt>:
{
 80022bc:	b538      	push	{r3, r4, r5, lr}
 80022be:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80022c0:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 80022c2:	f7fe fe40 	bl	8000f46 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80022c6:	682b      	ldr	r3, [r5, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f413 7f80 	tst.w	r3, #256	; 0x100
 80022ce:	d11e      	bne.n	800230e <SPI_DMAReceiveCplt+0x52>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80022d0:	6821      	ldr	r1, [r4, #0]
 80022d2:	684b      	ldr	r3, [r1, #4]
 80022d4:	f023 0320 	bic.w	r3, r3, #32
 80022d8:	604b      	str	r3, [r1, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80022da:	68a3      	ldr	r3, [r4, #8]
 80022dc:	b91b      	cbnz	r3, 80022e6 <SPI_DMAReceiveCplt+0x2a>
 80022de:	6863      	ldr	r3, [r4, #4]
 80022e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022e4:	d017      	beq.n	8002316 <SPI_DMAReceiveCplt+0x5a>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80022e6:	6822      	ldr	r2, [r4, #0]
 80022e8:	6853      	ldr	r3, [r2, #4]
 80022ea:	f023 0301 	bic.w	r3, r3, #1
 80022ee:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80022f0:	4602      	mov	r2, r0
 80022f2:	2164      	movs	r1, #100	; 0x64
 80022f4:	4620      	mov	r0, r4
 80022f6:	f7ff fe08 	bl	8001f0a <SPI_EndRxTransaction>
 80022fa:	b108      	cbz	r0, 8002300 <SPI_DMAReceiveCplt+0x44>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022fc:	2320      	movs	r3, #32
 80022fe:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002304:	2301      	movs	r3, #1
 8002306:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800230a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800230c:	b94b      	cbnz	r3, 8002322 <SPI_DMAReceiveCplt+0x66>
  HAL_SPI_RxCpltCallback(hspi);
 800230e:	4620      	mov	r0, r4
 8002310:	f7fe faad 	bl	800086e <HAL_SPI_RxCpltCallback>
}
 8002314:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002316:	6822      	ldr	r2, [r4, #0]
 8002318:	6853      	ldr	r3, [r2, #4]
 800231a:	f023 0303 	bic.w	r3, r3, #3
 800231e:	6053      	str	r3, [r2, #4]
 8002320:	e7e6      	b.n	80022f0 <SPI_DMAReceiveCplt+0x34>
      HAL_SPI_ErrorCallback(hspi);
 8002322:	4620      	mov	r0, r4
 8002324:	f7ff ffb8 	bl	8002298 <HAL_SPI_ErrorCallback>
      return;
 8002328:	e7f4      	b.n	8002314 <SPI_DMAReceiveCplt+0x58>

0800232a <SPI_DMATransmitReceiveCplt>:
{
 800232a:	b538      	push	{r3, r4, r5, lr}
 800232c:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800232e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8002330:	f7fe fe09 	bl	8000f46 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002334:	682b      	ldr	r3, [r5, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f413 7f80 	tst.w	r3, #256	; 0x100
 800233c:	d11b      	bne.n	8002376 <SPI_DMATransmitReceiveCplt+0x4c>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800233e:	6822      	ldr	r2, [r4, #0]
 8002340:	6853      	ldr	r3, [r2, #4]
 8002342:	f023 0320 	bic.w	r3, r3, #32
 8002346:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002348:	4602      	mov	r2, r0
 800234a:	2164      	movs	r1, #100	; 0x64
 800234c:	4620      	mov	r0, r4
 800234e:	f7ff fda6 	bl	8001e9e <SPI_EndRxTxTransaction>
 8002352:	b118      	cbz	r0, 800235c <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002354:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002356:	f043 0320 	orr.w	r3, r3, #32
 800235a:	6563      	str	r3, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800235c:	6822      	ldr	r2, [r4, #0]
 800235e:	6853      	ldr	r3, [r2, #4]
 8002360:	f023 0303 	bic.w	r3, r3, #3
 8002364:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800236a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800236c:	2301      	movs	r3, #1
 800236e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002372:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002374:	b91b      	cbnz	r3, 800237e <SPI_DMATransmitReceiveCplt+0x54>
  HAL_SPI_TxRxCpltCallback(hspi);
 8002376:	4620      	mov	r0, r4
 8002378:	f7ff ff81 	bl	800227e <HAL_SPI_TxRxCpltCallback>
}
 800237c:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800237e:	4620      	mov	r0, r4
 8002380:	f7ff ff8a 	bl	8002298 <HAL_SPI_ErrorCallback>
      return;
 8002384:	e7fa      	b.n	800237c <SPI_DMATransmitReceiveCplt+0x52>
	...

08002388 <__libc_init_array>:
 8002388:	b570      	push	{r4, r5, r6, lr}
 800238a:	4e0d      	ldr	r6, [pc, #52]	; (80023c0 <__libc_init_array+0x38>)
 800238c:	4c0d      	ldr	r4, [pc, #52]	; (80023c4 <__libc_init_array+0x3c>)
 800238e:	1ba4      	subs	r4, r4, r6
 8002390:	10a4      	asrs	r4, r4, #2
 8002392:	2500      	movs	r5, #0
 8002394:	42a5      	cmp	r5, r4
 8002396:	d109      	bne.n	80023ac <__libc_init_array+0x24>
 8002398:	4e0b      	ldr	r6, [pc, #44]	; (80023c8 <__libc_init_array+0x40>)
 800239a:	4c0c      	ldr	r4, [pc, #48]	; (80023cc <__libc_init_array+0x44>)
 800239c:	f000 f820 	bl	80023e0 <_init>
 80023a0:	1ba4      	subs	r4, r4, r6
 80023a2:	10a4      	asrs	r4, r4, #2
 80023a4:	2500      	movs	r5, #0
 80023a6:	42a5      	cmp	r5, r4
 80023a8:	d105      	bne.n	80023b6 <__libc_init_array+0x2e>
 80023aa:	bd70      	pop	{r4, r5, r6, pc}
 80023ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023b0:	4798      	blx	r3
 80023b2:	3501      	adds	r5, #1
 80023b4:	e7ee      	b.n	8002394 <__libc_init_array+0xc>
 80023b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023ba:	4798      	blx	r3
 80023bc:	3501      	adds	r5, #1
 80023be:	e7f2      	b.n	80023a6 <__libc_init_array+0x1e>
 80023c0:	08002418 	.word	0x08002418
 80023c4:	08002418 	.word	0x08002418
 80023c8:	08002418 	.word	0x08002418
 80023cc:	0800241c 	.word	0x0800241c

080023d0 <memset>:
 80023d0:	4402      	add	r2, r0
 80023d2:	4603      	mov	r3, r0
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d100      	bne.n	80023da <memset+0xa>
 80023d8:	4770      	bx	lr
 80023da:	f803 1b01 	strb.w	r1, [r3], #1
 80023de:	e7f9      	b.n	80023d4 <memset+0x4>

080023e0 <_init>:
 80023e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e2:	bf00      	nop
 80023e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023e6:	bc08      	pop	{r3}
 80023e8:	469e      	mov	lr, r3
 80023ea:	4770      	bx	lr

080023ec <_fini>:
 80023ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ee:	bf00      	nop
 80023f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023f2:	bc08      	pop	{r3}
 80023f4:	469e      	mov	lr, r3
 80023f6:	4770      	bx	lr
