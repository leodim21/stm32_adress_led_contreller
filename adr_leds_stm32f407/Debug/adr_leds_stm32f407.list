
adr_leds_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001f98  08001f98  00011f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fb0  08001fb0  00025e00  2**0
                  CONTENTS
  4 .ARM          00000008  08001fb0  08001fb0  00011fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001fb8  08001fb8  00025e00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fb8  08001fb8  00011fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fbc  08001fbc  00011fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00005e00  20000000  08001fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ea8  20005e00  08007dc0  00025e00  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  2000bca8  08007dc0  0002bca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025e00  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e8f  00000000  00000000  00025e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b81  00000000  00000000  0002fcbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000035dd  00000000  00000000  00031840  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000005d0  00000000  00000000  00034e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009c8  00000000  00000000  000353f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001fe1c  00000000  00000000  00035db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00006b25  00000000  00000000  00055bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000c0d7c  00000000  00000000  0005c6f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0011d475  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001138  00000000  00000000  0011d4f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20005e00 	.word	0x20005e00
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001f80 	.word	0x08001f80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20005e04 	.word	0x20005e04
 80001c4:	08001f80 	.word	0x08001f80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ca:	2400      	movs	r4, #0
{
 80004cc:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d2:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80004d6:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004da:	4a1d      	ldr	r2, [pc, #116]	; (8000550 <SystemClock_Config+0x88>)
 80004dc:	9401      	str	r4, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004de:	9403      	str	r4, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e0:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e2:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <SystemClock_Config+0x8c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80004e8:	6411      	str	r1, [r2, #64]	; 0x40
 80004ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80004ec:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80004f0:	9201      	str	r2, [sp, #4]
 80004f2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f4:	9402      	str	r4, [sp, #8]
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000500:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000506:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000508:	220a      	movs	r2, #10
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050a:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800050c:	2010      	movs	r0, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050e:	2502      	movs	r5, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000510:	9902      	ldr	r1, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000512:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000514:	2108      	movs	r1, #8
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000516:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000518:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 168;
 800051a:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051c:	900c      	str	r0, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800051e:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000520:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000522:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000524:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000526:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000528:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800052a:	9512      	str	r5, [sp, #72]	; 0x48
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052c:	260f      	movs	r6, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052e:	f000 ffdd 	bl	80014ec <HAL_RCC_OscConfig>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000532:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000536:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800053a:	a803      	add	r0, sp, #12
 800053c:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053e:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000540:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000542:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000544:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000548:	f001 f9e4 	bl	8001914 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800054c:	b014      	add	sp, #80	; 0x50
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	40023800 	.word	0x40023800
 8000554:	40007000 	.word	0x40007000

08000558 <LED_SendData>:
	TIM8->BDTR|= TIM_BDTR_MOE;     		//MOE: Main output enable
	TIM8->CR1 &= ~TIM_CR1_CEN; 			//Bit 0 CEN: Counter enable
}

void LED_SendData( uint16_t data_len )
{
 8000558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!((TIM1->CR1 & TIM_CR1_CEN)||(TIM4->CR1 & TIM_CR1_CEN)))
 800055c:	4c55      	ldr	r4, [pc, #340]	; (80006b4 <LED_SendData+0x15c>)
 800055e:	6823      	ldr	r3, [r4, #0]
 8000560:	07db      	lsls	r3, r3, #31
{
 8000562:	b083      	sub	sp, #12
	if (!((TIM1->CR1 & TIM_CR1_CEN)||(TIM4->CR1 & TIM_CR1_CEN)))
 8000564:	d404      	bmi.n	8000570 <LED_SendData+0x18>
 8000566:	4b54      	ldr	r3, [pc, #336]	; (80006b8 <LED_SendData+0x160>)
 8000568:	681d      	ldr	r5, [r3, #0]
 800056a:	f015 0501 	ands.w	r5, r5, #1
 800056e:	d002      	beq.n	8000576 <LED_SendData+0x1e>
		TIM8->CCR4 = local.pulse[(0x80 & local.data_buf[7][local.byte_count] << local.bit_count) >> 7];

		TIM1->CR1 |= TIM_CR1_CEN;
		TIM8->CR1 |= TIM_CR1_CEN;
	}
}
 8000570:	b003      	add	sp, #12
 8000572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(local.buff_s.data_buf, add_leds_buff.data_buf, data_len);
 8000576:	4b51      	ldr	r3, [pc, #324]	; (80006bc <LED_SendData+0x164>)
 8000578:	4951      	ldr	r1, [pc, #324]	; (80006c0 <LED_SendData+0x168>)
		local.data_buf[2] = local.buff_s.led_data.line3;
 800057a:	f8df 9150 	ldr.w	r9, [pc, #336]	; 80006cc <LED_SendData+0x174>
		local.data_buf[6] = local.buff_s.led_data.line7;
 800057e:	f8df b150 	ldr.w	fp, [pc, #336]	; 80006d0 <LED_SendData+0x178>
 8000582:	4606      	mov	r6, r0
		memcpy(local.buff_s.data_buf, add_leds_buff.data_buf, data_len);
 8000584:	4632      	mov	r2, r6
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fce6 	bl	8001f58 <memcpy>
		local.data_len = data_len/8;
 800058c:	08f6      	lsrs	r6, r6, #3
		memcpy(local.buff_s.data_buf, add_leds_buff.data_buf, data_len);
 800058e:	4603      	mov	r3, r0
		local.data_len = data_len/8;
 8000590:	9601      	str	r6, [sp, #4]
		local.data_buf[0] = local.buff_s.led_data.line1;
 8000592:	f645 56c4 	movw	r6, #24004	; 0x5dc4
		local.data_buf[1] = local.buff_s.led_data.line2;
 8000596:	f645 5ac8 	movw	sl, #24008	; 0x5dc8
		local.data_buf[0] = local.buff_s.led_data.line1;
 800059a:	519b      	str	r3, [r3, r6]
		local.data_buf[1] = local.buff_s.led_data.line2;
 800059c:	f603 36b8 	addw	r6, r3, #3000	; 0xbb8
 80005a0:	f843 600a 	str.w	r6, [r3, sl]
		local.data_buf[3] = local.buff_s.led_data.line4;
 80005a4:	f609 38b8 	addw	r8, r9, #3000	; 0xbb8
		local.data_buf[2] = local.buff_s.led_data.line3;
 80005a8:	f645 5acc 	movw	sl, #24012	; 0x5dcc
		TIM8->CCR1 = local.pulse[(0x80 & local.data_buf[4][local.byte_count] << local.bit_count) >> 7];
 80005ac:	f608 32b8 	addw	r2, r8, #3000	; 0xbb8
		local.data_buf[2] = local.buff_s.led_data.line3;
 80005b0:	f843 900a 	str.w	r9, [r3, sl]
		TIM1->CCR3 = local.pulse[(0x80 & local.data_buf[2][local.byte_count] << local.bit_count) >> 7];
 80005b4:	f899 c000 	ldrb.w	ip, [r9]
		TIM1->CCR4 = local.pulse[(0x80 & local.data_buf[3][local.byte_count] << local.bit_count) >> 7];
 80005b8:	f899 7bb8 	ldrb.w	r7, [r9, #3000]	; 0xbb8
		TIM8->CCR2 = local.pulse[(0x80 & local.data_buf[5][local.byte_count] << local.bit_count) >> 7];
 80005bc:	f892 1bb8 	ldrb.w	r1, [r2, #3000]	; 0xbb8
		TIM8->CCR3 = local.pulse[(0x80 & local.data_buf[6][local.byte_count] << local.bit_count) >> 7];
 80005c0:	f89b 2000 	ldrb.w	r2, [fp]
		TIM8->CCR1 = local.pulse[(0x80 & local.data_buf[4][local.byte_count] << local.bit_count) >> 7];
 80005c4:	f898 0bb8 	ldrb.w	r0, [r8, #3000]	; 0xbb8
		TIM1->CCR1 = local.pulse[(0x80 & local.data_buf[0][local.byte_count] << local.bit_count) >> 7];
 80005c8:	f893 e000 	ldrb.w	lr, [r3]
		TIM1->CCR2 = local.pulse[(0x80 & local.data_buf[1][local.byte_count] << local.bit_count) >> 7];
 80005cc:	f893 6bb8 	ldrb.w	r6, [r3, #3000]	; 0xbb8
		local.data_buf[3] = local.buff_s.led_data.line4;
 80005d0:	f645 59d0 	movw	r9, #24016	; 0x5dd0
 80005d4:	f843 8009 	str.w	r8, [r3, r9]
		TIM1->CCR1 = local.pulse[(0x80 & local.data_buf[0][local.byte_count] << local.bit_count) >> 7];
 80005d8:	f642 68f0 	movw	r8, #12016	; 0x2ef0
		TIM8->CCR3 = local.pulse[(0x80 & local.data_buf[6][local.byte_count] << local.bit_count) >> 7];
 80005dc:	eb08 12d2 	add.w	r2, r8, r2, lsr #7
 80005e0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
		TIM1->CCR1 = local.pulse[(0x80 & local.data_buf[0][local.byte_count] << local.bit_count) >> 7];
 80005e4:	eb08 1ede 	add.w	lr, r8, lr, lsr #7
		local.data_buf[4] = local.buff_s.led_data.line5;
 80005e8:	f645 59d4 	movw	r9, #24020	; 0x5dd4
		TIM1->CCR3 = local.pulse[(0x80 & local.data_buf[2][local.byte_count] << local.bit_count) >> 7];
 80005ec:	eb08 1cdc 	add.w	ip, r8, ip, lsr #7
		TIM1->CCR4 = local.pulse[(0x80 & local.data_buf[3][local.byte_count] << local.bit_count) >> 7];
 80005f0:	eb08 17d7 	add.w	r7, r8, r7, lsr #7
		TIM8->CCR1 = local.pulse[(0x80 & local.data_buf[4][local.byte_count] << local.bit_count) >> 7];
 80005f4:	eb08 10d0 	add.w	r0, r8, r0, lsr #7
		TIM8->CCR2 = local.pulse[(0x80 & local.data_buf[5][local.byte_count] << local.bit_count) >> 7];
 80005f8:	eb08 11d1 	add.w	r1, r8, r1, lsr #7
		TIM1->CCR2 = local.pulse[(0x80 & local.data_buf[1][local.byte_count] << local.bit_count) >> 7];
 80005fc:	eb08 16d6 	add.w	r6, r8, r6, lsr #7
		TIM1->CCR1 = local.pulse[(0x80 & local.data_buf[0][local.byte_count] << local.bit_count) >> 7];
 8000600:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
		TIM8->CCR3 = local.pulse[(0x80 & local.data_buf[6][local.byte_count] << local.bit_count) >> 7];
 8000604:	f8b2 a006 	ldrh.w	sl, [r2, #6]
		local.data_buf[4] = local.buff_s.led_data.line5;
 8000608:	4a2e      	ldr	r2, [pc, #184]	; (80006c4 <LED_SendData+0x16c>)
 800060a:	f843 2009 	str.w	r2, [r3, r9]
		TIM1->CCR3 = local.pulse[(0x80 & local.data_buf[2][local.byte_count] << local.bit_count) >> 7];
 800060e:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
		TIM1->CCR4 = local.pulse[(0x80 & local.data_buf[3][local.byte_count] << local.bit_count) >> 7];
 8000612:	eb03 0747 	add.w	r7, r3, r7, lsl #1
		TIM8->CCR1 = local.pulse[(0x80 & local.data_buf[4][local.byte_count] << local.bit_count) >> 7];
 8000616:	eb03 0040 	add.w	r0, r3, r0, lsl #1
		TIM8->CCR2 = local.pulse[(0x80 & local.data_buf[5][local.byte_count] << local.bit_count) >> 7];
 800061a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
		TIM1->CCR2 = local.pulse[(0x80 & local.data_buf[1][local.byte_count] << local.bit_count) >> 7];
 800061e:	eb03 0646 	add.w	r6, r3, r6, lsl #1
		TIM1->CCR1 = local.pulse[(0x80 & local.data_buf[0][local.byte_count] << local.bit_count) >> 7];
 8000622:	f8be e006 	ldrh.w	lr, [lr, #6]
		TIM8->CCR2 = local.pulse[(0x80 & local.data_buf[5][local.byte_count] << local.bit_count) >> 7];
 8000626:	88c9      	ldrh	r1, [r1, #6]
		TIM1->CCR3 = local.pulse[(0x80 & local.data_buf[2][local.byte_count] << local.bit_count) >> 7];
 8000628:	f8bc c006 	ldrh.w	ip, [ip, #6]
		TIM1->CCR4 = local.pulse[(0x80 & local.data_buf[3][local.byte_count] << local.bit_count) >> 7];
 800062c:	88ff      	ldrh	r7, [r7, #6]
		TIM8->CCR1 = local.pulse[(0x80 & local.data_buf[4][local.byte_count] << local.bit_count) >> 7];
 800062e:	88c0      	ldrh	r0, [r0, #6]
		TIM1->CCR2 = local.pulse[(0x80 & local.data_buf[1][local.byte_count] << local.bit_count) >> 7];
 8000630:	88f6      	ldrh	r6, [r6, #6]
		TIM1->CCR1 = local.pulse[(0x80 & local.data_buf[0][local.byte_count] << local.bit_count) >> 7];
 8000632:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
		local.data_buf[5] = local.buff_s.led_data.line6;
 8000636:	f645 59d8 	movw	r9, #24024	; 0x5dd8
 800063a:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
		local.data_buf[6] = local.buff_s.led_data.line7;
 800063e:	f645 5edc 	movw	lr, #24028	; 0x5ddc
		local.data_buf[5] = local.buff_s.led_data.line6;
 8000642:	f843 2009 	str.w	r2, [r3, r9]
		TIM1->CCR2 = local.pulse[(0x80 & local.data_buf[1][local.byte_count] << local.bit_count) >> 7];
 8000646:	63a6      	str	r6, [r4, #56]	; 0x38
		local.data_buf[7] = local.buff_s.led_data.line8;
 8000648:	f645 56e0 	movw	r6, #24032	; 0x5de0
		local.data_buf[6] = local.buff_s.led_data.line7;
 800064c:	f843 b00e 	str.w	fp, [r3, lr]
		local.data_buf[7] = local.buff_s.led_data.line8;
 8000650:	f60b 3eb8 	addw	lr, fp, #3000	; 0xbb8
 8000654:	f843 e006 	str.w	lr, [r3, r6]
		local.data_len = data_len/8;
 8000658:	f645 59e4 	movw	r9, #24036	; 0x5de4
		local.send_start = 1;
 800065c:	f645 56f2 	movw	r6, #24050	; 0x5df2
		TIM1->CCR3 = local.pulse[(0x80 & local.data_buf[2][local.byte_count] << local.bit_count) >> 7];
 8000660:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
		local.data_len = data_len/8;
 8000664:	9a01      	ldr	r2, [sp, #4]
 8000666:	f823 2009 	strh.w	r2, [r3, r9]
		local.send_start = 1;
 800066a:	f04f 0c01 	mov.w	ip, #1
 800066e:	f823 c006 	strh.w	ip, [r3, r6]
		local.bit_count = 0;
 8000672:	f645 59ea 	movw	r9, #24042	; 0x5dea
		TIM8->CCR1 = local.pulse[(0x80 & local.data_buf[4][local.byte_count] << local.bit_count) >> 7];
 8000676:	4e14      	ldr	r6, [pc, #80]	; (80006c8 <LED_SendData+0x170>)
		local.bit_count = 0;
 8000678:	f803 5009 	strb.w	r5, [r3, r9]
		local.byte_count = 0;
 800067c:	f645 5cec 	movw	ip, #24044	; 0x5dec
 8000680:	f823 500c 	strh.w	r5, [r3, ip]
		TIM1->CCR4 = local.pulse[(0x80 & local.data_buf[3][local.byte_count] << local.bit_count) >> 7];
 8000684:	6427      	str	r7, [r4, #64]	; 0x40
		TIM8->CCR1 = local.pulse[(0x80 & local.data_buf[4][local.byte_count] << local.bit_count) >> 7];
 8000686:	6370      	str	r0, [r6, #52]	; 0x34
		TIM8->CCR2 = local.pulse[(0x80 & local.data_buf[5][local.byte_count] << local.bit_count) >> 7];
 8000688:	63b1      	str	r1, [r6, #56]	; 0x38
		TIM8->CCR3 = local.pulse[(0x80 & local.data_buf[6][local.byte_count] << local.bit_count) >> 7];
 800068a:	f8c6 a03c 	str.w	sl, [r6, #60]	; 0x3c
		TIM8->CCR4 = local.pulse[(0x80 & local.data_buf[7][local.byte_count] << local.bit_count) >> 7];
 800068e:	f89b 2bb8 	ldrb.w	r2, [fp, #3000]	; 0xbb8
 8000692:	eb08 18d2 	add.w	r8, r8, r2, lsr #7
 8000696:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 800069a:	88db      	ldrh	r3, [r3, #6]
 800069c:	6433      	str	r3, [r6, #64]	; 0x40
		TIM1->CR1 |= TIM_CR1_CEN;
 800069e:	6823      	ldr	r3, [r4, #0]
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6023      	str	r3, [r4, #0]
		TIM8->CR1 |= TIM_CR1_CEN;
 80006a6:	6833      	ldr	r3, [r6, #0]
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6033      	str	r3, [r6, #0]
}
 80006ae:	b003      	add	sp, #12
 80006b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006b4:	40010000 	.word	0x40010000
 80006b8:	40000800 	.word	0x40000800
 80006bc:	20000000 	.word	0x20000000
 80006c0:	20005e1c 	.word	0x20005e1c
 80006c4:	20002ee0 	.word	0x20002ee0
 80006c8:	40010400 	.word	0x40010400
 80006cc:	20001770 	.word	0x20001770
 80006d0:	20004650 	.word	0x20004650

080006d4 <TIM1_UPD_Servo_Set>:
	TIM1->CR1 &= ~TIM_CR1_CEN;
	TIM8->CR1 &= ~TIM_CR1_CEN;
	local.send_start = 0;
}
void TIM1_UPD_Servo_Set( void )
{
 80006d4:	b4f0      	push	{r4, r5, r6, r7}
	if(local.bit_count++ > 6)
 80006d6:	4b4b      	ldr	r3, [pc, #300]	; (8000804 <TIM1_UPD_Servo_Set+0x130>)
 80006d8:	f645 50ea 	movw	r0, #24042	; 0x5dea
 80006dc:	f645 55ec 	movw	r5, #24044	; 0x5dec
 80006e0:	5c1c      	ldrb	r4, [r3, r0]
 80006e2:	5b59      	ldrh	r1, [r3, r5]
 80006e4:	1c62      	adds	r2, r4, #1
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	2c06      	cmp	r4, #6
 80006ea:	541a      	strb	r2, [r3, r0]
 80006ec:	d904      	bls.n	80006f8 <TIM1_UPD_Servo_Set+0x24>
	{
		local.bit_count = 0;
		local.byte_count++;
 80006ee:	3101      	adds	r1, #1
 80006f0:	b289      	uxth	r1, r1
		local.bit_count = 0;
 80006f2:	2200      	movs	r2, #0
		local.byte_count++;
 80006f4:	5359      	strh	r1, [r3, r5]
		local.bit_count = 0;
 80006f6:	541a      	strb	r2, [r3, r0]
	}
	TIM1->CCR1 = local.pulse[(0x80 & local.data_buf[0][local.byte_count] << local.bit_count) >> 7];
 80006f8:	f645 50c4 	movw	r0, #24004	; 0x5dc4
 80006fc:	f642 66f0 	movw	r6, #12016	; 0x2ef0
 8000700:	5818      	ldr	r0, [r3, r0]
 8000702:	4c41      	ldr	r4, [pc, #260]	; (8000808 <TIM1_UPD_Servo_Set+0x134>)
 8000704:	5c40      	ldrb	r0, [r0, r1]
	TIM1->CCR2 = local.pulse[(0x80 & local.data_buf[1][local.byte_count] << local.bit_count) >> 7];
	TIM1->CCR3 = local.pulse[(0x80 & local.data_buf[2][local.byte_count] << local.bit_count) >> 7];
	TIM1->CCR4 = local.pulse[(0x80 & local.data_buf[3][local.byte_count] << local.bit_count) >> 7];

	TIM8->CCR1 = local.pulse[(0x80 & local.data_buf[4][local.byte_count] << local.bit_count) >> 7];
 8000706:	4d41      	ldr	r5, [pc, #260]	; (800080c <TIM1_UPD_Servo_Set+0x138>)
	TIM1->CCR1 = local.pulse[(0x80 & local.data_buf[0][local.byte_count] << local.bit_count) >> 7];
 8000708:	4090      	lsls	r0, r2
 800070a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 800070e:	4430      	add	r0, r6
 8000710:	eb03 0040 	add.w	r0, r3, r0, lsl #1
	TIM1->CCR2 = local.pulse[(0x80 & local.data_buf[1][local.byte_count] << local.bit_count) >> 7];
 8000714:	f645 5cc8 	movw	ip, #24008	; 0x5dc8
	TIM1->CCR1 = local.pulse[(0x80 & local.data_buf[0][local.byte_count] << local.bit_count) >> 7];
 8000718:	88c7      	ldrh	r7, [r0, #6]
	TIM1->CCR2 = local.pulse[(0x80 & local.data_buf[1][local.byte_count] << local.bit_count) >> 7];
 800071a:	f853 000c 	ldr.w	r0, [r3, ip]
	TIM1->CCR1 = local.pulse[(0x80 & local.data_buf[0][local.byte_count] << local.bit_count) >> 7];
 800071e:	6367      	str	r7, [r4, #52]	; 0x34
	TIM1->CCR2 = local.pulse[(0x80 & local.data_buf[1][local.byte_count] << local.bit_count) >> 7];
 8000720:	5c40      	ldrb	r0, [r0, r1]
 8000722:	4090      	lsls	r0, r2
 8000724:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8000728:	4430      	add	r0, r6
 800072a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
	TIM1->CCR3 = local.pulse[(0x80 & local.data_buf[2][local.byte_count] << local.bit_count) >> 7];
 800072e:	f645 5ccc 	movw	ip, #24012	; 0x5dcc
	TIM1->CCR2 = local.pulse[(0x80 & local.data_buf[1][local.byte_count] << local.bit_count) >> 7];
 8000732:	88c7      	ldrh	r7, [r0, #6]
	TIM1->CCR3 = local.pulse[(0x80 & local.data_buf[2][local.byte_count] << local.bit_count) >> 7];
 8000734:	f853 000c 	ldr.w	r0, [r3, ip]
	TIM1->CCR2 = local.pulse[(0x80 & local.data_buf[1][local.byte_count] << local.bit_count) >> 7];
 8000738:	63a7      	str	r7, [r4, #56]	; 0x38
	TIM1->CCR3 = local.pulse[(0x80 & local.data_buf[2][local.byte_count] << local.bit_count) >> 7];
 800073a:	5c40      	ldrb	r0, [r0, r1]
 800073c:	4090      	lsls	r0, r2
 800073e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8000742:	4430      	add	r0, r6
 8000744:	eb03 0040 	add.w	r0, r3, r0, lsl #1
	TIM1->CCR4 = local.pulse[(0x80 & local.data_buf[3][local.byte_count] << local.bit_count) >> 7];
 8000748:	f645 5cd0 	movw	ip, #24016	; 0x5dd0
	TIM1->CCR3 = local.pulse[(0x80 & local.data_buf[2][local.byte_count] << local.bit_count) >> 7];
 800074c:	88c7      	ldrh	r7, [r0, #6]
	TIM1->CCR4 = local.pulse[(0x80 & local.data_buf[3][local.byte_count] << local.bit_count) >> 7];
 800074e:	f853 000c 	ldr.w	r0, [r3, ip]
	TIM1->CCR3 = local.pulse[(0x80 & local.data_buf[2][local.byte_count] << local.bit_count) >> 7];
 8000752:	63e7      	str	r7, [r4, #60]	; 0x3c
	TIM1->CCR4 = local.pulse[(0x80 & local.data_buf[3][local.byte_count] << local.bit_count) >> 7];
 8000754:	5c40      	ldrb	r0, [r0, r1]
 8000756:	4090      	lsls	r0, r2
 8000758:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 800075c:	4430      	add	r0, r6
 800075e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
	TIM8->CCR1 = local.pulse[(0x80 & local.data_buf[4][local.byte_count] << local.bit_count) >> 7];
 8000762:	f645 5cd4 	movw	ip, #24020	; 0x5dd4
	TIM1->CCR4 = local.pulse[(0x80 & local.data_buf[3][local.byte_count] << local.bit_count) >> 7];
 8000766:	88c7      	ldrh	r7, [r0, #6]
	TIM8->CCR1 = local.pulse[(0x80 & local.data_buf[4][local.byte_count] << local.bit_count) >> 7];
 8000768:	f853 000c 	ldr.w	r0, [r3, ip]
	TIM1->CCR4 = local.pulse[(0x80 & local.data_buf[3][local.byte_count] << local.bit_count) >> 7];
 800076c:	6427      	str	r7, [r4, #64]	; 0x40
	TIM8->CCR1 = local.pulse[(0x80 & local.data_buf[4][local.byte_count] << local.bit_count) >> 7];
 800076e:	5c40      	ldrb	r0, [r0, r1]
 8000770:	4090      	lsls	r0, r2
 8000772:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8000776:	4430      	add	r0, r6
 8000778:	eb03 0040 	add.w	r0, r3, r0, lsl #1
	TIM8->CCR2 = local.pulse[(0x80 & local.data_buf[5][local.byte_count] << local.bit_count) >> 7];
 800077c:	f645 5cd8 	movw	ip, #24024	; 0x5dd8
	TIM8->CCR1 = local.pulse[(0x80 & local.data_buf[4][local.byte_count] << local.bit_count) >> 7];
 8000780:	88c7      	ldrh	r7, [r0, #6]
	TIM8->CCR2 = local.pulse[(0x80 & local.data_buf[5][local.byte_count] << local.bit_count) >> 7];
 8000782:	f853 000c 	ldr.w	r0, [r3, ip]
	TIM8->CCR1 = local.pulse[(0x80 & local.data_buf[4][local.byte_count] << local.bit_count) >> 7];
 8000786:	636f      	str	r7, [r5, #52]	; 0x34
	TIM8->CCR2 = local.pulse[(0x80 & local.data_buf[5][local.byte_count] << local.bit_count) >> 7];
 8000788:	5c40      	ldrb	r0, [r0, r1]
 800078a:	4090      	lsls	r0, r2
 800078c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8000790:	4430      	add	r0, r6
 8000792:	eb03 0040 	add.w	r0, r3, r0, lsl #1
	TIM8->CCR3 = local.pulse[(0x80 & local.data_buf[6][local.byte_count] << local.bit_count) >> 7];
 8000796:	f645 5cdc 	movw	ip, #24028	; 0x5ddc
	TIM8->CCR2 = local.pulse[(0x80 & local.data_buf[5][local.byte_count] << local.bit_count) >> 7];
 800079a:	88c7      	ldrh	r7, [r0, #6]
	TIM8->CCR3 = local.pulse[(0x80 & local.data_buf[6][local.byte_count] << local.bit_count) >> 7];
 800079c:	f853 000c 	ldr.w	r0, [r3, ip]
	TIM8->CCR2 = local.pulse[(0x80 & local.data_buf[5][local.byte_count] << local.bit_count) >> 7];
 80007a0:	63af      	str	r7, [r5, #56]	; 0x38
	TIM8->CCR3 = local.pulse[(0x80 & local.data_buf[6][local.byte_count] << local.bit_count) >> 7];
 80007a2:	5c40      	ldrb	r0, [r0, r1]
 80007a4:	4090      	lsls	r0, r2
 80007a6:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80007aa:	4430      	add	r0, r6
 80007ac:	eb03 0040 	add.w	r0, r3, r0, lsl #1
	TIM8->CCR4 = local.pulse[(0x80 & local.data_buf[7][local.byte_count] << local.bit_count) >> 7];
 80007b0:	f645 5ce0 	movw	ip, #24032	; 0x5de0
	TIM8->CCR3 = local.pulse[(0x80 & local.data_buf[6][local.byte_count] << local.bit_count) >> 7];
 80007b4:	88c7      	ldrh	r7, [r0, #6]
	TIM8->CCR4 = local.pulse[(0x80 & local.data_buf[7][local.byte_count] << local.bit_count) >> 7];
 80007b6:	f853 000c 	ldr.w	r0, [r3, ip]
	TIM8->CCR3 = local.pulse[(0x80 & local.data_buf[6][local.byte_count] << local.bit_count) >> 7];
 80007ba:	63ef      	str	r7, [r5, #60]	; 0x3c
	TIM8->CCR4 = local.pulse[(0x80 & local.data_buf[7][local.byte_count] << local.bit_count) >> 7];
 80007bc:	5c40      	ldrb	r0, [r0, r1]
 80007be:	fa00 f202 	lsl.w	r2, r0, r2
 80007c2:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80007c6:	4432      	add	r2, r6
 80007c8:	eb03 0242 	add.w	r2, r3, r2, lsl #1

	( local.byte_count == local.data_len )?( TIM_SendEnd() ):( TIM1->CR1 |= TIM_CR1_CEN );
 80007cc:	f645 50e4 	movw	r0, #24036	; 0x5de4
	TIM8->CCR4 = local.pulse[(0x80 & local.data_buf[7][local.byte_count] << local.bit_count) >> 7];
 80007d0:	88d2      	ldrh	r2, [r2, #6]
 80007d2:	642a      	str	r2, [r5, #64]	; 0x40
	( local.byte_count == local.data_len )?( TIM_SendEnd() ):( TIM1->CR1 |= TIM_CR1_CEN );
 80007d4:	5a1a      	ldrh	r2, [r3, r0]
 80007d6:	428a      	cmp	r2, r1
 80007d8:	d005      	beq.n	80007e6 <TIM1_UPD_Servo_Set+0x112>
 80007da:	6823      	ldr	r3, [r4, #0]
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6023      	str	r3, [r4, #0]
}
 80007e2:	bcf0      	pop	{r4, r5, r6, r7}
 80007e4:	4770      	bx	lr
	TIM1->CR1 &= ~TIM_CR1_CEN;
 80007e6:	6822      	ldr	r2, [r4, #0]
 80007e8:	f022 0201 	bic.w	r2, r2, #1
 80007ec:	6022      	str	r2, [r4, #0]
	TIM8->CR1 &= ~TIM_CR1_CEN;
 80007ee:	682a      	ldr	r2, [r5, #0]
	local.send_start = 0;
 80007f0:	f645 51f2 	movw	r1, #24050	; 0x5df2
	TIM8->CR1 &= ~TIM_CR1_CEN;
 80007f4:	f022 0201 	bic.w	r2, r2, #1
	local.send_start = 0;
 80007f8:	2000      	movs	r0, #0
	TIM8->CR1 &= ~TIM_CR1_CEN;
 80007fa:	602a      	str	r2, [r5, #0]
	local.send_start = 0;
 80007fc:	5458      	strb	r0, [r3, r1]
}
 80007fe:	bcf0      	pop	{r4, r5, r6, r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000000 	.word	0x20000000
 8000808:	40010000 	.word	0x40010000
 800080c:	40010400 	.word	0x40010400

08000810 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback( SPI_HandleTypeDef *hspi )
{
 8000810:	b508      	push	{r3, lr}
	if (hspi == &hspi1)
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <HAL_SPI_RxCpltCallback+0x20>)
 8000814:	4283      	cmp	r3, r0
 8000816:	d000      	beq.n	800081a <HAL_SPI_RxCpltCallback+0xa>
	{
		HAL_SPI_Receive_DMA(&hspi1,add_leds_buff.data_buf, PIXELS_NUM*24);
		local.mem_buf_rd = 1;
	}
}
 8000818:	bd08      	pop	{r3, pc}
		HAL_SPI_Receive_DMA(&hspi1,add_leds_buff.data_buf, PIXELS_NUM*24);
 800081a:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800081e:	4905      	ldr	r1, [pc, #20]	; (8000834 <HAL_SPI_RxCpltCallback+0x24>)
 8000820:	f001 fa82 	bl	8001d28 <HAL_SPI_Receive_DMA>
		local.mem_buf_rd = 1;
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <HAL_SPI_RxCpltCallback+0x28>)
 8000826:	f645 53f3 	movw	r3, #24051	; 0x5df3
 800082a:	2101      	movs	r1, #1
 800082c:	54d1      	strb	r1, [r2, r3]
}
 800082e:	bd08      	pop	{r3, pc}
 8000830:	2000bbec 	.word	0x2000bbec
 8000834:	20005e1c 	.word	0x20005e1c
 8000838:	20000000 	.word	0x20000000

0800083c <Delay>:
void Delay( uint16_t ms )
{
	uint16_t tmp_ms = ms;
	while(tmp_ms--)
 800083c:	b180      	cbz	r0, 8000860 <Delay+0x24>
{
 800083e:	b570      	push	{r4, r5, r6, lr}
 8000840:	1e44      	subs	r4, r0, #1
	{
		HAL_Delay(1);
		HAL_IWDG_Refresh(&hiwdg);
 8000842:	4e08      	ldr	r6, [pc, #32]	; (8000864 <Delay+0x28>)
 8000844:	b2a4      	uxth	r4, r4
	while(tmp_ms--)
 8000846:	f64f 75ff 	movw	r5, #65535	; 0xffff
		HAL_Delay(1);
 800084a:	2001      	movs	r0, #1
	while(tmp_ms--)
 800084c:	3c01      	subs	r4, #1
		HAL_Delay(1);
 800084e:	f000 fae9 	bl	8000e24 <HAL_Delay>
	while(tmp_ms--)
 8000852:	b2a4      	uxth	r4, r4
		HAL_IWDG_Refresh(&hiwdg);
 8000854:	4630      	mov	r0, r6
 8000856:	f000 fe43 	bl	80014e0 <HAL_IWDG_Refresh>
	while(tmp_ms--)
 800085a:	42ac      	cmp	r4, r5
 800085c:	d1f5      	bne.n	800084a <Delay+0xe>
	}
}
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	2000bbe0 	.word	0x2000bbe0

08000868 <main>:
{
 8000868:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	2700      	movs	r7, #0
{
 800086c:	b088      	sub	sp, #32
  HAL_Init();
 800086e:	f000 faad 	bl	8000dcc <HAL_Init>
  SystemClock_Config();
 8000872:	f7ff fe29 	bl	80004c8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	e9cd 7704 	strd	r7, r7, [sp, #16]
 800087a:	e9cd 7706 	strd	r7, r7, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	4dae      	ldr	r5, [pc, #696]	; (8000b38 <main+0x2d0>)
 8000880:	9700      	str	r7, [sp, #0]
 8000882:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	48ad      	ldr	r0, [pc, #692]	; (8000b3c <main+0x2d4>)
  hspi1.Instance = SPI1;
 8000886:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 8000b68 <main+0x300>
  hiwdg.Instance = IWDG;
 800088a:	4cad      	ldr	r4, [pc, #692]	; (8000b40 <main+0x2d8>)
 800088c:	4ead      	ldr	r6, [pc, #692]	; (8000b44 <main+0x2dc>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000892:	632b      	str	r3, [r5, #48]	; 0x30
 8000894:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	9701      	str	r7, [sp, #4]
 80008a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	632b      	str	r3, [r5, #48]	; 0x30
 80008a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	9301      	str	r3, [sp, #4]
 80008b0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	9702      	str	r7, [sp, #8]
 80008b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80008b6:	f043 0302 	orr.w	r3, r3, #2
 80008ba:	632b      	str	r3, [r5, #48]	; 0x30
 80008bc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008be:	a908      	add	r1, sp, #32
 80008c0:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	f003 0302 	and.w	r3, r3, #2
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008c6:	f841 2d14 	str.w	r2, [r1, #-20]!
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	9302      	str	r3, [sp, #8]
 80008cc:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f000 fcd9 	bl	8001284 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008d2:	9703      	str	r7, [sp, #12]
 80008d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80008d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008da:	632b      	str	r3, [r5, #48]	; 0x30
 80008dc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80008de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008e2:	463a      	mov	r2, r7
 80008e4:	4639      	mov	r1, r7
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008e6:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008e8:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008ea:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008ec:	f000 fabe 	bl	8000e6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008f0:	2038      	movs	r0, #56	; 0x38
 80008f2:	f000 faf1 	bl	8000ed8 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 80008f6:	4994      	ldr	r1, [pc, #592]	; (8000b48 <main+0x2e0>)
 80008f8:	f8c8 1000 	str.w	r1, [r8]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008fc:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.CRCPolynomial = 10;
 8000900:	230a      	movs	r3, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000902:	4640      	mov	r0, r8
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000904:	f8c8 2018 	str.w	r2, [r8, #24]
  hspi1.Init.CRCPolynomial = 10;
 8000908:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800090c:	f8c8 7004 	str.w	r7, [r8, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000910:	e9c8 7702 	strd	r7, r7, [r8, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000914:	e9c8 7704 	strd	r7, r7, [r8, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000918:	e9c8 7708 	strd	r7, r7, [r8, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091c:	f8c8 7028 	str.w	r7, [r8, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000920:	f001 f93e 	bl	8001ba0 <HAL_SPI_Init>
  hiwdg.Instance = IWDG;
 8000924:	4a89      	ldr	r2, [pc, #548]	; (8000b4c <main+0x2e4>)
 8000926:	6022      	str	r2, [r4, #0]
  hiwdg.Init.Reload = 150;
 8000928:	2396      	movs	r3, #150	; 0x96
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800092a:	4620      	mov	r0, r4
  hiwdg.Init.Reload = 150;
 800092c:	60a3      	str	r3, [r4, #8]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800092e:	6067      	str	r7, [r4, #4]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000930:	f000 fdb2 	bl	8001498 <HAL_IWDG_Init>
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000934:	6b28      	ldr	r0, [r5, #48]	; 0x30
	GPIOE->AFR[1] |=  (1 << GPIO_AFRH_AFSEL9_Pos)
 8000936:	4a86      	ldr	r2, [pc, #536]	; (8000b50 <main+0x2e8>)
 8000938:	4986      	ldr	r1, [pc, #536]	; (8000b54 <main+0x2ec>)
	TIM1->CR1 |= TIM_CR1_ARPE;
 800093a:	4b87      	ldr	r3, [pc, #540]	; (8000b58 <main+0x2f0>)
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 800093c:	f040 0010 	orr.w	r0, r0, #16
 8000940:	6328      	str	r0, [r5, #48]	; 0x30
	GPIOE->AFR[1] |=  (1 << GPIO_AFRH_AFSEL9_Pos)
 8000942:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8000944:	4301      	orrs	r1, r0
 8000946:	6251      	str	r1, [r2, #36]	; 0x24
	GPIOE->MODER |= GPIO_MODER_MODER9_1
 8000948:	6811      	ldr	r1, [r2, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094a:	4884      	ldr	r0, [pc, #528]	; (8000b5c <main+0x2f4>)
 800094c:	f041 5122 	orr.w	r1, r1, #679477248	; 0x28800000
 8000950:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8000954:	6011      	str	r1, [r2, #0]
	GPIOE->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_0 | GPIO_OSPEEDER_OSPEEDR9_1
 8000956:	6891      	ldr	r1, [r2, #8]
 8000958:	f041 5173 	orr.w	r1, r1, #1019215872	; 0x3cc00000
 800095c:	f441 2140 	orr.w	r1, r1, #786432	; 0xc0000
 8000960:	6091      	str	r1, [r2, #8]
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000962:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000964:	f042 0201 	orr.w	r2, r2, #1
 8000968:	646a      	str	r2, [r5, #68]	; 0x44
	TIM1->CR1 |= TIM_CR1_ARPE;
 800096a:	681a      	ldr	r2, [r3, #0]
	TIM1->ARR = PERIOD_SYG;
 800096c:	f44f 7182 	mov.w	r1, #260	; 0x104
	TIM1->CR1 |= TIM_CR1_ARPE;
 8000970:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000974:	601a      	str	r2, [r3, #0]
	TIM1->PSC = 0;
 8000976:	629f      	str	r7, [r3, #40]	; 0x28
	TIM1->ARR = PERIOD_SYG;
 8000978:	62d9      	str	r1, [r3, #44]	; 0x2c
	TIM1->CCER |= TIM_CCER_CC1E;   	// Capture/Compare 1 output enable
 800097a:	6a1a      	ldr	r2, [r3, #32]
 800097c:	f042 0201 	orr.w	r2, r2, #1
 8000980:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC2E;   	// Capture/Compare 2 output enable
 8000982:	6a1a      	ldr	r2, [r3, #32]
 8000984:	f042 0210 	orr.w	r2, r2, #16
 8000988:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC3E;   	// Capture/Compare 2 output enable
 800098a:	6a1a      	ldr	r2, [r3, #32]
 800098c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000990:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC4E;   	// Capture/Compare 2 output enable
 8000992:	6a1a      	ldr	r2, [r3, #32]
 8000994:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000998:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 |= TIM_CCMR1_OC1PE;
 800099a:	699a      	ldr	r2, [r3, #24]
 800099c:	f042 0208 	orr.w	r2, r2, #8
 80009a0:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 80009a2:	699a      	ldr	r2, [r3, #24]
 80009a4:	f022 0210 	bic.w	r2, r2, #16
 80009a8:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC1M_1;
 80009aa:	699a      	ldr	r2, [r3, #24]
 80009ac:	f042 0220 	orr.w	r2, r2, #32
 80009b0:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC1M_2; 	//110: PWM mode 1
 80009b2:	699a      	ldr	r2, [r3, #24]
 80009b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009b8:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC2PE;
 80009ba:	699a      	ldr	r2, [r3, #24]
 80009bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009c0:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 &= ~TIM_CCMR1_OC2M_0;
 80009c2:	699a      	ldr	r2, [r3, #24]
 80009c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80009c8:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC2M_1;
 80009ca:	699a      	ldr	r2, [r3, #24]
 80009cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80009d0:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC2M_2; 	//110: PWM mode 1
 80009d2:	699a      	ldr	r2, [r3, #24]
 80009d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80009d8:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 |= TIM_CCMR2_OC3PE;
 80009da:	69da      	ldr	r2, [r3, #28]
 80009dc:	f042 0208 	orr.w	r2, r2, #8
 80009e0:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 &= ~TIM_CCMR2_OC3M_0;
 80009e2:	69da      	ldr	r2, [r3, #28]
 80009e4:	f022 0210 	bic.w	r2, r2, #16
 80009e8:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC3M_1;
 80009ea:	69da      	ldr	r2, [r3, #28]
 80009ec:	f042 0220 	orr.w	r2, r2, #32
 80009f0:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC3M_2; 	//110: PWM mode 1
 80009f2:	69da      	ldr	r2, [r3, #28]
 80009f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009f8:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC4PE;
 80009fa:	69da      	ldr	r2, [r3, #28]
 80009fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a00:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 &= ~TIM_CCMR2_OC4M_0;
 8000a02:	69da      	ldr	r2, [r3, #28]
 8000a04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a08:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC4M_1;
 8000a0a:	69da      	ldr	r2, [r3, #28]
 8000a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000a10:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC4M_2; 	//110: PWM mode 1
 8000a12:	69da      	ldr	r2, [r3, #28]
 8000a14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a18:	61da      	str	r2, [r3, #28]
 8000a1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a1e:	6002      	str	r2, [r0, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	2210      	movs	r2, #16
 8000a22:	f880 2319 	strb.w	r2, [r0, #793]	; 0x319
	TIM1->DIER |= TIM_DIER_UIE;
 8000a26:	68d8      	ldr	r0, [r3, #12]
	GPIOC->AFR[0] |=  (3 << GPIO_AFRL_AFSEL6_Pos)
 8000a28:	4a4d      	ldr	r2, [pc, #308]	; (8000b60 <main+0x2f8>)
	TIM1->DIER |= TIM_DIER_UIE;
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	60d8      	str	r0, [r3, #12]
	TIM1->BDTR|= TIM_BDTR_MOE;     		//MOE: Main output enable
 8000a30:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8000a32:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8000a36:	6458      	str	r0, [r3, #68]	; 0x44
	TIM1->CR1 &= ~TIM_CR1_CEN; 			//Bit 0 CEN: Counter enable
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	f020 0001 	bic.w	r0, r0, #1
 8000a3e:	6018      	str	r0, [r3, #0]
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000a40:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8000a42:	f040 0004 	orr.w	r0, r0, #4
 8000a46:	6328      	str	r0, [r5, #48]	; 0x30
	GPIOC->AFR[0] |=  (3 << GPIO_AFRL_AFSEL6_Pos)
 8000a48:	6a10      	ldr	r0, [r2, #32]
 8000a4a:	f040 504c 	orr.w	r0, r0, #855638016	; 0x33000000
 8000a4e:	6210      	str	r0, [r2, #32]
	GPIOC->AFR[1] |=  (3 << GPIO_AFRH_AFSEL8_Pos)
 8000a50:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8000a52:	f040 0033 	orr.w	r0, r0, #51	; 0x33
 8000a56:	6250      	str	r0, [r2, #36]	; 0x24
	GPIOC->MODER |= GPIO_MODER_MODER6_1
 8000a58:	6810      	ldr	r0, [r2, #0]
 8000a5a:	f440 202a 	orr.w	r0, r0, #696320	; 0xaa000
 8000a5e:	6010      	str	r0, [r2, #0]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_0 | GPIO_OSPEEDER_OSPEEDR6_1
 8000a60:	6890      	ldr	r0, [r2, #8]
 8000a62:	f440 207f 	orr.w	r0, r0, #1044480	; 0xff000
 8000a66:	6090      	str	r0, [r2, #8]
	RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 8000a68:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  memset( add_leds_buff.data_buf, 0x55, PIXELS_NUM*24 );
 8000a6a:	483e      	ldr	r0, [pc, #248]	; (8000b64 <main+0x2fc>)
	TIM8->CR1 |= TIM_CR1_ARPE;
 8000a6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
	RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 8000a70:	f042 0202 	orr.w	r2, r2, #2
 8000a74:	646a      	str	r2, [r5, #68]	; 0x44
	TIM8->CR1 |= TIM_CR1_ARPE;
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a7c:	601a      	str	r2, [r3, #0]
	TIM8->PSC = 0;
 8000a7e:	629f      	str	r7, [r3, #40]	; 0x28
	TIM8->ARR = PERIOD_SYG;
 8000a80:	62d9      	str	r1, [r3, #44]	; 0x2c
	TIM8->CCER |= TIM_CCER_CC1E;   	// Capture/Compare 1 output enable
 8000a82:	6a1a      	ldr	r2, [r3, #32]
 8000a84:	f042 0201 	orr.w	r2, r2, #1
 8000a88:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC2E;   	// Capture/Compare 2 output enable
 8000a8a:	6a1a      	ldr	r2, [r3, #32]
 8000a8c:	f042 0210 	orr.w	r2, r2, #16
 8000a90:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC3E;   	// Capture/Compare 2 output enable
 8000a92:	6a1a      	ldr	r2, [r3, #32]
 8000a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a98:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC4E;   	// Capture/Compare 2 output enable
 8000a9a:	6a1a      	ldr	r2, [r3, #32]
 8000a9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000aa0:	621a      	str	r2, [r3, #32]
	TIM8->CCMR1 |= TIM_CCMR1_OC1PE;
 8000aa2:	699a      	ldr	r2, [r3, #24]
 8000aa4:	f042 0208 	orr.w	r2, r2, #8
 8000aa8:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8000aaa:	699a      	ldr	r2, [r3, #24]
 8000aac:	f022 0210 	bic.w	r2, r2, #16
 8000ab0:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC1M_1;
 8000ab2:	699a      	ldr	r2, [r3, #24]
 8000ab4:	f042 0220 	orr.w	r2, r2, #32
 8000ab8:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC1M_2; 	//110: PWM mode 1
 8000aba:	699a      	ldr	r2, [r3, #24]
 8000abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ac0:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC2PE;
 8000ac2:	699a      	ldr	r2, [r3, #24]
 8000ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ac8:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 &= ~TIM_CCMR1_OC2M_0;
 8000aca:	699a      	ldr	r2, [r3, #24]
 8000acc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ad0:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC2M_1;
 8000ad2:	699a      	ldr	r2, [r3, #24]
 8000ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ad8:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC2M_2; 	//110: PWM mode 1
 8000ada:	699a      	ldr	r2, [r3, #24]
 8000adc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ae0:	619a      	str	r2, [r3, #24]
	TIM8->CCMR2 |= TIM_CCMR2_OC3PE;
 8000ae2:	69da      	ldr	r2, [r3, #28]
 8000ae4:	f042 0208 	orr.w	r2, r2, #8
 8000ae8:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 &= ~TIM_CCMR2_OC3M_0;
 8000aea:	69da      	ldr	r2, [r3, #28]
 8000aec:	f022 0210 	bic.w	r2, r2, #16
 8000af0:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC3M_1;
 8000af2:	69da      	ldr	r2, [r3, #28]
 8000af4:	f042 0220 	orr.w	r2, r2, #32
 8000af8:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC3M_2; 	//110: PWM mode 1
 8000afa:	69da      	ldr	r2, [r3, #28]
 8000afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b00:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC4PE;
 8000b02:	69da      	ldr	r2, [r3, #28]
 8000b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b08:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 &= ~TIM_CCMR2_OC4M_0;
 8000b0a:	69da      	ldr	r2, [r3, #28]
 8000b0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000b10:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC4M_1;
 8000b12:	69da      	ldr	r2, [r3, #28]
 8000b14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b18:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC4M_2; 	//110: PWM mode 1
 8000b1a:	69da      	ldr	r2, [r3, #28]
 8000b1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b20:	61da      	str	r2, [r3, #28]
	TIM8->BDTR|= TIM_BDTR_MOE;     		//MOE: Main output enable
 8000b22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b28:	645a      	str	r2, [r3, #68]	; 0x44
	TIM8->CR1 &= ~TIM_CR1_CEN; 			//Bit 0 CEN: Counter enable
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	f022 0201 	bic.w	r2, r2, #1
 8000b30:	601a      	str	r2, [r3, #0]
  memset( add_leds_buff.data_buf, 0x55, PIXELS_NUM*24 );
 8000b32:	2155      	movs	r1, #85	; 0x55
 8000b34:	e01a      	b.n	8000b6c <main+0x304>
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	2000bbe0 	.word	0x2000bbe0
 8000b44:	20005df3 	.word	0x20005df3
 8000b48:	40013000 	.word	0x40013000
 8000b4c:	40003000 	.word	0x40003000
 8000b50:	40021000 	.word	0x40021000
 8000b54:	01101010 	.word	0x01101010
 8000b58:	40010000 	.word	0x40010000
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	40020800 	.word	0x40020800
 8000b64:	20005e1c 	.word	0x20005e1c
 8000b68:	2000bbec 	.word	0x2000bbec
 8000b6c:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000b70:	f001 f9fd 	bl	8001f6e <memset>
  HAL_SPI_Receive_DMA(&hspi1,add_leds_buff.data_buf, PIXELS_NUM*24);
 8000b74:	4640      	mov	r0, r8
 8000b76:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000b7a:	4911      	ldr	r1, [pc, #68]	; (8000bc0 <main+0x358>)
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000b7c:	f5a5 5560 	sub.w	r5, r5, #14336	; 0x3800
  HAL_SPI_Receive_DMA(&hspi1,add_leds_buff.data_buf, PIXELS_NUM*24);
 8000b80:	f001 f8d2 	bl	8001d28 <HAL_SPI_Receive_DMA>
 8000b84:	e001      	b.n	8000b8a <main+0x322>
		if(local.mem_buf_rd)
 8000b86:	7833      	ldrb	r3, [r6, #0]
 8000b88:	b993      	cbnz	r3, 8000bb0 <main+0x348>
		HAL_IWDG_Refresh(&hiwdg);
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	f000 fca8 	bl	80014e0 <HAL_IWDG_Refresh>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000b90:	2101      	movs	r1, #1
 8000b92:	4628      	mov	r0, r5
 8000b94:	f000 fc7a 	bl	800148c <HAL_GPIO_ReadPin>
 8000b98:	2800      	cmp	r0, #0
 8000b9a:	d0f4      	beq.n	8000b86 <main+0x31e>
			LED_SendData(PIXELS_NUM*24);
 8000b9c:	f645 50c0 	movw	r0, #24000	; 0x5dc0
 8000ba0:	f7ff fcda 	bl	8000558 <LED_SendData>
			Delay(200);
 8000ba4:	20c8      	movs	r0, #200	; 0xc8
 8000ba6:	f7ff fe49 	bl	800083c <Delay>
		if(local.mem_buf_rd)
 8000baa:	7833      	ldrb	r3, [r6, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0ec      	beq.n	8000b8a <main+0x322>
			Delay(2);
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f7ff fe43 	bl	800083c <Delay>
			LED_SendData(PIXELS_NUM*24);
 8000bb6:	f645 50c0 	movw	r0, #24000	; 0x5dc0
 8000bba:	f7ff fccd 	bl	8000558 <LED_SendData>
 8000bbe:	e7e4      	b.n	8000b8a <main+0x322>
 8000bc0:	20005e1c 	.word	0x20005e1c

08000bc4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_MspInit+0x34>)
 8000bcc:	2100      	movs	r1, #0
 8000bce:	9100      	str	r1, [sp, #0]
 8000bd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bd6:	645a      	str	r2, [r3, #68]	; 0x44
 8000bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bda:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000bde:	9200      	str	r2, [sp, #0]
 8000be0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be2:	9101      	str	r1, [sp, #4]
 8000be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000be6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bea:	641a      	str	r2, [r3, #64]	; 0x40
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	9301      	str	r3, [sp, #4]
 8000bf4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	b002      	add	sp, #8
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c00:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 8000c02:	6802      	ldr	r2, [r0, #0]
 8000c04:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <HAL_SPI_MspInit+0xa0>)
{
 8000c06:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 8000c0a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000c10:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000c14:	9407      	str	r4, [sp, #28]
  if(hspi->Instance==SPI1)
 8000c16:	d001      	beq.n	8000c1c <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c18:	b008      	add	sp, #32
 8000c1a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8000c20:	9401      	str	r4, [sp, #4]
 8000c22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000c24:	4d1f      	ldr	r5, [pc, #124]	; (8000ca4 <HAL_SPI_MspInit+0xa4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000c2a:	645a      	str	r2, [r3, #68]	; 0x44
 8000c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c2e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000c32:	9201      	str	r2, [sp, #4]
 8000c34:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	9402      	str	r4, [sp, #8]
 8000c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c3a:	f042 0202 	orr.w	r2, r2, #2
 8000c3e:	631a      	str	r2, [r3, #48]	; 0x30
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000c48:	2338      	movs	r3, #56	; 0x38
 8000c4a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c52:	f04f 0c03 	mov.w	ip, #3
 8000c56:	2305      	movs	r3, #5
 8000c58:	4606      	mov	r6, r0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	4813      	ldr	r0, [pc, #76]	; (8000ca8 <HAL_SPI_MspInit+0xa8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5c:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c5e:	e9cd c306 	strd	ip, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f000 fb0f 	bl	8001284 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000c66:	4811      	ldr	r0, [pc, #68]	; (8000cac <HAL_SPI_MspInit+0xac>)
 8000c68:	6028      	str	r0, [r5, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000c6a:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c72:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000c76:	4628      	mov	r0, r5
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c78:	60ac      	str	r4, [r5, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7a:	60ec      	str	r4, [r5, #12]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c7c:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000c80:	61ec      	str	r4, [r5, #28]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c82:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000c84:	6069      	str	r1, [r5, #4]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c86:	612a      	str	r2, [r5, #16]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c88:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000c8a:	f000 f94d 	bl	8000f28 <HAL_DMA_Init>
 8000c8e:	b918      	cbnz	r0, 8000c98 <HAL_SPI_MspInit+0x98>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000c90:	64f5      	str	r5, [r6, #76]	; 0x4c
 8000c92:	63ae      	str	r6, [r5, #56]	; 0x38
}
 8000c94:	b008      	add	sp, #32
 8000c96:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000c98:	f7ff ff94 	bl	8000bc4 <Error_Handler>
 8000c9c:	e7f8      	b.n	8000c90 <HAL_SPI_MspInit+0x90>
 8000c9e:	bf00      	nop
 8000ca0:	40013000 	.word	0x40013000
 8000ca4:	2000bc44 	.word	0x2000bc44
 8000ca8:	40020400 	.word	0x40020400
 8000cac:	40026410 	.word	0x40026410

08000cb0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb4:	e7fe      	b.n	8000cb4 <HardFault_Handler>
 8000cb6:	bf00      	nop

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler>
 8000cba:	bf00      	nop

08000cbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbc:	e7fe      	b.n	8000cbc <BusFault_Handler>
 8000cbe:	bf00      	nop

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler>
 8000cc2:	bf00      	nop

08000cc4 <SVC_Handler>:
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <DebugMon_Handler>:
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <PendSV_Handler>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd0:	f000 b896 	b.w	8000e00 <HAL_IncTick>

08000cd4 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000cd4:	4801      	ldr	r0, [pc, #4]	; (8000cdc <DMA2_Stream0_IRQHandler+0x8>)
 8000cd6:	f000 b9ff 	b.w	80010d8 <HAL_DMA_IRQHandler>
 8000cda:	bf00      	nop
 8000cdc:	2000bc44 	.word	0x2000bc44

08000ce0 <TIM1_UP_TIM10_IRQHandler>:
}

/* USER CODE BEGIN 1 */
void TIM1_UP_TIM10_IRQHandler( void )
{
	if (TIM1->SR & TIM_SR_UIF)
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000ce2:	691a      	ldr	r2, [r3, #16]
 8000ce4:	07d2      	lsls	r2, r2, #31
 8000ce6:	d400      	bmi.n	8000cea <TIM1_UP_TIM10_IRQHandler+0xa>
	{
		TIM1->SR &= ~TIM_SR_UIF;
		TIM1_UPD_Servo_Set();
	}
}
 8000ce8:	4770      	bx	lr
		TIM1->SR &= ~TIM_SR_UIF;
 8000cea:	691a      	ldr	r2, [r3, #16]
 8000cec:	f022 0201 	bic.w	r2, r2, #1
 8000cf0:	611a      	str	r2, [r3, #16]
		TIM1_UPD_Servo_Set();
 8000cf2:	f7ff bcef 	b.w	80006d4 <TIM1_UPD_Servo_Set>
 8000cf6:	bf00      	nop
 8000cf8:	40010000 	.word	0x40010000

08000cfc <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
	if (TIM4->SR & TIM_SR_UIF)
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <TIM4_IRQHandler+0x14>)
 8000cfe:	691a      	ldr	r2, [r3, #16]
 8000d00:	07d2      	lsls	r2, r2, #31
 8000d02:	d503      	bpl.n	8000d0c <TIM4_IRQHandler+0x10>
	{
		TIM4->SR &= ~TIM_SR_UIF;
 8000d04:	691a      	ldr	r2, [r3, #16]
 8000d06:	f022 0201 	bic.w	r2, r2, #1
 8000d0a:	611a      	str	r2, [r3, #16]
	}
}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40000800 	.word	0x40000800

08000d14 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <SystemInit+0x18>)
 8000d16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d1a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d1e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d26:	6099      	str	r1, [r3, #8]
#endif
}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopFillZerobss+0x14>
 8000d34:	2100      	movs	r1, #0
 8000d36:	e003      	b.n	8000d40 <LoopCopyDataInit>

08000d38 <CopyDataInit>:
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <LoopFillZerobss+0x18>)
 8000d3a:	585b      	ldr	r3, [r3, r1]
 8000d3c:	5043      	str	r3, [r0, r1]
 8000d3e:	3104      	adds	r1, #4

08000d40 <LoopCopyDataInit>:
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <LoopFillZerobss+0x1c>)
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <LoopFillZerobss+0x20>)
 8000d44:	1842      	adds	r2, r0, r1
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d3f6      	bcc.n	8000d38 <CopyDataInit>
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <LoopFillZerobss+0x24>)
 8000d4c:	e002      	b.n	8000d54 <LoopFillZerobss>

08000d4e <FillZerobss>:
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f842 3b04 	str.w	r3, [r2], #4

08000d54 <LoopFillZerobss>:
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <LoopFillZerobss+0x28>)
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d3f9      	bcc.n	8000d4e <FillZerobss>
 8000d5a:	f7ff ffdb 	bl	8000d14 <SystemInit>
 8000d5e:	f001 f8d7 	bl	8001f10 <__libc_init_array>
 8000d62:	f7ff fd81 	bl	8000868 <main>
 8000d66:	4770      	bx	lr
 8000d68:	20020000 	.word	0x20020000
 8000d6c:	08001fc0 	.word	0x08001fc0
 8000d70:	20000000 	.word	0x20000000
 8000d74:	20005e00 	.word	0x20005e00
 8000d78:	20005e00 	.word	0x20005e00
 8000d7c:	2000bca8 	.word	0x2000bca8

08000d80 <ADC_IRQHandler>:
 8000d80:	e7fe      	b.n	8000d80 <ADC_IRQHandler>
	...

08000d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d86:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_InitTick+0x3c>)
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_InitTick+0x40>)
 8000d8a:	7812      	ldrb	r2, [r2, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
{
 8000d8e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d94:	fbb0 f0f2 	udiv	r0, r0, r2
 8000d98:	fbb3 f0f0 	udiv	r0, r3, r0
 8000d9c:	f000 f8aa 	bl	8000ef4 <HAL_SYSTICK_Config>
 8000da0:	b908      	cbnz	r0, 8000da6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	2d0f      	cmp	r5, #15
 8000da4:	d901      	bls.n	8000daa <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000da6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000da8:	bd38      	pop	{r3, r4, r5, pc}
 8000daa:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dac:	4602      	mov	r2, r0
 8000dae:	4629      	mov	r1, r5
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f000 f85a 	bl	8000e6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <HAL_InitTick+0x44>)
 8000dba:	4620      	mov	r0, r4
 8000dbc:	601d      	str	r5, [r3, #0]
}
 8000dbe:	bd38      	pop	{r3, r4, r5, pc}
 8000dc0:	20005df8 	.word	0x20005df8
 8000dc4:	20005df4 	.word	0x20005df4
 8000dc8:	20005dfc 	.word	0x20005dfc

08000dcc <HAL_Init>:
{
 8000dcc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_Init+0x30>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000dd6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000dde:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000de6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f82d 	bl	8000e48 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff ffc8 	bl	8000d84 <HAL_InitTick>
  HAL_MspInit();
 8000df4:	f7ff fee8 	bl	8000bc8 <HAL_MspInit>
}
 8000df8:	2000      	movs	r0, #0
 8000dfa:	bd08      	pop	{r3, pc}
 8000dfc:	40023c00 	.word	0x40023c00

08000e00 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e00:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <HAL_IncTick+0x10>)
 8000e02:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <HAL_IncTick+0x14>)
 8000e04:	6811      	ldr	r1, [r2, #0]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	440b      	add	r3, r1
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	2000bca4 	.word	0x2000bca4
 8000e14:	20005df8 	.word	0x20005df8

08000e18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e18:	4b01      	ldr	r3, [pc, #4]	; (8000e20 <HAL_GetTick+0x8>)
 8000e1a:	6818      	ldr	r0, [r3, #0]
}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	2000bca4 	.word	0x2000bca4

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b538      	push	{r3, r4, r5, lr}
 8000e26:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff fff6 	bl	8000e18 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000e2e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000e30:	d002      	beq.n	8000e38 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <HAL_Delay+0x20>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e38:	f7ff ffee 	bl	8000e18 <HAL_GetTick>
 8000e3c:	1b40      	subs	r0, r0, r5
 8000e3e:	42a0      	cmp	r0, r4
 8000e40:	d3fa      	bcc.n	8000e38 <HAL_Delay+0x14>
  {
  }
}
 8000e42:	bd38      	pop	{r3, r4, r5, pc}
 8000e44:	20005df8 	.word	0x20005df8

08000e48 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e4a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000e50:	400b      	ands	r3, r1
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e52:	0200      	lsls	r0, r0, #8
 8000e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e58:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000e60:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e62:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_NVIC_SetPriority+0x64>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e74:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e76:	f1c3 0507 	rsb	r5, r3, #7
 8000e7a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	bf28      	it	cs
 8000e82:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e84:	2c06      	cmp	r4, #6
 8000e86:	d919      	bls.n	8000ebc <HAL_NVIC_SetPriority+0x50>
 8000e88:	3b03      	subs	r3, #3
 8000e8a:	f04f 34ff 	mov.w	r4, #4294967295
 8000e8e:	409c      	lsls	r4, r3
 8000e90:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295
 8000e98:	40aa      	lsls	r2, r5
 8000e9a:	ea21 0102 	bic.w	r1, r1, r2
 8000e9e:	fa01 f203 	lsl.w	r2, r1, r3
 8000ea2:	4322      	orrs	r2, r4
 8000ea4:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	2800      	cmp	r0, #0
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	db0a      	blt.n	8000ec2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000eb0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000eb4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000eb8:	bc30      	pop	{r4, r5}
 8000eba:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebc:	2400      	movs	r4, #0
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	e7e8      	b.n	8000e94 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <HAL_NVIC_SetPriority+0x68>)
 8000ec4:	f000 000f 	and.w	r0, r0, #15
 8000ec8:	4403      	add	r3, r0
 8000eca:	761a      	strb	r2, [r3, #24]
 8000ecc:	bc30      	pop	{r4, r5}
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00
 8000ed4:	e000ecfc 	.word	0xe000ecfc

08000ed8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	db07      	blt.n	8000eec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000edc:	f000 011f 	and.w	r1, r0, #31
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	0940      	lsrs	r0, r0, #5
 8000ee4:	4a02      	ldr	r2, [pc, #8]	; (8000ef0 <HAL_NVIC_EnableIRQ+0x18>)
 8000ee6:	408b      	lsls	r3, r1
 8000ee8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000efa:	d20e      	bcs.n	8000f1a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	4c08      	ldr	r4, [pc, #32]	; (8000f24 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f02:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	20f0      	movs	r0, #240	; 0xf0
 8000f06:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f0e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f18:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000e010 	.word	0xe000e010
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff ff74 	bl	8000e18 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f30:	2c00      	cmp	r4, #0
 8000f32:	d054      	beq.n	8000fde <HAL_DMA_Init+0xb6>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f34:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f36:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f38:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000f3c:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8000f3e:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 8000f40:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 8000f44:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8000f48:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 8000f4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f4c:	e005      	b.n	8000f5a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f4e:	f7ff ff63 	bl	8000e18 <HAL_GetTick>
 8000f52:	1b40      	subs	r0, r0, r5
 8000f54:	2805      	cmp	r0, #5
 8000f56:	d83b      	bhi.n	8000fd0 <HAL_DMA_Init+0xa8>
 8000f58:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	07d1      	lsls	r1, r2, #31
 8000f5e:	d4f6      	bmi.n	8000f4e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f60:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f64:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f68:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f6a:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 8000f6c:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f6e:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f70:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f74:	430a      	orrs	r2, r1
 8000f76:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f78:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f7a:	4835      	ldr	r0, [pc, #212]	; (8001050 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f7c:	4332      	orrs	r2, r6
 8000f7e:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f80:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f82:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f84:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f86:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f88:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f8c:	d029      	beq.n	8000fe2 <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f90:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f92:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f96:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	482e      	ldr	r0, [pc, #184]	; (8001054 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 8000f9c:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000f9e:	3a10      	subs	r2, #16
 8000fa0:	fba0 1202 	umull	r1, r2, r0, r2
 8000fa4:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000fa6:	492c      	ldr	r1, [pc, #176]	; (8001058 <HAL_DMA_Init+0x130>)
 8000fa8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000fac:	5c89      	ldrb	r1, [r1, r2]
 8000fae:	65e1      	str	r1, [r4, #92]	; 0x5c
 8000fb0:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 8000fb4:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000fb6:	bf88      	it	hi
 8000fb8:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fba:	223f      	movs	r2, #63	; 0x3f
 8000fbc:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 8000fbe:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fc0:	2100      	movs	r1, #0
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000fc2:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 8000fc4:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fc6:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fc8:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000fca:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8000fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000fd6:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fd8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8000fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000fde:	2001      	movs	r0, #1
}
 8000fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fe2:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 8000fe6:	4301      	orrs	r1, r0
 8000fe8:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 8000fea:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 8000fec:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000fee:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8000ff0:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ff4:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8000ff8:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	d0cc      	beq.n	8000f98 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000ffe:	b17e      	cbz	r6, 8001020 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001000:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8001004:	d016      	beq.n	8001034 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001006:	2d02      	cmp	r5, #2
 8001008:	d903      	bls.n	8001012 <HAL_DMA_Init+0xea>
 800100a:	2d03      	cmp	r5, #3
 800100c:	d1c4      	bne.n	8000f98 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800100e:	01c2      	lsls	r2, r0, #7
 8001010:	d5c2      	bpl.n	8000f98 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8001012:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001014:	2240      	movs	r2, #64	; 0x40
 8001016:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 8001018:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 800101a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800101e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8001020:	2d01      	cmp	r5, #1
 8001022:	d003      	beq.n	800102c <HAL_DMA_Init+0x104>
 8001024:	d3f3      	bcc.n	800100e <HAL_DMA_Init+0xe6>
 8001026:	2d02      	cmp	r5, #2
 8001028:	d1b6      	bne.n	8000f98 <HAL_DMA_Init+0x70>
 800102a:	e7f0      	b.n	800100e <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800102c:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8001030:	d1b2      	bne.n	8000f98 <HAL_DMA_Init+0x70>
 8001032:	e7ee      	b.n	8001012 <HAL_DMA_Init+0xea>
    switch (tmp)
 8001034:	2d03      	cmp	r5, #3
 8001036:	d8af      	bhi.n	8000f98 <HAL_DMA_Init+0x70>
 8001038:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <HAL_DMA_Init+0x118>)
 800103a:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800103e:	bf00      	nop
 8001040:	08001013 	.word	0x08001013
 8001044:	0800100f 	.word	0x0800100f
 8001048:	08001013 	.word	0x08001013
 800104c:	0800102d 	.word	0x0800102d
 8001050:	f010803f 	.word	0xf010803f
 8001054:	aaaaaaab 	.word	0xaaaaaaab
 8001058:	08001fa8 	.word	0x08001fa8

0800105c <HAL_DMA_Start_IT>:
{
 800105c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800105e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001062:	2c01      	cmp	r4, #1
 8001064:	d035      	beq.n	80010d2 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001066:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800106a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800106c:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800106e:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8001070:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001074:	d127      	bne.n	80010c6 <HAL_DMA_Start_IT+0x6a>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001076:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8001078:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800107a:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800107c:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001080:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001082:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001084:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001086:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800108a:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800108c:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800108e:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 8001090:	bf0a      	itet	eq
 8001092:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8001094:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001096:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001098:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 800109a:	bf18      	it	ne
 800109c:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800109e:	233f      	movs	r3, #63	; 0x3f
 80010a0:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 80010a2:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010a4:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80010a6:	6823      	ldr	r3, [r4, #0]
 80010a8:	f043 0316 	orr.w	r3, r3, #22
 80010ac:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80010ae:	b11a      	cbz	r2, 80010b8 <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CR  |= DMA_IT_HT;
 80010b0:	6823      	ldr	r3, [r4, #0]
 80010b2:	f043 0308 	orr.w	r3, r3, #8
 80010b6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80010b8:	6823      	ldr	r3, [r4, #0]
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010c0:	2000      	movs	r0, #0
}
 80010c2:	bcf0      	pop	{r4, r5, r6, r7}
 80010c4:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 80010c6:	2300      	movs	r3, #0
 80010c8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 80010cc:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 80010ce:	2002      	movs	r0, #2
}
 80010d0:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80010d2:	2002      	movs	r0, #2
}
 80010d4:	bcf0      	pop	{r4, r5, r6, r7}
 80010d6:	4770      	bx	lr

080010d8 <HAL_DMA_IRQHandler>:
{
 80010d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010da:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 80010dc:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010de:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 80010e0:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010e2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80010e4:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010e6:	4965      	ldr	r1, [pc, #404]	; (800127c <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010e8:	2208      	movs	r2, #8
 80010ea:	409a      	lsls	r2, r3
 80010ec:	422a      	tst	r2, r5
{
 80010ee:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 80010f0:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010f2:	d003      	beq.n	80010fc <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80010f4:	6801      	ldr	r1, [r0, #0]
 80010f6:	6808      	ldr	r0, [r1, #0]
 80010f8:	0740      	lsls	r0, r0, #29
 80010fa:	d459      	bmi.n	80011b0 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010fc:	2201      	movs	r2, #1
 80010fe:	409a      	lsls	r2, r3
 8001100:	422a      	tst	r2, r5
 8001102:	d003      	beq.n	800110c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001104:	6821      	ldr	r1, [r4, #0]
 8001106:	6949      	ldr	r1, [r1, #20]
 8001108:	0608      	lsls	r0, r1, #24
 800110a:	d474      	bmi.n	80011f6 <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800110c:	2204      	movs	r2, #4
 800110e:	409a      	lsls	r2, r3
 8001110:	422a      	tst	r2, r5
 8001112:	d003      	beq.n	800111c <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001114:	6821      	ldr	r1, [r4, #0]
 8001116:	6809      	ldr	r1, [r1, #0]
 8001118:	0789      	lsls	r1, r1, #30
 800111a:	d466      	bmi.n	80011ea <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800111c:	2210      	movs	r2, #16
 800111e:	409a      	lsls	r2, r3
 8001120:	422a      	tst	r2, r5
 8001122:	d003      	beq.n	800112c <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001124:	6821      	ldr	r1, [r4, #0]
 8001126:	6808      	ldr	r0, [r1, #0]
 8001128:	0700      	lsls	r0, r0, #28
 800112a:	d44b      	bmi.n	80011c4 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800112c:	2220      	movs	r2, #32
 800112e:	409a      	lsls	r2, r3
 8001130:	422a      	tst	r2, r5
 8001132:	d014      	beq.n	800115e <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001134:	6821      	ldr	r1, [r4, #0]
 8001136:	6808      	ldr	r0, [r1, #0]
 8001138:	06c0      	lsls	r0, r0, #27
 800113a:	d510      	bpl.n	800115e <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800113c:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800113e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001142:	2a05      	cmp	r2, #5
 8001144:	d063      	beq.n	800120e <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001146:	680b      	ldr	r3, [r1, #0]
 8001148:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800114c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800114e:	d07e      	beq.n	800124e <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001150:	0319      	lsls	r1, r3, #12
 8001152:	f140 8089 	bpl.w	8001268 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8001156:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001158:	b10b      	cbz	r3, 800115e <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800115a:	4620      	mov	r0, r4
 800115c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800115e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001160:	b323      	cbz	r3, 80011ac <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001162:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001164:	07da      	lsls	r2, r3, #31
 8001166:	d51a      	bpl.n	800119e <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001168:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800116a:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800116c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001170:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001172:	4943      	ldr	r1, [pc, #268]	; (8001280 <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 8001174:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8001178:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 800117c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800117e:	0ab6      	lsrs	r6, r6, #10
 8001180:	e002      	b.n	8001188 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001182:	6813      	ldr	r3, [r2, #0]
 8001184:	07db      	lsls	r3, r3, #31
 8001186:	d504      	bpl.n	8001192 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8001188:	9b01      	ldr	r3, [sp, #4]
 800118a:	3301      	adds	r3, #1
 800118c:	42b3      	cmp	r3, r6
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	d9f7      	bls.n	8001182 <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 8001192:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001194:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8001196:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800119a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800119e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80011a0:	b123      	cbz	r3, 80011ac <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 80011a2:	4620      	mov	r0, r4
}
 80011a4:	b003      	add	sp, #12
 80011a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80011aa:	4718      	bx	r3
}
 80011ac:	b003      	add	sp, #12
 80011ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011b0:	6808      	ldr	r0, [r1, #0]
 80011b2:	f020 0004 	bic.w	r0, r0, #4
 80011b6:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011b8:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011ba:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80011bc:	f042 0201 	orr.w	r2, r2, #1
 80011c0:	6562      	str	r2, [r4, #84]	; 0x54
 80011c2:	e79b      	b.n	80010fc <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011c4:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011c6:	680a      	ldr	r2, [r1, #0]
 80011c8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011cc:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011ce:	d118      	bne.n	8001202 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011d0:	05d2      	lsls	r2, r2, #23
 80011d2:	d403      	bmi.n	80011dc <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011d4:	680a      	ldr	r2, [r1, #0]
 80011d6:	f022 0208 	bic.w	r2, r2, #8
 80011da:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80011dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80011de:	2a00      	cmp	r2, #0
 80011e0:	d0a4      	beq.n	800112c <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 80011e2:	4620      	mov	r0, r4
 80011e4:	4790      	blx	r2
 80011e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80011e8:	e7a0      	b.n	800112c <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011ea:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011ec:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80011ee:	f042 0204 	orr.w	r2, r2, #4
 80011f2:	6562      	str	r2, [r4, #84]	; 0x54
 80011f4:	e792      	b.n	800111c <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011f6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011f8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80011fa:	f042 0202 	orr.w	r2, r2, #2
 80011fe:	6562      	str	r2, [r4, #84]	; 0x54
 8001200:	e784      	b.n	800110c <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001202:	0311      	lsls	r1, r2, #12
 8001204:	d5ea      	bpl.n	80011dc <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001206:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001208:	2a00      	cmp	r2, #0
 800120a:	d1ea      	bne.n	80011e2 <HAL_DMA_IRQHandler+0x10a>
 800120c:	e78e      	b.n	800112c <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800120e:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001210:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001212:	f022 0216 	bic.w	r2, r2, #22
 8001216:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001218:	694a      	ldr	r2, [r1, #20]
 800121a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800121e:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001220:	b338      	cbz	r0, 8001272 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001222:	680a      	ldr	r2, [r1, #0]
 8001224:	f022 0208 	bic.w	r2, r2, #8
 8001228:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800122a:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 800122c:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8001232:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 8001234:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001236:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001238:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800123c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001240:	2900      	cmp	r1, #0
 8001242:	d0b3      	beq.n	80011ac <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8001244:	4620      	mov	r0, r4
}
 8001246:	b003      	add	sp, #12
 8001248:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 800124c:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800124e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001252:	d180      	bne.n	8001156 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001254:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001256:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001258:	f022 0210 	bic.w	r2, r2, #16
 800125c:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800125e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001262:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8001266:	e776      	b.n	8001156 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8001268:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800126a:	2b00      	cmp	r3, #0
 800126c:	f47f af75 	bne.w	800115a <HAL_DMA_IRQHandler+0x82>
 8001270:	e775      	b.n	800115e <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001272:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001274:	2a00      	cmp	r2, #0
 8001276:	d1d4      	bne.n	8001222 <HAL_DMA_IRQHandler+0x14a>
 8001278:	e7d7      	b.n	800122a <HAL_DMA_IRQHandler+0x152>
 800127a:	bf00      	nop
 800127c:	20005df4 	.word	0x20005df4
 8001280:	1b4e81b5 	.word	0x1b4e81b5

08001284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001288:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800128c:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 8001484 <HAL_GPIO_Init+0x200>
{
 8001290:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001292:	2400      	movs	r4, #0
 8001294:	e003      	b.n	800129e <HAL_GPIO_Init+0x1a>
 8001296:	3401      	adds	r4, #1
 8001298:	2c10      	cmp	r4, #16
 800129a:	f000 808c 	beq.w	80013b6 <HAL_GPIO_Init+0x132>
    ioposition = 0x01U << position;
 800129e:	2301      	movs	r3, #1
 80012a0:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a2:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d1f5      	bne.n	8001296 <HAL_GPIO_Init+0x12>
 80012aa:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ae:	f026 0910 	bic.w	r9, r6, #16
 80012b2:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 80012b6:	2303      	movs	r3, #3
 80012b8:	f109 37ff 	add.w	r7, r9, #4294967295
 80012bc:	fa03 f30c 	lsl.w	r3, r3, ip
 80012c0:	2f01      	cmp	r7, #1
 80012c2:	ea6f 0303 	mvn.w	r3, r3
 80012c6:	fa05 f50c 	lsl.w	r5, r5, ip
 80012ca:	d977      	bls.n	80013bc <HAL_GPIO_Init+0x138>
      temp = GPIOx->PUPDR;
 80012cc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ce:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80012d2:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 80012d4:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d6:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012da:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012dc:	fa05 f30c 	lsl.w	r3, r5, ip
 80012e0:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 80012e2:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e4:	00f3      	lsls	r3, r6, #3
 80012e6:	d5d6      	bpl.n	8001296 <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e8:	4d5f      	ldr	r5, [pc, #380]	; (8001468 <HAL_GPIO_Init+0x1e4>)
 80012ea:	2300      	movs	r3, #0
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80012f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f4:	646b      	str	r3, [r5, #68]	; 0x44
 80012f6:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 80012f8:	f024 0303 	bic.w	r3, r4, #3
 80012fc:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8001300:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001304:	9501      	str	r5, [sp, #4]
 8001306:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800130a:	f004 0503 	and.w	r5, r4, #3
 800130e:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001312:	4d56      	ldr	r5, [pc, #344]	; (800146c <HAL_GPIO_Init+0x1e8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001314:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001316:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800131a:	270f      	movs	r7, #15
 800131c:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001320:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001322:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001326:	d01f      	beq.n	8001368 <HAL_GPIO_Init+0xe4>
 8001328:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800132c:	42a8      	cmp	r0, r5
 800132e:	d076      	beq.n	800141e <HAL_GPIO_Init+0x19a>
 8001330:	4d4f      	ldr	r5, [pc, #316]	; (8001470 <HAL_GPIO_Init+0x1ec>)
 8001332:	42a8      	cmp	r0, r5
 8001334:	d079      	beq.n	800142a <HAL_GPIO_Init+0x1a6>
 8001336:	4d4f      	ldr	r5, [pc, #316]	; (8001474 <HAL_GPIO_Init+0x1f0>)
 8001338:	42a8      	cmp	r0, r5
 800133a:	d07c      	beq.n	8001436 <HAL_GPIO_Init+0x1b2>
 800133c:	4d4e      	ldr	r5, [pc, #312]	; (8001478 <HAL_GPIO_Init+0x1f4>)
 800133e:	42a8      	cmp	r0, r5
 8001340:	d07f      	beq.n	8001442 <HAL_GPIO_Init+0x1be>
 8001342:	4d4e      	ldr	r5, [pc, #312]	; (800147c <HAL_GPIO_Init+0x1f8>)
 8001344:	42a8      	cmp	r0, r5
 8001346:	f000 8082 	beq.w	800144e <HAL_GPIO_Init+0x1ca>
 800134a:	4d4d      	ldr	r5, [pc, #308]	; (8001480 <HAL_GPIO_Init+0x1fc>)
 800134c:	42a8      	cmp	r0, r5
 800134e:	f000 8084 	beq.w	800145a <HAL_GPIO_Init+0x1d6>
 8001352:	f8df c134 	ldr.w	ip, [pc, #308]	; 8001488 <HAL_GPIO_Init+0x204>
 8001356:	4560      	cmp	r0, ip
 8001358:	bf0c      	ite	eq
 800135a:	f04f 0c07 	moveq.w	ip, #7
 800135e:	f04f 0c08 	movne.w	ip, #8
 8001362:	fa0c f509 	lsl.w	r5, ip, r9
 8001366:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001368:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 800136a:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 800136e:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001370:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8001372:	bf54      	ite	pl
 8001374:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8001376:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 8001378:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 800137c:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001380:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8001382:	bf54      	ite	pl
 8001384:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8001386:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 8001388:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800138c:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001390:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8001392:	bf54      	ite	pl
 8001394:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8001396:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 8001398:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 800139c:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a0:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a2:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 80013a6:	bf54      	ite	pl
 80013a8:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 80013aa:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ac:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 80013ae:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b2:	f47f af74 	bne.w	800129e <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 80013b6:	b003      	add	sp, #12
 80013b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 80013bc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013be:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c2:	68cf      	ldr	r7, [r1, #12]
 80013c4:	fa07 f70c 	lsl.w	r7, r7, ip
 80013c8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80013cc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80013ce:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013d2:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d6:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013da:	40a7      	lsls	r7, r4
 80013dc:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80013e0:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80013e2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013e4:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013e6:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e8:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 80013ec:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ee:	f47f af71 	bne.w	80012d4 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 80013f2:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 80013f6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013fa:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 80013fe:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001402:	00bf      	lsls	r7, r7, #2
 8001404:	f04f 0b0f 	mov.w	fp, #15
 8001408:	fa0b fb07 	lsl.w	fp, fp, r7
 800140c:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001410:	690d      	ldr	r5, [r1, #16]
 8001412:	40bd      	lsls	r5, r7
 8001414:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001418:	f8c9 5020 	str.w	r5, [r9, #32]
 800141c:	e75a      	b.n	80012d4 <HAL_GPIO_Init+0x50>
 800141e:	f04f 0c01 	mov.w	ip, #1
 8001422:	fa0c f509 	lsl.w	r5, ip, r9
 8001426:	432f      	orrs	r7, r5
 8001428:	e79e      	b.n	8001368 <HAL_GPIO_Init+0xe4>
 800142a:	f04f 0c02 	mov.w	ip, #2
 800142e:	fa0c f509 	lsl.w	r5, ip, r9
 8001432:	432f      	orrs	r7, r5
 8001434:	e798      	b.n	8001368 <HAL_GPIO_Init+0xe4>
 8001436:	f04f 0c03 	mov.w	ip, #3
 800143a:	fa0c f509 	lsl.w	r5, ip, r9
 800143e:	432f      	orrs	r7, r5
 8001440:	e792      	b.n	8001368 <HAL_GPIO_Init+0xe4>
 8001442:	f04f 0c04 	mov.w	ip, #4
 8001446:	fa0c f509 	lsl.w	r5, ip, r9
 800144a:	432f      	orrs	r7, r5
 800144c:	e78c      	b.n	8001368 <HAL_GPIO_Init+0xe4>
 800144e:	f04f 0c05 	mov.w	ip, #5
 8001452:	fa0c f509 	lsl.w	r5, ip, r9
 8001456:	432f      	orrs	r7, r5
 8001458:	e786      	b.n	8001368 <HAL_GPIO_Init+0xe4>
 800145a:	f04f 0c06 	mov.w	ip, #6
 800145e:	fa0c f509 	lsl.w	r5, ip, r9
 8001462:	432f      	orrs	r7, r5
 8001464:	e780      	b.n	8001368 <HAL_GPIO_Init+0xe4>
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000
 8001470:	40020800 	.word	0x40020800
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40021000 	.word	0x40021000
 800147c:	40021400 	.word	0x40021400
 8001480:	40021800 	.word	0x40021800
 8001484:	40013c00 	.word	0x40013c00
 8001488:	40021c00 	.word	0x40021c00

0800148c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800148c:	6903      	ldr	r3, [r0, #16]
 800148e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001490:	bf14      	ite	ne
 8001492:	2001      	movne	r0, #1
 8001494:	2000      	moveq	r0, #0
 8001496:	4770      	bx	lr

08001498 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001498:	b1e8      	cbz	r0, 80014d6 <HAL_IWDG_Init+0x3e>
{
 800149a:	b538      	push	{r3, r4, r5, lr}
  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800149c:	e9d0 3100 	ldrd	r3, r1, [r0]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80014a0:	6882      	ldr	r2, [r0, #8]
  __HAL_IWDG_START(hiwdg);
 80014a2:	f64c 45cc 	movw	r5, #52428	; 0xcccc
 80014a6:	4604      	mov	r4, r0
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80014a8:	f245 5055 	movw	r0, #21845	; 0x5555
  __HAL_IWDG_START(hiwdg);
 80014ac:	601d      	str	r5, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80014ae:	6018      	str	r0, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80014b0:	6059      	str	r1, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80014b2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80014b4:	f7ff fcb0 	bl	8000e18 <HAL_GetTick>
 80014b8:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80014ba:	e004      	b.n	80014c6 <HAL_IWDG_Init+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80014bc:	f7ff fcac 	bl	8000e18 <HAL_GetTick>
 80014c0:	1b40      	subs	r0, r0, r5
 80014c2:	2830      	cmp	r0, #48	; 0x30
 80014c4:	d809      	bhi.n	80014da <HAL_IWDG_Init+0x42>
  while (hiwdg->Instance->SR != 0x00u)
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	68d8      	ldr	r0, [r3, #12]
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d1f6      	bne.n	80014bc <HAL_IWDG_Init+0x24>
      return HAL_TIMEOUT;
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80014ce:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80014d2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80014d4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80014d6:	2001      	movs	r0, #1
}
 80014d8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80014da:	2003      	movs	r0, #3
}
 80014dc:	bd38      	pop	{r3, r4, r5, pc}
 80014de:	bf00      	nop

080014e0 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80014e0:	6803      	ldr	r3, [r0, #0]
 80014e2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80014e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80014e8:	2000      	movs	r0, #0
 80014ea:	4770      	bx	lr

080014ec <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014ec:	2800      	cmp	r0, #0
 80014ee:	f000 8132 	beq.w	8001756 <HAL_RCC_OscConfig+0x26a>
{
 80014f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f6:	6803      	ldr	r3, [r0, #0]
 80014f8:	07dd      	lsls	r5, r3, #31
{
 80014fa:	b082      	sub	sp, #8
 80014fc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fe:	d52f      	bpl.n	8001560 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001500:	49ac      	ldr	r1, [pc, #688]	; (80017b4 <HAL_RCC_OscConfig+0x2c8>)
 8001502:	688a      	ldr	r2, [r1, #8]
 8001504:	f002 020c 	and.w	r2, r2, #12
 8001508:	2a04      	cmp	r2, #4
 800150a:	f000 80ea 	beq.w	80016e2 <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800150e:	688a      	ldr	r2, [r1, #8]
 8001510:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001514:	2a08      	cmp	r2, #8
 8001516:	f000 80e0 	beq.w	80016da <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151a:	6863      	ldr	r3, [r4, #4]
 800151c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001520:	f000 80e9 	beq.w	80016f6 <HAL_RCC_OscConfig+0x20a>
 8001524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001528:	f000 8178 	beq.w	800181c <HAL_RCC_OscConfig+0x330>
 800152c:	4da1      	ldr	r5, [pc, #644]	; (80017b4 <HAL_RCC_OscConfig+0x2c8>)
 800152e:	682a      	ldr	r2, [r5, #0]
 8001530:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001534:	602a      	str	r2, [r5, #0]
 8001536:	682a      	ldr	r2, [r5, #0]
 8001538:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800153c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800153e:	2b00      	cmp	r3, #0
 8001540:	f040 80de 	bne.w	8001700 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fc68 	bl	8000e18 <HAL_GetTick>
 8001548:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	e005      	b.n	8001558 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fc64 	bl	8000e18 <HAL_GetTick>
 8001550:	1b80      	subs	r0, r0, r6
 8001552:	2864      	cmp	r0, #100	; 0x64
 8001554:	f200 80f2 	bhi.w	800173c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001558:	682b      	ldr	r3, [r5, #0]
 800155a:	039b      	lsls	r3, r3, #14
 800155c:	d4f6      	bmi.n	800154c <HAL_RCC_OscConfig+0x60>
 800155e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001560:	079f      	lsls	r7, r3, #30
 8001562:	d475      	bmi.n	8001650 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001564:	071a      	lsls	r2, r3, #28
 8001566:	d515      	bpl.n	8001594 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001568:	6963      	ldr	r3, [r4, #20]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 80a5 	beq.w	80016ba <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001570:	4b91      	ldr	r3, [pc, #580]	; (80017b8 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001572:	4d90      	ldr	r5, [pc, #576]	; (80017b4 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001578:	f7ff fc4e 	bl	8000e18 <HAL_GetTick>
 800157c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157e:	e005      	b.n	800158c <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001580:	f7ff fc4a 	bl	8000e18 <HAL_GetTick>
 8001584:	1b80      	subs	r0, r0, r6
 8001586:	2802      	cmp	r0, #2
 8001588:	f200 80d8 	bhi.w	800173c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800158e:	079b      	lsls	r3, r3, #30
 8001590:	d5f6      	bpl.n	8001580 <HAL_RCC_OscConfig+0x94>
 8001592:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001594:	0758      	lsls	r0, r3, #29
 8001596:	d53b      	bpl.n	8001610 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001598:	4a86      	ldr	r2, [pc, #536]	; (80017b4 <HAL_RCC_OscConfig+0x2c8>)
 800159a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800159c:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80015a0:	f040 80db 	bne.w	800175a <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a4:	9301      	str	r3, [sp, #4]
 80015a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015b8:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ba:	4d80      	ldr	r5, [pc, #512]	; (80017bc <HAL_RCC_OscConfig+0x2d0>)
 80015bc:	682a      	ldr	r2, [r5, #0]
 80015be:	05d1      	lsls	r1, r2, #23
 80015c0:	f140 80ac 	bpl.w	800171c <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c4:	68a3      	ldr	r3, [r4, #8]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	f000 80c9 	beq.w	800175e <HAL_RCC_OscConfig+0x272>
 80015cc:	2b05      	cmp	r3, #5
 80015ce:	f000 812f 	beq.w	8001830 <HAL_RCC_OscConfig+0x344>
 80015d2:	4d78      	ldr	r5, [pc, #480]	; (80017b4 <HAL_RCC_OscConfig+0x2c8>)
 80015d4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80015d6:	f022 0201 	bic.w	r2, r2, #1
 80015da:	672a      	str	r2, [r5, #112]	; 0x70
 80015dc:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80015de:	f022 0204 	bic.w	r2, r2, #4
 80015e2:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f040 80bf 	bne.w	8001768 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fc15 	bl	8000e18 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ee:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80015f2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f4:	e006      	b.n	8001604 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f6:	f7ff fc0f 	bl	8000e18 <HAL_GetTick>
 80015fa:	eba0 0008 	sub.w	r0, r0, r8
 80015fe:	42b8      	cmp	r0, r7
 8001600:	f200 809c 	bhi.w	800173c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001604:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001606:	0798      	lsls	r0, r3, #30
 8001608:	d4f5      	bmi.n	80015f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800160a:	2e00      	cmp	r6, #0
 800160c:	f040 80dc 	bne.w	80017c8 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001610:	69a0      	ldr	r0, [r4, #24]
 8001612:	b1c8      	cbz	r0, 8001648 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001614:	4d67      	ldr	r5, [pc, #412]	; (80017b4 <HAL_RCC_OscConfig+0x2c8>)
 8001616:	68aa      	ldr	r2, [r5, #8]
 8001618:	f002 020c 	and.w	r2, r2, #12
 800161c:	2a08      	cmp	r2, #8
 800161e:	f000 80d9 	beq.w	80017d4 <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001622:	4a67      	ldr	r2, [pc, #412]	; (80017c0 <HAL_RCC_OscConfig+0x2d4>)
 8001624:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001626:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001628:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800162a:	f000 810b 	beq.w	8001844 <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162e:	f7ff fbf3 	bl	8000e18 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001632:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001634:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001636:	e004      	b.n	8001642 <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001638:	f7ff fbee 	bl	8000e18 <HAL_GetTick>
 800163c:	1b40      	subs	r0, r0, r5
 800163e:	2802      	cmp	r0, #2
 8001640:	d87c      	bhi.n	800173c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	019b      	lsls	r3, r3, #6
 8001646:	d4f7      	bmi.n	8001638 <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001648:	2000      	movs	r0, #0
}
 800164a:	b002      	add	sp, #8
 800164c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001650:	4a58      	ldr	r2, [pc, #352]	; (80017b4 <HAL_RCC_OscConfig+0x2c8>)
 8001652:	6891      	ldr	r1, [r2, #8]
 8001654:	f011 0f0c 	tst.w	r1, #12
 8001658:	d024      	beq.n	80016a4 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800165a:	6891      	ldr	r1, [r2, #8]
 800165c:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001660:	2908      	cmp	r1, #8
 8001662:	d01c      	beq.n	800169e <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001664:	68e3      	ldr	r3, [r4, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8092 	beq.w	8001790 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 800166c:	4b55      	ldr	r3, [pc, #340]	; (80017c4 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166e:	4d51      	ldr	r5, [pc, #324]	; (80017b4 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8001670:	2201      	movs	r2, #1
 8001672:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001674:	f7ff fbd0 	bl	8000e18 <HAL_GetTick>
 8001678:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167a:	e004      	b.n	8001686 <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800167c:	f7ff fbcc 	bl	8000e18 <HAL_GetTick>
 8001680:	1b80      	subs	r0, r0, r6
 8001682:	2802      	cmp	r0, #2
 8001684:	d85a      	bhi.n	800173c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001686:	682b      	ldr	r3, [r5, #0]
 8001688:	0798      	lsls	r0, r3, #30
 800168a:	d5f7      	bpl.n	800167c <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168c:	682b      	ldr	r3, [r5, #0]
 800168e:	6922      	ldr	r2, [r4, #16]
 8001690:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001694:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001698:	602b      	str	r3, [r5, #0]
 800169a:	6823      	ldr	r3, [r4, #0]
 800169c:	e762      	b.n	8001564 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169e:	6852      	ldr	r2, [r2, #4]
 80016a0:	0256      	lsls	r6, r2, #9
 80016a2:	d4df      	bmi.n	8001664 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a4:	4a43      	ldr	r2, [pc, #268]	; (80017b4 <HAL_RCC_OscConfig+0x2c8>)
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	0795      	lsls	r5, r2, #30
 80016aa:	d54b      	bpl.n	8001744 <HAL_RCC_OscConfig+0x258>
 80016ac:	68e2      	ldr	r2, [r4, #12]
 80016ae:	2a01      	cmp	r2, #1
 80016b0:	d048      	beq.n	8001744 <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 80016b2:	2001      	movs	r0, #1
}
 80016b4:	b002      	add	sp, #8
 80016b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80016ba:	4a3f      	ldr	r2, [pc, #252]	; (80017b8 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	4d3d      	ldr	r5, [pc, #244]	; (80017b4 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 80016be:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80016c0:	f7ff fbaa 	bl	8000e18 <HAL_GetTick>
 80016c4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c6:	e004      	b.n	80016d2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c8:	f7ff fba6 	bl	8000e18 <HAL_GetTick>
 80016cc:	1b80      	subs	r0, r0, r6
 80016ce:	2802      	cmp	r0, #2
 80016d0:	d834      	bhi.n	800173c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016d4:	079f      	lsls	r7, r3, #30
 80016d6:	d4f7      	bmi.n	80016c8 <HAL_RCC_OscConfig+0x1dc>
 80016d8:	e75b      	b.n	8001592 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016da:	684a      	ldr	r2, [r1, #4]
 80016dc:	0250      	lsls	r0, r2, #9
 80016de:	f57f af1c 	bpl.w	800151a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e2:	4a34      	ldr	r2, [pc, #208]	; (80017b4 <HAL_RCC_OscConfig+0x2c8>)
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	0391      	lsls	r1, r2, #14
 80016e8:	f57f af3a 	bpl.w	8001560 <HAL_RCC_OscConfig+0x74>
 80016ec:	6862      	ldr	r2, [r4, #4]
 80016ee:	2a00      	cmp	r2, #0
 80016f0:	f47f af36 	bne.w	8001560 <HAL_RCC_OscConfig+0x74>
 80016f4:	e7dd      	b.n	80016b2 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f6:	4a2f      	ldr	r2, [pc, #188]	; (80017b4 <HAL_RCC_OscConfig+0x2c8>)
 80016f8:	6813      	ldr	r3, [r2, #0]
 80016fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001700:	f7ff fb8a 	bl	8000e18 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001704:	4d2b      	ldr	r5, [pc, #172]	; (80017b4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001706:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001708:	e004      	b.n	8001714 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170a:	f7ff fb85 	bl	8000e18 <HAL_GetTick>
 800170e:	1b80      	subs	r0, r0, r6
 8001710:	2864      	cmp	r0, #100	; 0x64
 8001712:	d813      	bhi.n	800173c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001714:	682b      	ldr	r3, [r5, #0]
 8001716:	039a      	lsls	r2, r3, #14
 8001718:	d5f7      	bpl.n	800170a <HAL_RCC_OscConfig+0x21e>
 800171a:	e720      	b.n	800155e <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171c:	682a      	ldr	r2, [r5, #0]
 800171e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001722:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8001724:	f7ff fb78 	bl	8000e18 <HAL_GetTick>
 8001728:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172a:	682b      	ldr	r3, [r5, #0]
 800172c:	05da      	lsls	r2, r3, #23
 800172e:	f53f af49 	bmi.w	80015c4 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001732:	f7ff fb71 	bl	8000e18 <HAL_GetTick>
 8001736:	1bc0      	subs	r0, r0, r7
 8001738:	2802      	cmp	r0, #2
 800173a:	d9f6      	bls.n	800172a <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 800173c:	2003      	movs	r0, #3
}
 800173e:	b002      	add	sp, #8
 8001740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001744:	491b      	ldr	r1, [pc, #108]	; (80017b4 <HAL_RCC_OscConfig+0x2c8>)
 8001746:	6920      	ldr	r0, [r4, #16]
 8001748:	680a      	ldr	r2, [r1, #0]
 800174a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800174e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001752:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001754:	e706      	b.n	8001564 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 8001756:	2001      	movs	r0, #1
}
 8001758:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 800175a:	2600      	movs	r6, #0
 800175c:	e72d      	b.n	80015ba <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800175e:	4a15      	ldr	r2, [pc, #84]	; (80017b4 <HAL_RCC_OscConfig+0x2c8>)
 8001760:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001768:	f7ff fb56 	bl	8000e18 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176c:	4d11      	ldr	r5, [pc, #68]	; (80017b4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800176e:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001770:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001774:	e005      	b.n	8001782 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001776:	f7ff fb4f 	bl	8000e18 <HAL_GetTick>
 800177a:	eba0 0008 	sub.w	r0, r0, r8
 800177e:	42b8      	cmp	r0, r7
 8001780:	d8dc      	bhi.n	800173c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001782:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001784:	079b      	lsls	r3, r3, #30
 8001786:	d5f6      	bpl.n	8001776 <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 8001788:	2e00      	cmp	r6, #0
 800178a:	f43f af41 	beq.w	8001610 <HAL_RCC_OscConfig+0x124>
 800178e:	e01b      	b.n	80017c8 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 8001790:	4a0c      	ldr	r2, [pc, #48]	; (80017c4 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001792:	4d08      	ldr	r5, [pc, #32]	; (80017b4 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8001794:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001796:	f7ff fb3f 	bl	8000e18 <HAL_GetTick>
 800179a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179c:	e004      	b.n	80017a8 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179e:	f7ff fb3b 	bl	8000e18 <HAL_GetTick>
 80017a2:	1b80      	subs	r0, r0, r6
 80017a4:	2802      	cmp	r0, #2
 80017a6:	d8c9      	bhi.n	800173c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a8:	682b      	ldr	r3, [r5, #0]
 80017aa:	0799      	lsls	r1, r3, #30
 80017ac:	d4f7      	bmi.n	800179e <HAL_RCC_OscConfig+0x2b2>
 80017ae:	6823      	ldr	r3, [r4, #0]
 80017b0:	e6d8      	b.n	8001564 <HAL_RCC_OscConfig+0x78>
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	42470e80 	.word	0x42470e80
 80017bc:	40007000 	.word	0x40007000
 80017c0:	42470060 	.word	0x42470060
 80017c4:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c8:	4a35      	ldr	r2, [pc, #212]	; (80018a0 <HAL_RCC_OscConfig+0x3b4>)
 80017ca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80017cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d0:	6413      	str	r3, [r2, #64]	; 0x40
 80017d2:	e71d      	b.n	8001610 <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017d4:	2801      	cmp	r0, #1
 80017d6:	f43f af6d 	beq.w	80016b4 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 80017da:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017dc:	69e2      	ldr	r2, [r4, #28]
 80017de:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80017e2:	4291      	cmp	r1, r2
 80017e4:	f47f af65 	bne.w	80016b2 <HAL_RCC_OscConfig+0x1c6>
 80017e8:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ea:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	4291      	cmp	r1, r2
 80017f0:	f47f af5f 	bne.w	80016b2 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80017f4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80017fa:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017fc:	428a      	cmp	r2, r1
 80017fe:	f47f af58 	bne.w	80016b2 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001802:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001804:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001808:	4291      	cmp	r1, r2
 800180a:	f47f af52 	bne.w	80016b2 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800180e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001810:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 8001814:	1a18      	subs	r0, r3, r0
 8001816:	bf18      	it	ne
 8001818:	2001      	movne	r0, #1
 800181a:	e74b      	b.n	80016b4 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181c:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <HAL_RCC_OscConfig+0x3b4>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	e767      	b.n	8001700 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_RCC_OscConfig+0x3b4>)
 8001832:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001834:	f042 0204 	orr.w	r2, r2, #4
 8001838:	671a      	str	r2, [r3, #112]	; 0x70
 800183a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800183c:	f042 0201 	orr.w	r2, r2, #1
 8001840:	671a      	str	r2, [r3, #112]	; 0x70
 8001842:	e791      	b.n	8001768 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 8001844:	f7ff fae8 	bl	8000e18 <HAL_GetTick>
 8001848:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184a:	e005      	b.n	8001858 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184c:	f7ff fae4 	bl	8000e18 <HAL_GetTick>
 8001850:	1b80      	subs	r0, r0, r6
 8001852:	2802      	cmp	r0, #2
 8001854:	f63f af72 	bhi.w	800173c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001858:	682b      	ldr	r3, [r5, #0]
 800185a:	0199      	lsls	r1, r3, #6
 800185c:	d4f6      	bmi.n	800184c <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800185e:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8001862:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001866:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001868:	4c0d      	ldr	r4, [pc, #52]	; (80018a0 <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800186a:	4333      	orrs	r3, r6
 800186c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001870:	0852      	lsrs	r2, r2, #1
 8001872:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001876:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001878:	490a      	ldr	r1, [pc, #40]	; (80018a4 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800187a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800187e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001880:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001882:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8001884:	f7ff fac8 	bl	8000e18 <HAL_GetTick>
 8001888:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188a:	e005      	b.n	8001898 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff fac4 	bl	8000e18 <HAL_GetTick>
 8001890:	1b40      	subs	r0, r0, r5
 8001892:	2802      	cmp	r0, #2
 8001894:	f63f af52 	bhi.w	800173c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	019a      	lsls	r2, r3, #6
 800189c:	d5f6      	bpl.n	800188c <HAL_RCC_OscConfig+0x3a0>
 800189e:	e6d3      	b.n	8001648 <HAL_RCC_OscConfig+0x15c>
 80018a0:	40023800 	.word	0x40023800
 80018a4:	42470060 	.word	0x42470060

080018a8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a8:	4917      	ldr	r1, [pc, #92]	; (8001908 <HAL_RCC_GetSysClockFreq+0x60>)
{
 80018aa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018ac:	688b      	ldr	r3, [r1, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d01b      	beq.n	80018ee <HAL_RCC_GetSysClockFreq+0x46>
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d117      	bne.n	80018ea <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018ba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018bc:	684b      	ldr	r3, [r1, #4]
 80018be:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018c2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018c6:	d114      	bne.n	80018f2 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c8:	6849      	ldr	r1, [r1, #4]
 80018ca:	4810      	ldr	r0, [pc, #64]	; (800190c <HAL_RCC_GetSysClockFreq+0x64>)
 80018cc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80018d0:	fba1 0100 	umull	r0, r1, r1, r0
 80018d4:	f7fe fc78 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_RCC_GetSysClockFreq+0x60>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80018e0:	3301      	adds	r3, #1
 80018e2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80018e4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80018e8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80018ea:	4808      	ldr	r0, [pc, #32]	; (800190c <HAL_RCC_GetSysClockFreq+0x64>)
}
 80018ec:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80018ee:	4808      	ldr	r0, [pc, #32]	; (8001910 <HAL_RCC_GetSysClockFreq+0x68>)
}
 80018f0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f2:	684b      	ldr	r3, [r1, #4]
 80018f4:	4806      	ldr	r0, [pc, #24]	; (8001910 <HAL_RCC_GetSysClockFreq+0x68>)
 80018f6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80018fa:	fba3 0100 	umull	r0, r1, r3, r0
 80018fe:	2300      	movs	r3, #0
 8001900:	f7fe fc62 	bl	80001c8 <__aeabi_uldivmod>
 8001904:	e7e8      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x30>
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	00f42400 	.word	0x00f42400
 8001910:	007a1200 	.word	0x007a1200

08001914 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001914:	b160      	cbz	r0, 8001930 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001916:	4a49      	ldr	r2, [pc, #292]	; (8001a3c <HAL_RCC_ClockConfig+0x128>)
 8001918:	6813      	ldr	r3, [r2, #0]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	428b      	cmp	r3, r1
 8001920:	d208      	bcs.n	8001934 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	b2cb      	uxtb	r3, r1
 8001924:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	6813      	ldr	r3, [r2, #0]
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	428b      	cmp	r3, r1
 800192e:	d001      	beq.n	8001934 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8001930:	2001      	movs	r0, #1
}
 8001932:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001934:	6803      	ldr	r3, [r0, #0]
{
 8001936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800193a:	079d      	lsls	r5, r3, #30
 800193c:	d514      	bpl.n	8001968 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193e:	075c      	lsls	r4, r3, #29
 8001940:	d504      	bpl.n	800194c <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001942:	4c3f      	ldr	r4, [pc, #252]	; (8001a40 <HAL_RCC_ClockConfig+0x12c>)
 8001944:	68a2      	ldr	r2, [r4, #8]
 8001946:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800194a:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194c:	071a      	lsls	r2, r3, #28
 800194e:	d504      	bpl.n	800195a <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001950:	4c3b      	ldr	r4, [pc, #236]	; (8001a40 <HAL_RCC_ClockConfig+0x12c>)
 8001952:	68a2      	ldr	r2, [r4, #8]
 8001954:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001958:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195a:	4c39      	ldr	r4, [pc, #228]	; (8001a40 <HAL_RCC_ClockConfig+0x12c>)
 800195c:	6885      	ldr	r5, [r0, #8]
 800195e:	68a2      	ldr	r2, [r4, #8]
 8001960:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001964:	432a      	orrs	r2, r5
 8001966:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001968:	07df      	lsls	r7, r3, #31
 800196a:	4604      	mov	r4, r0
 800196c:	460d      	mov	r5, r1
 800196e:	d522      	bpl.n	80019b6 <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001970:	6842      	ldr	r2, [r0, #4]
 8001972:	2a01      	cmp	r2, #1
 8001974:	d057      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001976:	1e93      	subs	r3, r2, #2
 8001978:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197a:	4b31      	ldr	r3, [pc, #196]	; (8001a40 <HAL_RCC_ClockConfig+0x12c>)
 800197c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197e:	d959      	bls.n	8001a34 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001980:	0799      	lsls	r1, r3, #30
 8001982:	d525      	bpl.n	80019d0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001984:	4e2e      	ldr	r6, [pc, #184]	; (8001a40 <HAL_RCC_ClockConfig+0x12c>)
 8001986:	68b3      	ldr	r3, [r6, #8]
 8001988:	f023 0303 	bic.w	r3, r3, #3
 800198c:	4313      	orrs	r3, r2
 800198e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001990:	f7ff fa42 	bl	8000e18 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001994:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001998:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	e005      	b.n	80019a8 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199c:	f7ff fa3c 	bl	8000e18 <HAL_GetTick>
 80019a0:	eba0 0008 	sub.w	r0, r0, r8
 80019a4:	42b8      	cmp	r0, r7
 80019a6:	d843      	bhi.n	8001a30 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a8:	68b3      	ldr	r3, [r6, #8]
 80019aa:	6862      	ldr	r2, [r4, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80019b4:	d1f2      	bne.n	800199c <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019b6:	4a21      	ldr	r2, [pc, #132]	; (8001a3c <HAL_RCC_ClockConfig+0x128>)
 80019b8:	6813      	ldr	r3, [r2, #0]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	42ab      	cmp	r3, r5
 80019c0:	d909      	bls.n	80019d6 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c2:	b2eb      	uxtb	r3, r5
 80019c4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c6:	6813      	ldr	r3, [r2, #0]
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	42ab      	cmp	r3, r5
 80019ce:	d002      	beq.n	80019d6 <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 80019d0:	2001      	movs	r0, #1
}
 80019d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d6:	6823      	ldr	r3, [r4, #0]
 80019d8:	075a      	lsls	r2, r3, #29
 80019da:	d506      	bpl.n	80019ea <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019dc:	4918      	ldr	r1, [pc, #96]	; (8001a40 <HAL_RCC_ClockConfig+0x12c>)
 80019de:	68e0      	ldr	r0, [r4, #12]
 80019e0:	688a      	ldr	r2, [r1, #8]
 80019e2:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80019e6:	4302      	orrs	r2, r0
 80019e8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ea:	071b      	lsls	r3, r3, #28
 80019ec:	d412      	bmi.n	8001a14 <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ee:	f7ff ff5b 	bl	80018a8 <HAL_RCC_GetSysClockFreq>
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <HAL_RCC_ClockConfig+0x12c>)
 80019f4:	4c13      	ldr	r4, [pc, #76]	; (8001a44 <HAL_RCC_ClockConfig+0x130>)
 80019f6:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 80019f8:	4913      	ldr	r1, [pc, #76]	; (8001a48 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019fa:	4a14      	ldr	r2, [pc, #80]	; (8001a4c <HAL_RCC_ClockConfig+0x138>)
 80019fc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a00:	5ce3      	ldrb	r3, [r4, r3]
 8001a02:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8001a06:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a08:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8001a0a:	f7ff f9bb 	bl	8000d84 <HAL_InitTick>
  return HAL_OK;
 8001a0e:	2000      	movs	r0, #0
}
 8001a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a14:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <HAL_RCC_ClockConfig+0x12c>)
 8001a16:	6921      	ldr	r1, [r4, #16]
 8001a18:	6893      	ldr	r3, [r2, #8]
 8001a1a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a22:	6093      	str	r3, [r2, #8]
 8001a24:	e7e3      	b.n	80019ee <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_RCC_ClockConfig+0x12c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	039e      	lsls	r6, r3, #14
 8001a2c:	d4aa      	bmi.n	8001984 <HAL_RCC_ClockConfig+0x70>
 8001a2e:	e7cf      	b.n	80019d0 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8001a30:	2003      	movs	r0, #3
 8001a32:	e7ed      	b.n	8001a10 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a34:	0198      	lsls	r0, r3, #6
 8001a36:	d4a5      	bmi.n	8001984 <HAL_RCC_ClockConfig+0x70>
 8001a38:	e7ca      	b.n	80019d0 <HAL_RCC_ClockConfig+0xbc>
 8001a3a:	bf00      	nop
 8001a3c:	40023c00 	.word	0x40023c00
 8001a40:	40023800 	.word	0x40023800
 8001a44:	08001f98 	.word	0x08001f98
 8001a48:	20005dfc 	.word	0x20005dfc
 8001a4c:	20005df4 	.word	0x20005df4

08001a50 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a54:	4607      	mov	r7, r0
 8001a56:	460d      	mov	r5, r1
 8001a58:	4616      	mov	r6, r2
 8001a5a:	4698      	mov	r8, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a5c:	683c      	ldr	r4, [r7, #0]
 8001a5e:	e001      	b.n	8001a64 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x14>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001a60:	1c73      	adds	r3, r6, #1
 8001a62:	d106      	bne.n	8001a72 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x22>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a64:	68a0      	ldr	r0, [r4, #8]
 8001a66:	ea35 0300 	bics.w	r3, r5, r0
 8001a6a:	d0f9      	beq.n	8001a60 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001a6c:	2000      	movs	r0, #0
}
 8001a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001a72:	f7ff f9d1 	bl	8000e18 <HAL_GetTick>
 8001a76:	eba0 0008 	sub.w	r0, r0, r8
 8001a7a:	4286      	cmp	r6, r0
 8001a7c:	d8ee      	bhi.n	8001a5c <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a7e:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a82:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a84:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001a8c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a8e:	d014      	beq.n	8001aba <SPI_WaitFlagStateUntilTimeout.constprop.7+0x6a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a92:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001a96:	d007      	beq.n	8001aa8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x58>
        hspi->State = HAL_SPI_STATE_READY;
 8001a98:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8001a9a:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8001a9c:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001aa0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	e7e2      	b.n	8001a6e <SPI_WaitFlagStateUntilTimeout.constprop.7+0x1e>
          SPI_RESET_CRC(hspi);
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	e7ee      	b.n	8001a98 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x48>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ac0:	d002      	beq.n	8001ac8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ac2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001ac6:	d1e3      	bne.n	8001a90 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x40>
          __HAL_SPI_DISABLE(hspi);
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	e7de      	b.n	8001a90 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x40>
 8001ad2:	bf00      	nop

08001ad4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001ad4:	b570      	push	{r4, r5, r6, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ad6:	6845      	ldr	r5, [r0, #4]
 8001ad8:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
{
 8001adc:	4604      	mov	r4, r0
 8001ade:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ae0:	d006      	beq.n	8001af0 <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001ae2:	460a      	mov	r2, r1
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	f7ff ffb3 	bl	8001a50 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8001aea:	b998      	cbnz	r0, 8001b14 <SPI_EndRxTransaction+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001aec:	2000      	movs	r0, #0
}
 8001aee:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001af0:	6882      	ldr	r2, [r0, #8]
 8001af2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001af6:	d013      	beq.n	8001b20 <SPI_EndRxTransaction+0x4c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001af8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001afc:	d115      	bne.n	8001b2a <SPI_EndRxTransaction+0x56>
    __HAL_SPI_DISABLE(hspi);
 8001afe:	6806      	ldr	r6, [r0, #0]
 8001b00:	6835      	ldr	r5, [r6, #0]
 8001b02:	f025 0540 	bic.w	r5, r5, #64	; 0x40
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001b06:	460a      	mov	r2, r1
    __HAL_SPI_DISABLE(hspi);
 8001b08:	6035      	str	r5, [r6, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	f7ff ffa0 	bl	8001a50 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8001b10:	2800      	cmp	r0, #0
 8001b12:	d0eb      	beq.n	8001aec <SPI_EndRxTransaction+0x18>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b16:	f043 0320 	orr.w	r3, r3, #32
 8001b1a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001b1c:	2003      	movs	r0, #3
}
 8001b1e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SPI_DISABLE(hspi);
 8001b20:	6800      	ldr	r0, [r0, #0]
 8001b22:	6802      	ldr	r2, [r0, #0]
 8001b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b28:	6002      	str	r2, [r0, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001b2a:	460a      	mov	r2, r1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	2180      	movs	r1, #128	; 0x80
 8001b30:	f7ff ff8e 	bl	8001a50 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8001b34:	2800      	cmp	r0, #0
 8001b36:	d1ed      	bne.n	8001b14 <SPI_EndRxTransaction+0x40>
  return HAL_OK;
 8001b38:	2000      	movs	r0, #0
 8001b3a:	e7d8      	b.n	8001aee <SPI_EndRxTransaction+0x1a>

08001b3c <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001b3c:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <SPI_EndRxTxTransaction+0x5c>)
{
 8001b3e:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4d16      	ldr	r5, [pc, #88]	; (8001b9c <SPI_EndRxTxTransaction+0x60>)
 8001b44:	fba5 5303 	umull	r5, r3, r5, r3
 8001b48:	0d5b      	lsrs	r3, r3, #21
 8001b4a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001b4e:	fb05 f303 	mul.w	r3, r5, r3
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b52:	6845      	ldr	r5, [r0, #4]
{
 8001b54:	b083      	sub	sp, #12
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b56:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
{
 8001b5a:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001b5c:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b5e:	d107      	bne.n	8001b70 <SPI_EndRxTxTransaction+0x34>
 8001b60:	e00c      	b.n	8001b7c <SPI_EndRxTxTransaction+0x40>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8001b62:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001b64:	6822      	ldr	r2, [r4, #0]
      count--;
 8001b66:	3b01      	subs	r3, #1
 8001b68:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001b6a:	6893      	ldr	r3, [r2, #8]
 8001b6c:	061b      	lsls	r3, r3, #24
 8001b6e:	d502      	bpl.n	8001b76 <SPI_EndRxTxTransaction+0x3a>
      if (count == 0U)
 8001b70:	9b01      	ldr	r3, [sp, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f5      	bne.n	8001b62 <SPI_EndRxTxTransaction+0x26>
  }

  return HAL_OK;
 8001b76:	2000      	movs	r0, #0
}
 8001b78:	b003      	add	sp, #12
 8001b7a:	bd30      	pop	{r4, r5, pc}
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	460a      	mov	r2, r1
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001b80:	2180      	movs	r1, #128	; 0x80
 8001b82:	f7ff ff65 	bl	8001a50 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8001b86:	2800      	cmp	r0, #0
 8001b88:	d0f5      	beq.n	8001b76 <SPI_EndRxTxTransaction+0x3a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b8c:	f043 0320 	orr.w	r3, r3, #32
 8001b90:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001b92:	2003      	movs	r0, #3
 8001b94:	e7f0      	b.n	8001b78 <SPI_EndRxTxTransaction+0x3c>
 8001b96:	bf00      	nop
 8001b98:	20005df4 	.word	0x20005df4
 8001b9c:	165e9f81 	.word	0x165e9f81

08001ba0 <HAL_SPI_Init>:
  if (hspi == NULL)
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d03b      	beq.n	8001c1c <HAL_SPI_Init+0x7c>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ba4:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba8:	2300      	movs	r3, #0
{
 8001baa:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bac:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8001bb0:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb2:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bb4:	b362      	cbz	r2, 8001c10 <HAL_SPI_Init+0x70>
 8001bb6:	4618      	mov	r0, r3
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001bb8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8001bbc:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8001bc0:	432b      	orrs	r3, r5
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	6962      	ldr	r2, [r4, #20]
 8001bc6:	69e5      	ldr	r5, [r4, #28]
 8001bc8:	6a26      	ldr	r6, [r4, #32]
 8001bca:	430b      	orrs	r3, r1
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8001bd0:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001bd2:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 8001bd4:	2502      	movs	r5, #2
 8001bd6:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001bda:	4333      	orrs	r3, r6
 8001bdc:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 8001be0:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001be2:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001be4:	0c12      	lsrs	r2, r2, #16
 8001be6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001be8:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001bec:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001bee:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 8001bf0:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 8001bf4:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001bf6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001bf8:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bfa:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bfc:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8001c02:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c04:	61cb      	str	r3, [r1, #28]
  return HAL_OK;
 8001c06:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c08:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c0a:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 8001c0e:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8001c10:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001c14:	f7fe fff4 	bl	8000c00 <HAL_SPI_MspInit>
 8001c18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001c1a:	e7cd      	b.n	8001bb8 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8001c1c:	2001      	movs	r0, #1
}
 8001c1e:	4770      	bx	lr

08001c20 <HAL_SPI_TransmitReceive_DMA>:
{
 8001c20:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8001c22:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8001c26:	2c01      	cmp	r4, #1
 8001c28:	d04e      	beq.n	8001cc8 <HAL_SPI_TransmitReceive_DMA+0xa8>
 8001c2a:	4604      	mov	r4, r0
  tmp_state           = hspi->State;
 8001c2c:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
  __HAL_LOCK(hspi);
 8001c30:	2501      	movs	r5, #1
  tmp_state           = hspi->State;
 8001c32:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8001c34:	42a8      	cmp	r0, r5
  __HAL_LOCK(hspi);
 8001c36:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8001c3a:	d00d      	beq.n	8001c58 <HAL_SPI_TransmitReceive_DMA+0x38>
 8001c3c:	6865      	ldr	r5, [r4, #4]
 8001c3e:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8001c42:	d004      	beq.n	8001c4e <HAL_SPI_TransmitReceive_DMA+0x2e>
    errorcode = HAL_BUSY;
 8001c44:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8001c46:	2300      	movs	r3, #0
 8001c48:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001c4c:	bd38      	pop	{r3, r4, r5, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001c4e:	68a5      	ldr	r5, [r4, #8]
 8001c50:	2d00      	cmp	r5, #0
 8001c52:	d1f7      	bne.n	8001c44 <HAL_SPI_TransmitReceive_DMA+0x24>
 8001c54:	2804      	cmp	r0, #4
 8001c56:	d1f5      	bne.n	8001c44 <HAL_SPI_TransmitReceive_DMA+0x24>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c58:	2900      	cmp	r1, #0
 8001c5a:	d033      	beq.n	8001cc4 <HAL_SPI_TransmitReceive_DMA+0xa4>
 8001c5c:	2a00      	cmp	r2, #0
 8001c5e:	d031      	beq.n	8001cc4 <HAL_SPI_TransmitReceive_DMA+0xa4>
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d02f      	beq.n	8001cc4 <HAL_SPI_TransmitReceive_DMA+0xa4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c64:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c68:	6321      	str	r1, [r4, #48]	; 0x30
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c6a:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c6c:	bf1c      	itt	ne
 8001c6e:	2005      	movne	r0, #5
 8001c70:	f884 0051 	strbne.w	r0, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c74:	2000      	movs	r0, #0
 8001c76:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->TxXferCount = Size;
 8001c78:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxXferCount = Size;
 8001c7a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001c7c:	f894 5051 	ldrb.w	r5, [r4, #81]	; 0x51
  hspi->TxXferSize  = Size;
 8001c80:	86a3      	strh	r3, [r4, #52]	; 0x34
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001c82:	2d04      	cmp	r5, #4
  hspi->RxXferSize  = Size;
 8001c84:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 8001c86:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8001c8a:	bf08      	it	eq
 8001c8c:	4921      	ldreq	r1, [pc, #132]	; (8001d14 <HAL_SPI_TransmitReceive_DMA+0xf4>)
 8001c8e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8001c90:	bf0e      	itee	eq
 8001c92:	4b21      	ldreq	r3, [pc, #132]	; (8001d18 <HAL_SPI_TransmitReceive_DMA+0xf8>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8001c94:	4921      	ldrne	r1, [pc, #132]	; (8001d1c <HAL_SPI_TransmitReceive_DMA+0xfc>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8001c96:	4b22      	ldrne	r3, [pc, #136]	; (8001d20 <HAL_SPI_TransmitReceive_DMA+0x100>)
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c98:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001c9a:	4d22      	ldr	r5, [pc, #136]	; (8001d24 <HAL_SPI_TransmitReceive_DMA+0x104>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8001c9c:	e9c0 310f 	strd	r3, r1, [r0, #60]	; 0x3c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001ca0:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 8001ca2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001ca4:	64c5      	str	r5, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8001ca6:	2500      	movs	r5, #0
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001ca8:	310c      	adds	r1, #12
  hspi->hdmarx->XferAbortCallback = NULL;
 8001caa:	6505      	str	r5, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001cac:	f7ff f9d6 	bl	800105c <HAL_DMA_Start_IT>
 8001cb0:	b160      	cbz	r0, 8001ccc <HAL_SPI_TransmitReceive_DMA+0xac>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001cb2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8001cb4:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001cb6:	f043 0310 	orr.w	r3, r3, #16
 8001cba:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001cbc:	4610      	mov	r0, r2
    hspi->State = HAL_SPI_STATE_READY;
 8001cbe:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    goto error;
 8001cc2:	e7c0      	b.n	8001c46 <HAL_SPI_TransmitReceive_DMA+0x26>
    errorcode = HAL_ERROR;
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	e7be      	b.n	8001c46 <HAL_SPI_TransmitReceive_DMA+0x26>
  __HAL_LOCK(hspi);
 8001cc8:	2002      	movs	r0, #2
}
 8001cca:	bd38      	pop	{r3, r4, r5, pc}
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001ccc:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8001cce:	6ca5      	ldr	r5, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001cd0:	6853      	ldr	r3, [r2, #4]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001cd2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6053      	str	r3, [r2, #4]
                                 hspi->TxXferCount))
 8001cda:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8001cdc:	6428      	str	r0, [r5, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8001cde:	63e8      	str	r0, [r5, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8001ce0:	e9c5 0013 	strd	r0, r0, [r5, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001ce4:	320c      	adds	r2, #12
 8001ce6:	4628      	mov	r0, r5
 8001ce8:	f7ff f9b8 	bl	800105c <HAL_DMA_Start_IT>
 8001cec:	2800      	cmp	r0, #0
 8001cee:	d1e0      	bne.n	8001cb2 <HAL_SPI_TransmitReceive_DMA+0x92>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	0652      	lsls	r2, r2, #25
 8001cf6:	d403      	bmi.n	8001d00 <HAL_SPI_TransmitReceive_DMA+0xe0>
    __HAL_SPI_ENABLE(hspi);
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cfe:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	f042 0220 	orr.w	r2, r2, #32
 8001d06:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	f042 0202 	orr.w	r2, r2, #2
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	e799      	b.n	8001c46 <HAL_SPI_TransmitReceive_DMA+0x26>
 8001d12:	bf00      	nop
 8001d14:	08001e09 	.word	0x08001e09
 8001d18:	08001e4d 	.word	0x08001e4d
 8001d1c:	08001e19 	.word	0x08001e19
 8001d20:	08001eb5 	.word	0x08001eb5
 8001d24:	08001e29 	.word	0x08001e29

08001d28 <HAL_SPI_Receive_DMA>:
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001d28:	6883      	ldr	r3, [r0, #8]
{
 8001d2a:	b570      	push	{r4, r5, r6, lr}
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	460d      	mov	r5, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001d30:	b91b      	cbnz	r3, 8001d3a <HAL_SPI_Receive_DMA+0x12>
 8001d32:	6846      	ldr	r6, [r0, #4]
 8001d34:	f5b6 7f82 	cmp.w	r6, #260	; 0x104
 8001d38:	d048      	beq.n	8001dcc <HAL_SPI_Receive_DMA+0xa4>
  __HAL_LOCK(hspi);
 8001d3a:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 8001d3e:	2901      	cmp	r1, #1
 8001d40:	d04d      	beq.n	8001dde <HAL_SPI_Receive_DMA+0xb6>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001d42:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  __HAL_LOCK(hspi);
 8001d46:	2101      	movs	r1, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 8001d48:	b2c0      	uxtb	r0, r0
 8001d4a:	4288      	cmp	r0, r1
  __HAL_LOCK(hspi);
 8001d4c:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 8001d50:	d004      	beq.n	8001d5c <HAL_SPI_Receive_DMA+0x34>
    errorcode = HAL_BUSY;
 8001d52:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8001d54:	2300      	movs	r3, #0
 8001d56:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001d5a:	bd70      	pop	{r4, r5, r6, pc}
  if ((pData == NULL) || (Size == 0U))
 8001d5c:	2d00      	cmp	r5, #0
 8001d5e:	d0f9      	beq.n	8001d54 <HAL_SPI_Receive_DMA+0x2c>
 8001d60:	2a00      	cmp	r2, #0
 8001d62:	d0f7      	beq.n	8001d54 <HAL_SPI_Receive_DMA+0x2c>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d64:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d66:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d6c:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001d70:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d72:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->RxXferSize  = Size;
 8001d74:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001d76:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001d78:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d7a:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8001d7c:	86a0      	strh	r0, [r4, #52]	; 0x34
 8001d7e:	6821      	ldr	r1, [r4, #0]
  hspi->TxXferCount = 0U;
 8001d80:	86e0      	strh	r0, [r4, #54]	; 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d82:	d103      	bne.n	8001d8c <HAL_SPI_Receive_DMA+0x64>
    SPI_1LINE_RX(hspi);
 8001d84:	680b      	ldr	r3, [r1, #0]
 8001d86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d8a:	600b      	str	r3, [r1, #0]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8001d8c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001d8e:	4a19      	ldr	r2, [pc, #100]	; (8001df4 <HAL_SPI_Receive_DMA+0xcc>)
                                 hspi->RxXferCount))
 8001d90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8001d92:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8001d94:	4a18      	ldr	r2, [pc, #96]	; (8001df8 <HAL_SPI_Receive_DMA+0xd0>)
 8001d96:	63c2      	str	r2, [r0, #60]	; 0x3c
  hspi->hdmarx->XferAbortCallback = NULL;
 8001d98:	2600      	movs	r6, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001d9a:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <HAL_SPI_Receive_DMA+0xd4>)
 8001d9c:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001d9e:	310c      	adds	r1, #12
 8001da0:	462a      	mov	r2, r5
  hspi->hdmarx->XferAbortCallback = NULL;
 8001da2:	6506      	str	r6, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001da4:	f7ff f95a 	bl	800105c <HAL_DMA_Start_IT>
 8001da8:	b9d8      	cbnz	r0, 8001de2 <HAL_SPI_Receive_DMA+0xba>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	0652      	lsls	r2, r2, #25
 8001db0:	d403      	bmi.n	8001dba <HAL_SPI_Receive_DMA+0x92>
    __HAL_SPI_ENABLE(hspi);
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001db8:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	f042 0220 	orr.w	r2, r2, #32
 8001dc0:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	f042 0201 	orr.w	r2, r2, #1
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	e7c3      	b.n	8001d54 <HAL_SPI_Receive_DMA+0x2c>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001dcc:	2604      	movs	r6, #4
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8001dce:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001dd0:	f880 6051 	strb.w	r6, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8001dd4:	460a      	mov	r2, r1
}
 8001dd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8001dda:	f7ff bf21 	b.w	8001c20 <HAL_SPI_TransmitReceive_DMA>
  __HAL_LOCK(hspi);
 8001dde:	2002      	movs	r0, #2
}
 8001de0:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001de2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8001de4:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001de6:	f043 0310 	orr.w	r3, r3, #16
 8001dea:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001dec:	4610      	mov	r0, r2
    hspi->State = HAL_SPI_STATE_READY;
 8001dee:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    goto error;
 8001df2:	e7af      	b.n	8001d54 <HAL_SPI_Receive_DMA+0x2c>
 8001df4:	08001e09 	.word	0x08001e09
 8001df8:	08001e4d 	.word	0x08001e4d
 8001dfc:	08001e29 	.word	0x08001e29

08001e00 <HAL_SPI_TxRxCpltCallback>:
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop

08001e04 <HAL_SPI_RxHalfCpltCallback>:
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop

08001e08 <SPI_DMAHalfReceiveCplt>:
{
 8001e08:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8001e0a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001e0c:	f7ff fffa 	bl	8001e04 <HAL_SPI_RxHalfCpltCallback>
}
 8001e10:	bd08      	pop	{r3, pc}
 8001e12:	bf00      	nop

08001e14 <HAL_SPI_TxRxHalfCpltCallback>:
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop

08001e18 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8001e18:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8001e1a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001e1c:	f7ff fffa 	bl	8001e14 <HAL_SPI_TxRxHalfCpltCallback>
}
 8001e20:	bd08      	pop	{r3, pc}
 8001e22:	bf00      	nop

08001e24 <HAL_SPI_ErrorCallback>:
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop

08001e28 <SPI_DMAError>:
{
 8001e28:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001e2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001e2c:	6819      	ldr	r1, [r3, #0]
 8001e2e:	684a      	ldr	r2, [r1, #4]
 8001e30:	f022 0203 	bic.w	r2, r2, #3
 8001e34:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001e36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001e38:	2101      	movs	r1, #1
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001e3a:	f042 0210 	orr.w	r2, r2, #16
 8001e3e:	655a      	str	r2, [r3, #84]	; 0x54
  HAL_SPI_ErrorCallback(hspi);
 8001e40:	4618      	mov	r0, r3
  hspi->State = HAL_SPI_STATE_READY;
 8001e42:	f883 1051 	strb.w	r1, [r3, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8001e46:	f7ff ffed 	bl	8001e24 <HAL_SPI_ErrorCallback>
}
 8001e4a:	bd08      	pop	{r3, pc}

08001e4c <SPI_DMAReceiveCplt>:
{
 8001e4c:	b538      	push	{r3, r4, r5, lr}
 8001e4e:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001e50:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8001e52:	f7fe ffe1 	bl	8000e18 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8001e56:	682b      	ldr	r3, [r5, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	05db      	lsls	r3, r3, #23
 8001e5c:	d419      	bmi.n	8001e92 <SPI_DMAReceiveCplt+0x46>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001e5e:	6823      	ldr	r3, [r4, #0]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001e60:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001e62:	6859      	ldr	r1, [r3, #4]
 8001e64:	f021 0120 	bic.w	r1, r1, #32
 8001e68:	6059      	str	r1, [r3, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001e6a:	b1b2      	cbz	r2, 8001e9a <SPI_DMAReceiveCplt+0x4e>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001e6c:	6859      	ldr	r1, [r3, #4]
 8001e6e:	f021 0101 	bic.w	r1, r1, #1
 8001e72:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001e74:	4602      	mov	r2, r0
 8001e76:	2164      	movs	r1, #100	; 0x64
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f7ff fe2b 	bl	8001ad4 <SPI_EndRxTransaction>
 8001e7e:	b108      	cbz	r0, 8001e84 <SPI_DMAReceiveCplt+0x38>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e80:	2320      	movs	r3, #32
 8001e82:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8001e84:	2301      	movs	r3, #1
    hspi->RxXferCount = 0U;
 8001e86:	2200      	movs	r2, #0
 8001e88:	87e2      	strh	r2, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8001e8a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e90:	b963      	cbnz	r3, 8001eac <SPI_DMAReceiveCplt+0x60>
  HAL_SPI_RxCpltCallback(hspi);
 8001e92:	4620      	mov	r0, r4
 8001e94:	f7fe fcbc 	bl	8000810 <HAL_SPI_RxCpltCallback>
}
 8001e98:	bd38      	pop	{r3, r4, r5, pc}
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001e9a:	6862      	ldr	r2, [r4, #4]
 8001e9c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001ea0:	d1e4      	bne.n	8001e6c <SPI_DMAReceiveCplt+0x20>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	f022 0203 	bic.w	r2, r2, #3
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	e7e3      	b.n	8001e74 <SPI_DMAReceiveCplt+0x28>
      HAL_SPI_ErrorCallback(hspi);
 8001eac:	4620      	mov	r0, r4
 8001eae:	f7ff ffb9 	bl	8001e24 <HAL_SPI_ErrorCallback>
}
 8001eb2:	bd38      	pop	{r3, r4, r5, pc}

08001eb4 <SPI_DMATransmitReceiveCplt>:
{
 8001eb4:	b538      	push	{r3, r4, r5, lr}
 8001eb6:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001eb8:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8001eba:	f7fe ffad 	bl	8000e18 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8001ebe:	682b      	ldr	r3, [r5, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	05db      	lsls	r3, r3, #23
 8001ec4:	d41b      	bmi.n	8001efe <SPI_DMATransmitReceiveCplt+0x4a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001ec6:	6821      	ldr	r1, [r4, #0]
 8001ec8:	684b      	ldr	r3, [r1, #4]
 8001eca:	f023 0320 	bic.w	r3, r3, #32
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001ece:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001ed0:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	2164      	movs	r1, #100	; 0x64
 8001ed6:	f7ff fe31 	bl	8001b3c <SPI_EndRxTxTransaction>
 8001eda:	b118      	cbz	r0, 8001ee4 <SPI_DMATransmitReceiveCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001edc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ede:	f043 0320 	orr.w	r3, r3, #32
 8001ee2:	6563      	str	r3, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001ee4:	6821      	ldr	r1, [r4, #0]
 8001ee6:	684b      	ldr	r3, [r1, #4]
    hspi->TxXferCount = 0U;
 8001ee8:	2200      	movs	r2, #0
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001eea:	f023 0303 	bic.w	r3, r3, #3
    hspi->State = HAL_SPI_STATE_READY;
 8001eee:	2001      	movs	r0, #1
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001ef0:	604b      	str	r3, [r1, #4]
    hspi->TxXferCount = 0U;
 8001ef2:	86e2      	strh	r2, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8001ef4:	87e2      	strh	r2, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8001ef6:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001efa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001efc:	b91b      	cbnz	r3, 8001f06 <SPI_DMATransmitReceiveCplt+0x52>
  HAL_SPI_TxRxCpltCallback(hspi);
 8001efe:	4620      	mov	r0, r4
 8001f00:	f7ff ff7e 	bl	8001e00 <HAL_SPI_TxRxCpltCallback>
}
 8001f04:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8001f06:	4620      	mov	r0, r4
 8001f08:	f7ff ff8c 	bl	8001e24 <HAL_SPI_ErrorCallback>
}
 8001f0c:	bd38      	pop	{r3, r4, r5, pc}
 8001f0e:	bf00      	nop

08001f10 <__libc_init_array>:
 8001f10:	b570      	push	{r4, r5, r6, lr}
 8001f12:	4e0d      	ldr	r6, [pc, #52]	; (8001f48 <__libc_init_array+0x38>)
 8001f14:	4c0d      	ldr	r4, [pc, #52]	; (8001f4c <__libc_init_array+0x3c>)
 8001f16:	1ba4      	subs	r4, r4, r6
 8001f18:	10a4      	asrs	r4, r4, #2
 8001f1a:	2500      	movs	r5, #0
 8001f1c:	42a5      	cmp	r5, r4
 8001f1e:	d109      	bne.n	8001f34 <__libc_init_array+0x24>
 8001f20:	4e0b      	ldr	r6, [pc, #44]	; (8001f50 <__libc_init_array+0x40>)
 8001f22:	4c0c      	ldr	r4, [pc, #48]	; (8001f54 <__libc_init_array+0x44>)
 8001f24:	f000 f82c 	bl	8001f80 <_init>
 8001f28:	1ba4      	subs	r4, r4, r6
 8001f2a:	10a4      	asrs	r4, r4, #2
 8001f2c:	2500      	movs	r5, #0
 8001f2e:	42a5      	cmp	r5, r4
 8001f30:	d105      	bne.n	8001f3e <__libc_init_array+0x2e>
 8001f32:	bd70      	pop	{r4, r5, r6, pc}
 8001f34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f38:	4798      	blx	r3
 8001f3a:	3501      	adds	r5, #1
 8001f3c:	e7ee      	b.n	8001f1c <__libc_init_array+0xc>
 8001f3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f42:	4798      	blx	r3
 8001f44:	3501      	adds	r5, #1
 8001f46:	e7f2      	b.n	8001f2e <__libc_init_array+0x1e>
 8001f48:	08001fb8 	.word	0x08001fb8
 8001f4c:	08001fb8 	.word	0x08001fb8
 8001f50:	08001fb8 	.word	0x08001fb8
 8001f54:	08001fbc 	.word	0x08001fbc

08001f58 <memcpy>:
 8001f58:	b510      	push	{r4, lr}
 8001f5a:	1e43      	subs	r3, r0, #1
 8001f5c:	440a      	add	r2, r1
 8001f5e:	4291      	cmp	r1, r2
 8001f60:	d100      	bne.n	8001f64 <memcpy+0xc>
 8001f62:	bd10      	pop	{r4, pc}
 8001f64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f6c:	e7f7      	b.n	8001f5e <memcpy+0x6>

08001f6e <memset>:
 8001f6e:	4402      	add	r2, r0
 8001f70:	4603      	mov	r3, r0
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d100      	bne.n	8001f78 <memset+0xa>
 8001f76:	4770      	bx	lr
 8001f78:	f803 1b01 	strb.w	r1, [r3], #1
 8001f7c:	e7f9      	b.n	8001f72 <memset+0x4>
	...

08001f80 <_init>:
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f82:	bf00      	nop
 8001f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f86:	bc08      	pop	{r3}
 8001f88:	469e      	mov	lr, r3
 8001f8a:	4770      	bx	lr

08001f8c <_fini>:
 8001f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8e:	bf00      	nop
 8001f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f92:	bc08      	pop	{r3}
 8001f94:	469e      	mov	lr, r3
 8001f96:	4770      	bx	lr
