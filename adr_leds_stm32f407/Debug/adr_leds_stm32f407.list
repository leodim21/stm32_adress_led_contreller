
adr_leds_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002484  08002484  00012484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800249c  0800249c  000254a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800249c  0800249c  0001249c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024a4  080024a4  000254a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024a4  080024a4  000124a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024a8  080024a8  000124a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000054a4  20000000  080024ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055a8  200054a4  08007950  000254a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  2000aa4c  08007950  0002aa4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000254a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d65  00000000  00000000  000254d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001916  00000000  00000000  0002f239  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000035d5  00000000  00000000  00030b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000640  00000000  00000000  00034128  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000638  00000000  00000000  00034768  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001fe34  00000000  00000000  00034da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000633b  00000000  00000000  00054bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000c0e19  00000000  00000000  0005af0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0011bd28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001024  00000000  00000000  0011bda4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200054a4 	.word	0x200054a4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800246c 	.word	0x0800246c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200054a8 	.word	0x200054a8
 80001c4:	0800246c 	.word	0x0800246c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004cc:	2230      	movs	r2, #48	; 0x30
 80004ce:	2100      	movs	r1, #0
 80004d0:	a808      	add	r0, sp, #32
 80004d2:	f001 ffc2 	bl	800245a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d6:	2400      	movs	r4, #0
 80004d8:	9403      	str	r4, [sp, #12]
 80004da:	9404      	str	r4, [sp, #16]
 80004dc:	9405      	str	r4, [sp, #20]
 80004de:	9406      	str	r4, [sp, #24]
 80004e0:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	9401      	str	r4, [sp, #4]
 80004e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004f2:	641a      	str	r2, [r3, #64]	; 0x40
 80004f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004fe:	9402      	str	r4, [sp, #8]
 8000500:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000504:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000516:	9302      	str	r3, [sp, #8]
 8000518:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800051a:	2309      	movs	r3, #9
 800051c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800051e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000522:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000524:	2301      	movs	r3, #1
 8000526:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000528:	2502      	movs	r5, #2
 800052a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800052c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000530:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000532:	2304      	movs	r3, #4
 8000534:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000536:	22c8      	movs	r2, #200	; 0xc8
 8000538:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800053a:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800053c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	a808      	add	r0, sp, #32
 8000540:	f001 f8dc 	bl	80016fc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000544:	230f      	movs	r3, #15
 8000546:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000548:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800054c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000550:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000556:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000558:	2105      	movs	r1, #5
 800055a:	a803      	add	r0, sp, #12
 800055c:	f001 fbb2 	bl	8001cc4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000560:	b015      	add	sp, #84	; 0x54
 8000562:	bd30      	pop	{r4, r5, pc}

08000564 <LED_SendData>:
	TIM8->BDTR&= ~TIM_BDTR_MOE;     		//MOE: Main output enable
	TIM8->CR1 &= ~TIM_CR1_CEN; 			//Bit 0 CEN: Counter enable
}

void LED_SendData( uint16_t data_len )
{
 8000564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!((TIM1->CR1 & TIM_CR1_CEN)||(TIM4->CR1 & TIM_CR1_CEN)))
 8000568:	2300      	movs	r3, #0
 800056a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f013 0f01 	tst.w	r3, #1
 8000574:	d107      	bne.n	8000586 <LED_SendData+0x22>
 8000576:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800057a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f013 0f01 	tst.w	r3, #1
 8000584:	d001      	beq.n	800058a <LED_SendData+0x26>
		TIM1->CR1 |= TIM_CR1_CEN;
		TIM8->CR1 |= TIM_CR1_CEN;


	}
}
 8000586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800058a:	4605      	mov	r5, r0
		memcpy( local.buff_s.data_buf, add_leds_buff.data_buf, PIXELS_NUM*24);
 800058c:	f240 0400 	movw	r4, #0
 8000590:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000594:	f245 4260 	movw	r2, #21600	; 0x5460
 8000598:	f245 41c0 	movw	r1, #21696	; 0x54c0
 800059c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80005a0:	4620      	mov	r0, r4
 80005a2:	f001 ff4f 	bl	8002444 <memcpy>
		local.data_buf[0] = (uint8_t *)local.buff_s.led_data.line1;
 80005a6:	f245 4364 	movw	r3, #21604	; 0x5464
 80005aa:	50e4      	str	r4, [r4, r3]
		local.data_buf[1] = (uint8_t *)local.buff_s.led_data.line2;
 80005ac:	f604 298c 	addw	r9, r4, #2700	; 0xa8c
 80005b0:	f245 4368 	movw	r3, #21608	; 0x5468
 80005b4:	f844 9003 	str.w	r9, [r4, r3]
		local.data_buf[2] = (uint8_t *)local.buff_s.led_data.line3;
 80005b8:	f245 486c 	movw	r8, #21612	; 0x546c
 80005bc:	f609 238c 	addw	r3, r9, #2700	; 0xa8c
 80005c0:	f844 3008 	str.w	r3, [r4, r8]
		local.data_buf[3] = (uint8_t *)local.buff_s.led_data.line4;
 80005c4:	f245 4e70 	movw	lr, #21616	; 0x5470
 80005c8:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80005cc:	f844 300e 	str.w	r3, [r4, lr]
		local.data_buf[4] = (uint8_t *)local.buff_s.led_data.line5;
 80005d0:	f245 4174 	movw	r1, #21620	; 0x5474
 80005d4:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80005d8:	5063      	str	r3, [r4, r1]
		local.data_buf[5] = (uint8_t *)local.buff_s.led_data.line6;
 80005da:	f245 4c78 	movw	ip, #21624	; 0x5478
 80005de:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80005e2:	f844 300c 	str.w	r3, [r4, ip]
		local.data_buf[6] = (uint8_t *)local.buff_s.led_data.line7;
 80005e6:	f245 477c 	movw	r7, #21628	; 0x547c
 80005ea:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80005ee:	51e3      	str	r3, [r4, r7]
		local.data_buf[7] = (uint8_t *)local.buff_s.led_data.line8;
 80005f0:	f504 46a9 	add.w	r6, r4, #21632	; 0x5480
 80005f4:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80005f8:	6033      	str	r3, [r6, #0]
		local.data_len = data_len/8;
 80005fa:	08ed      	lsrs	r5, r5, #3
 80005fc:	f245 4384 	movw	r3, #21636	; 0x5484
 8000600:	52e5      	strh	r5, [r4, r3]
		local.send_start = 1;
 8000602:	f245 4392 	movw	r3, #21650	; 0x5492
 8000606:	2201      	movs	r2, #1
 8000608:	54e2      	strb	r2, [r4, r3]
		local.mem_buf_rd = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	f245 4294 	movw	r2, #21652	; 0x5494
 8000610:	54a3      	strb	r3, [r4, r2]
		local.bit_count = 0;
 8000612:	f245 428a 	movw	r2, #21642	; 0x548a
 8000616:	54a3      	strb	r3, [r4, r2]
		local.byte_count = 0;
 8000618:	f245 458c 	movw	r5, #21644	; 0x548c
 800061c:	5363      	strh	r3, [r4, r5]
		local.last_bit = 0;
 800061e:	f245 4093 	movw	r0, #21651	; 0x5493
 8000622:	5423      	strb	r3, [r4, r0]
		TIM1->CCR1 = local.pulse[(0x80 & local.data_buf[0][local.byte_count] << local.bit_count) >> 7];
 8000624:	7823      	ldrb	r3, [r4, #0]
 8000626:	11db      	asrs	r3, r3, #7
 8000628:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800062c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000630:	88db      	ldrh	r3, [r3, #6]
 8000632:	2000      	movs	r0, #0
 8000634:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000638:	6343      	str	r3, [r0, #52]	; 0x34
		TIM1->CCR2 = local.pulse[(0x80 & local.data_buf[1][local.byte_count] << local.bit_count) >> 7];
 800063a:	f894 3a8c 	ldrb.w	r3, [r4, #2700]	; 0xa8c
 800063e:	f814 9002 	ldrb.w	r9, [r4, r2]
 8000642:	fa03 f309 	lsl.w	r3, r3, r9
 8000646:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800064a:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800064e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000652:	88db      	ldrh	r3, [r3, #6]
 8000654:	6383      	str	r3, [r0, #56]	; 0x38
		TIM1->CCR3 = local.pulse[(0x80 & local.data_buf[2][local.byte_count] << local.bit_count) >> 7];
 8000656:	5b63      	ldrh	r3, [r4, r5]
 8000658:	f854 8008 	ldr.w	r8, [r4, r8]
 800065c:	f818 3003 	ldrb.w	r3, [r8, r3]
 8000660:	f814 8002 	ldrb.w	r8, [r4, r2]
 8000664:	fa03 f308 	lsl.w	r3, r3, r8
 8000668:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800066c:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8000670:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000674:	88db      	ldrh	r3, [r3, #6]
 8000676:	63c3      	str	r3, [r0, #60]	; 0x3c
		TIM1->CCR4 = local.pulse[(0x80 & local.data_buf[3][local.byte_count] << local.bit_count) >> 7];
 8000678:	5b63      	ldrh	r3, [r4, r5]
 800067a:	f854 e00e 	ldr.w	lr, [r4, lr]
 800067e:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8000682:	f814 e002 	ldrb.w	lr, [r4, r2]
 8000686:	fa03 f30e 	lsl.w	r3, r3, lr
 800068a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800068e:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8000692:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000696:	88db      	ldrh	r3, [r3, #6]
 8000698:	6403      	str	r3, [r0, #64]	; 0x40
		TIM8->CCR1 = local.pulse[(0x80 & local.data_buf[4][local.byte_count] << local.bit_count) >> 7];
 800069a:	5b63      	ldrh	r3, [r4, r5]
 800069c:	5861      	ldr	r1, [r4, r1]
 800069e:	5ccb      	ldrb	r3, [r1, r3]
 80006a0:	5ca1      	ldrb	r1, [r4, r2]
 80006a2:	408b      	lsls	r3, r1
 80006a4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80006a8:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80006ac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80006b0:	88db      	ldrh	r3, [r3, #6]
 80006b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80006ba:	634b      	str	r3, [r1, #52]	; 0x34
		TIM8->CCR2 = local.pulse[(0x80 & local.data_buf[5][local.byte_count] << local.bit_count) >> 7];
 80006bc:	5b63      	ldrh	r3, [r4, r5]
 80006be:	f854 c00c 	ldr.w	ip, [r4, ip]
 80006c2:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80006c6:	f814 c002 	ldrb.w	ip, [r4, r2]
 80006ca:	fa03 f30c 	lsl.w	r3, r3, ip
 80006ce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80006d2:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80006d6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80006da:	88db      	ldrh	r3, [r3, #6]
 80006dc:	638b      	str	r3, [r1, #56]	; 0x38
		TIM8->CCR3 = local.pulse[(0x80 & local.data_buf[6][local.byte_count] << local.bit_count) >> 7];
 80006de:	5b63      	ldrh	r3, [r4, r5]
 80006e0:	59e7      	ldr	r7, [r4, r7]
 80006e2:	5cfb      	ldrb	r3, [r7, r3]
 80006e4:	5ca7      	ldrb	r7, [r4, r2]
 80006e6:	40bb      	lsls	r3, r7
 80006e8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80006ec:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80006f0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80006f4:	88db      	ldrh	r3, [r3, #6]
 80006f6:	63cb      	str	r3, [r1, #60]	; 0x3c
		TIM8->CCR4 = local.pulse[(0x80 & local.data_buf[7][local.byte_count] << local.bit_count) >> 7];
 80006f8:	5b63      	ldrh	r3, [r4, r5]
 80006fa:	6835      	ldr	r5, [r6, #0]
 80006fc:	5ceb      	ldrb	r3, [r5, r3]
 80006fe:	5ca2      	ldrb	r2, [r4, r2]
 8000700:	4093      	lsls	r3, r2
 8000702:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000706:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800070a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800070e:	88e3      	ldrh	r3, [r4, #6]
 8000710:	640b      	str	r3, [r1, #64]	; 0x40
		TIM1->CR1 |= TIM_CR1_CEN;
 8000712:	6803      	ldr	r3, [r0, #0]
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6003      	str	r3, [r0, #0]
		TIM8->CR1 |= TIM_CR1_CEN;
 800071a:	680b      	ldr	r3, [r1, #0]
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	600b      	str	r3, [r1, #0]
}
 8000722:	e730      	b.n	8000586 <LED_SendData+0x22>

08000724 <TIM1_UPD_Servo_Set>:
	TIM8->CR1 &= ~TIM_CR1_CEN;

	local.send_start = 0;
}
void TIM1_UPD_Servo_Set( void )
{
 8000724:	b470      	push	{r4, r5, r6}
	if(local.bit_count++ > 6)
 8000726:	f240 0300 	movw	r3, #0
 800072a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800072e:	f245 428a 	movw	r2, #21642	; 0x548a
 8000732:	5c9b      	ldrb	r3, [r3, r2]
 8000734:	2b06      	cmp	r3, #6
 8000736:	f200 809e 	bhi.w	8000876 <TIM1_UPD_Servo_Set+0x152>
 800073a:	f240 0200 	movw	r2, #0
 800073e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000742:	3301      	adds	r3, #1
 8000744:	f245 418a 	movw	r1, #21642	; 0x548a
 8000748:	5453      	strb	r3, [r2, r1]
	{
		local.bit_count = 0;
		local.byte_count++;
	}
	TIM1->CCR1 = local.pulse[(0x80 & local.data_buf[0][local.byte_count] << local.bit_count) >> 7];
 800074a:	f240 0300 	movw	r3, #0
 800074e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000752:	f245 428c 	movw	r2, #21644	; 0x548c
 8000756:	5a99      	ldrh	r1, [r3, r2]
 8000758:	f245 4064 	movw	r0, #21604	; 0x5464
 800075c:	5818      	ldr	r0, [r3, r0]
 800075e:	5c41      	ldrb	r1, [r0, r1]
 8000760:	f245 448a 	movw	r4, #21642	; 0x548a
 8000764:	5d18      	ldrb	r0, [r3, r4]
 8000766:	4081      	lsls	r1, r0
 8000768:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 800076c:	f501 5129 	add.w	r1, r1, #10816	; 0x2a40
 8000770:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8000774:	88c9      	ldrh	r1, [r1, #6]
 8000776:	2000      	movs	r0, #0
 8000778:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800077c:	6341      	str	r1, [r0, #52]	; 0x34
	TIM1->CCR2 = local.pulse[(0x80 & local.data_buf[1][local.byte_count] << local.bit_count) >> 7];
 800077e:	5a99      	ldrh	r1, [r3, r2]
 8000780:	f245 4568 	movw	r5, #21608	; 0x5468
 8000784:	595d      	ldr	r5, [r3, r5]
 8000786:	5c69      	ldrb	r1, [r5, r1]
 8000788:	5d1d      	ldrb	r5, [r3, r4]
 800078a:	40a9      	lsls	r1, r5
 800078c:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 8000790:	f501 5129 	add.w	r1, r1, #10816	; 0x2a40
 8000794:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8000798:	88c9      	ldrh	r1, [r1, #6]
 800079a:	6381      	str	r1, [r0, #56]	; 0x38
	TIM1->CCR3 = local.pulse[(0x80 & local.data_buf[2][local.byte_count] << local.bit_count) >> 7];
 800079c:	5a99      	ldrh	r1, [r3, r2]
 800079e:	f245 456c 	movw	r5, #21612	; 0x546c
 80007a2:	595d      	ldr	r5, [r3, r5]
 80007a4:	5c69      	ldrb	r1, [r5, r1]
 80007a6:	5d1d      	ldrb	r5, [r3, r4]
 80007a8:	40a9      	lsls	r1, r5
 80007aa:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 80007ae:	f501 5129 	add.w	r1, r1, #10816	; 0x2a40
 80007b2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80007b6:	88c9      	ldrh	r1, [r1, #6]
 80007b8:	63c1      	str	r1, [r0, #60]	; 0x3c
	TIM8->CCR4 = local.pulse[(0x80 & local.data_buf[3][local.byte_count] << local.bit_count) >> 7];
 80007ba:	5a99      	ldrh	r1, [r3, r2]
 80007bc:	f245 4570 	movw	r5, #21616	; 0x5470
 80007c0:	595d      	ldr	r5, [r3, r5]
 80007c2:	5c69      	ldrb	r1, [r5, r1]
 80007c4:	5d1d      	ldrb	r5, [r3, r4]
 80007c6:	40a9      	lsls	r1, r5
 80007c8:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 80007cc:	f501 5129 	add.w	r1, r1, #10816	; 0x2a40
 80007d0:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80007d4:	88c9      	ldrh	r1, [r1, #6]
 80007d6:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80007da:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80007de:	6429      	str	r1, [r5, #64]	; 0x40

	TIM8->CCR1 = local.pulse[(0x80 & local.data_buf[4][local.byte_count] << local.bit_count) >> 7];
 80007e0:	5a99      	ldrh	r1, [r3, r2]
 80007e2:	f245 4674 	movw	r6, #21620	; 0x5474
 80007e6:	599e      	ldr	r6, [r3, r6]
 80007e8:	5c71      	ldrb	r1, [r6, r1]
 80007ea:	5d1e      	ldrb	r6, [r3, r4]
 80007ec:	40b1      	lsls	r1, r6
 80007ee:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 80007f2:	f501 5129 	add.w	r1, r1, #10816	; 0x2a40
 80007f6:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80007fa:	88c9      	ldrh	r1, [r1, #6]
 80007fc:	6369      	str	r1, [r5, #52]	; 0x34
	TIM8->CCR2 = local.pulse[(0x80 & local.data_buf[5][local.byte_count] << local.bit_count) >> 7];
 80007fe:	5a99      	ldrh	r1, [r3, r2]
 8000800:	f245 4678 	movw	r6, #21624	; 0x5478
 8000804:	599e      	ldr	r6, [r3, r6]
 8000806:	5c71      	ldrb	r1, [r6, r1]
 8000808:	5d1e      	ldrb	r6, [r3, r4]
 800080a:	40b1      	lsls	r1, r6
 800080c:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 8000810:	f501 5129 	add.w	r1, r1, #10816	; 0x2a40
 8000814:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8000818:	88c9      	ldrh	r1, [r1, #6]
 800081a:	63a9      	str	r1, [r5, #56]	; 0x38
	TIM8->CCR3 = local.pulse[(0x80 & local.data_buf[6][local.byte_count] << local.bit_count) >> 7];
 800081c:	5a99      	ldrh	r1, [r3, r2]
 800081e:	f245 467c 	movw	r6, #21628	; 0x547c
 8000822:	599e      	ldr	r6, [r3, r6]
 8000824:	5c71      	ldrb	r1, [r6, r1]
 8000826:	5d1e      	ldrb	r6, [r3, r4]
 8000828:	40b1      	lsls	r1, r6
 800082a:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 800082e:	f501 5129 	add.w	r1, r1, #10816	; 0x2a40
 8000832:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8000836:	88c9      	ldrh	r1, [r1, #6]
 8000838:	63e9      	str	r1, [r5, #60]	; 0x3c
	TIM1->CCR4 = local.pulse[(0x80 & local.data_buf[7][local.byte_count] << local.bit_count) >> 7];
 800083a:	5a99      	ldrh	r1, [r3, r2]
 800083c:	f503 45a9 	add.w	r5, r3, #21632	; 0x5480
 8000840:	682d      	ldr	r5, [r5, #0]
 8000842:	5c69      	ldrb	r1, [r5, r1]
 8000844:	5d1c      	ldrb	r4, [r3, r4]
 8000846:	40a1      	lsls	r1, r4
 8000848:	f3c1 11c0 	ubfx	r1, r1, #7, #1
 800084c:	f501 5129 	add.w	r1, r1, #10816	; 0x2a40
 8000850:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8000854:	88c9      	ldrh	r1, [r1, #6]
 8000856:	6401      	str	r1, [r0, #64]	; 0x40

	( local.byte_count == local.data_len )?( TIM_SendEnd() ):( TIM1->CR1 |= TIM_CR1_CEN );
 8000858:	5a9a      	ldrh	r2, [r3, r2]
 800085a:	f245 4184 	movw	r1, #21636	; 0x5484
 800085e:	5a5b      	ldrh	r3, [r3, r1]
 8000860:	429a      	cmp	r2, r3
 8000862:	d016      	beq.n	8000892 <TIM1_UPD_Servo_Set+0x16e>
 8000864:	2300      	movs	r3, #0
 8000866:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	f042 0201 	orr.w	r2, r2, #1
 8000870:	601a      	str	r2, [r3, #0]
}
 8000872:	bc70      	pop	{r4, r5, r6}
 8000874:	4770      	bx	lr
		local.bit_count = 0;
 8000876:	f240 0300 	movw	r3, #0
 800087a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800087e:	f245 428a 	movw	r2, #21642	; 0x548a
 8000882:	2100      	movs	r1, #0
 8000884:	5499      	strb	r1, [r3, r2]
		local.byte_count++;
 8000886:	f245 418c 	movw	r1, #21644	; 0x548c
 800088a:	5a5a      	ldrh	r2, [r3, r1]
 800088c:	3201      	adds	r2, #1
 800088e:	525a      	strh	r2, [r3, r1]
 8000890:	e75b      	b.n	800074a <TIM1_UPD_Servo_Set+0x26>
	TIM1->BDTR&= ~TIM_BDTR_MOE;
 8000892:	2200      	movs	r2, #0
 8000894:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000898:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800089a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800089e:	6453      	str	r3, [r2, #68]	; 0x44
	TIM8->BDTR&= ~TIM_BDTR_MOE;
 80008a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80008a8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80008aa:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80008ae:	6459      	str	r1, [r3, #68]	; 0x44
	TIM1->CR1 &= ~TIM_CR1_CEN;
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	f021 0101 	bic.w	r1, r1, #1
 80008b6:	6011      	str	r1, [r2, #0]
	TIM8->CR1 &= ~TIM_CR1_CEN;
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	f022 0201 	bic.w	r2, r2, #1
 80008be:	601a      	str	r2, [r3, #0]
	local.send_start = 0;
 80008c0:	f240 0300 	movw	r3, #0
 80008c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008c8:	f245 4292 	movw	r2, #21650	; 0x5492
 80008cc:	2100      	movs	r1, #0
 80008ce:	5499      	strb	r1, [r3, r2]
 80008d0:	e7cf      	b.n	8000872 <TIM1_UPD_Servo_Set+0x14e>

080008d2 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback( SPI_HandleTypeDef *hspi )
{
	if (hspi == &hspi1)
 80008d2:	f64a 1330 	movw	r3, #43312	; 0xa930
 80008d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008da:	4283      	cmp	r3, r0
 80008dc:	d000      	beq.n	80008e0 <HAL_SPI_RxCpltCallback+0xe>
	{
//		HAL_SPI_Receive_DMA(&hspi1,add_leds_buff.data_buf, PIXELS_NUM*24);
		local.mem_buf_rd = 1;
	}
}
 80008de:	4770      	bx	lr
		local.mem_buf_rd = 1;
 80008e0:	f240 0300 	movw	r3, #0
 80008e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008e8:	f245 4294 	movw	r2, #21652	; 0x5494
 80008ec:	2101      	movs	r1, #1
 80008ee:	5499      	strb	r1, [r3, r2]
}
 80008f0:	e7f5      	b.n	80008de <HAL_SPI_RxCpltCallback+0xc>

080008f2 <Delay>:
void Delay( uint16_t ms )
{
	uint16_t tmp_ms = ms;
	while(tmp_ms--)
 80008f2:	b1a0      	cbz	r0, 800091e <Delay+0x2c>
{
 80008f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008f6:	1e44      	subs	r4, r0, #1
 80008f8:	b2a4      	uxth	r4, r4
	{
		HAL_Delay(1);
 80008fa:	2701      	movs	r7, #1
		HAL_IWDG_Refresh(&hiwdg);
 80008fc:	f64a 1524 	movw	r5, #43300	; 0xa924
 8000900:	f2c2 0500 	movt	r5, #8192	; 0x2000
	while(tmp_ms--)
 8000904:	f64f 76ff 	movw	r6, #65535	; 0xffff
		HAL_Delay(1);
 8000908:	4638      	mov	r0, r7
 800090a:	f000 fb5c 	bl	8000fc6 <HAL_Delay>
		HAL_IWDG_Refresh(&hiwdg);
 800090e:	4628      	mov	r0, r5
 8000910:	f000 feee 	bl	80016f0 <HAL_IWDG_Refresh>
	while(tmp_ms--)
 8000914:	3c01      	subs	r4, #1
 8000916:	b2a4      	uxth	r4, r4
 8000918:	42b4      	cmp	r4, r6
 800091a:	d1f5      	bne.n	8000908 <Delay+0x16>
	}
}
 800091c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800091e:	4770      	bx	lr

08000920 <main>:
{
 8000920:	b500      	push	{lr}
 8000922:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000924:	f000 fb21 	bl	8000f6a <HAL_Init>
  SystemClock_Config();
 8000928:	f7ff fdce 	bl	80004c8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	2400      	movs	r4, #0
 800092e:	9404      	str	r4, [sp, #16]
 8000930:	9405      	str	r4, [sp, #20]
 8000932:	9406      	str	r4, [sp, #24]
 8000934:	9407      	str	r4, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	9400      	str	r4, [sp, #0]
 8000938:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 800093c:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8000940:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000946:	632b      	str	r3, [r5, #48]	; 0x30
 8000948:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	9401      	str	r4, [sp, #4]
 8000954:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	632b      	str	r3, [r5, #48]	; 0x30
 800095c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	9301      	str	r3, [sp, #4]
 8000964:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	9402      	str	r4, [sp, #8]
 8000968:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800096a:	f043 0302 	orr.w	r3, r3, #2
 800096e:	632b      	str	r3, [r5, #48]	; 0x30
 8000970:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	9302      	str	r3, [sp, #8]
 8000978:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800097a:	a908      	add	r1, sp, #32
 800097c:	2301      	movs	r3, #1
 800097e:	f841 3d14 	str.w	r3, [r1, #-20]!
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	4620      	mov	r0, r4
 8000984:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000988:	f000 fd82 	bl	8001490 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800098c:	9403      	str	r4, [sp, #12]
 800098e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000990:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000994:	632b      	str	r3, [r5, #48]	; 0x30
 8000996:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800099c:	9303      	str	r3, [sp, #12]
 800099e:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009a0:	4622      	mov	r2, r4
 80009a2:	4621      	mov	r1, r4
 80009a4:	2038      	movs	r0, #56	; 0x38
 80009a6:	f000 fb35 	bl	8001014 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009aa:	2038      	movs	r0, #56	; 0x38
 80009ac:	f000 fb67 	bl	800107e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80009b0:	4622      	mov	r2, r4
 80009b2:	4621      	mov	r1, r4
 80009b4:	203b      	movs	r0, #59	; 0x3b
 80009b6:	f000 fb2d 	bl	8001014 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80009ba:	203b      	movs	r0, #59	; 0x3b
 80009bc:	f000 fb5f 	bl	800107e <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 80009c0:	f64a 1630 	movw	r6, #43312	; 0xa930
 80009c4:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80009c8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80009d0:	6033      	str	r3, [r6, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009d2:	6074      	str	r4, [r6, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009d4:	60b4      	str	r4, [r6, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009d6:	60f4      	str	r4, [r6, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d8:	6134      	str	r4, [r6, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009da:	6174      	str	r4, [r6, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009e0:	61b3      	str	r3, [r6, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e2:	6234      	str	r4, [r6, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e4:	6274      	str	r4, [r6, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e6:	62b4      	str	r4, [r6, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009e8:	230a      	movs	r3, #10
 80009ea:	62f3      	str	r3, [r6, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ec:	4630      	mov	r0, r6
 80009ee:	f001 fb14 	bl	800201a <HAL_SPI_Init>
  hiwdg.Instance = IWDG;
 80009f2:	f64a 1024 	movw	r0, #43300	; 0xa924
 80009f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80009fa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000a02:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000a04:	6044      	str	r4, [r0, #4]
  hiwdg.Init.Reload = 400;
 8000a06:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000a0a:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000a0c:	f000 fe4b 	bl	80016a6 <HAL_IWDG_Init>
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000a10:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	632b      	str	r3, [r5, #48]	; 0x30
	GPIOE->AFR[1] |=  (1 << GPIO_AFRH_AFSEL9_Pos)
 8000a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a20:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000a22:	f241 0210 	movw	r2, #4112	; 0x1010
 8000a26:	f2c0 1210 	movt	r2, #272	; 0x110
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOE->MODER |= GPIO_MODER_MODER9_1
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	f042 5222 	orr.w	r2, r2, #679477248	; 0x28800000
 8000a34:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000a38:	601a      	str	r2, [r3, #0]
	GPIOE->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_0 | GPIO_OSPEEDER_OSPEEDR9_1
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	f042 5273 	orr.w	r2, r2, #1019215872	; 0x3cc00000
 8000a40:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8000a44:	609a      	str	r2, [r3, #8]
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000a46:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	646b      	str	r3, [r5, #68]	; 0x44
	TIM1->CR1 |= TIM_CR1_ARPE;
 8000a4e:	4623      	mov	r3, r4
 8000a50:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a5a:	601a      	str	r2, [r3, #0]
	TIM1->PSC = 0;
 8000a5c:	629c      	str	r4, [r3, #40]	; 0x28
	TIM1->ARR = PERIOD_SYG;
 8000a5e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a62:	62d8      	str	r0, [r3, #44]	; 0x2c
	TIM1->CCER |= TIM_CCER_CC1E;   	// Capture/Compare 1 output enable
 8000a64:	6a1a      	ldr	r2, [r3, #32]
 8000a66:	f042 0201 	orr.w	r2, r2, #1
 8000a6a:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC1P;
 8000a6c:	6a1a      	ldr	r2, [r3, #32]
 8000a6e:	f042 0202 	orr.w	r2, r2, #2
 8000a72:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC2E;   	// Capture/Compare 2 output enable
 8000a74:	6a1a      	ldr	r2, [r3, #32]
 8000a76:	f042 0210 	orr.w	r2, r2, #16
 8000a7a:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC2P;
 8000a7c:	6a1a      	ldr	r2, [r3, #32]
 8000a7e:	f042 0220 	orr.w	r2, r2, #32
 8000a82:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC3E;   	// Capture/Compare 2 output enable
 8000a84:	6a1a      	ldr	r2, [r3, #32]
 8000a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a8a:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC3P;
 8000a8c:	6a1a      	ldr	r2, [r3, #32]
 8000a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a92:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC4E;   	// Capture/Compare 2 output enable
 8000a94:	6a1a      	ldr	r2, [r3, #32]
 8000a96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a9a:	621a      	str	r2, [r3, #32]
	TIM1->CCER |= TIM_CCER_CC4P;
 8000a9c:	6a1a      	ldr	r2, [r3, #32]
 8000a9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000aa2:	621a      	str	r2, [r3, #32]
	TIM1->CCMR1 |= TIM_CCMR1_OC1PE;
 8000aa4:	699a      	ldr	r2, [r3, #24]
 8000aa6:	f042 0208 	orr.w	r2, r2, #8
 8000aaa:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8000aac:	699a      	ldr	r2, [r3, #24]
 8000aae:	f022 0210 	bic.w	r2, r2, #16
 8000ab2:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC1M_1;
 8000ab4:	699a      	ldr	r2, [r3, #24]
 8000ab6:	f042 0220 	orr.w	r2, r2, #32
 8000aba:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC1M_2; 	//110: PWM mode 1
 8000abc:	699a      	ldr	r2, [r3, #24]
 8000abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ac2:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC2PE;
 8000ac4:	699a      	ldr	r2, [r3, #24]
 8000ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000aca:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 &= ~TIM_CCMR1_OC2M_0;
 8000acc:	699a      	ldr	r2, [r3, #24]
 8000ace:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ad2:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC2M_1;
 8000ad4:	699a      	ldr	r2, [r3, #24]
 8000ad6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ada:	619a      	str	r2, [r3, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC2M_2; 	//110: PWM mode 1
 8000adc:	699a      	ldr	r2, [r3, #24]
 8000ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ae2:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2 |= TIM_CCMR2_OC3PE;
 8000ae4:	69da      	ldr	r2, [r3, #28]
 8000ae6:	f042 0208 	orr.w	r2, r2, #8
 8000aea:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 &= ~TIM_CCMR2_OC3M_0;
 8000aec:	69da      	ldr	r2, [r3, #28]
 8000aee:	f022 0210 	bic.w	r2, r2, #16
 8000af2:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC3M_1;
 8000af4:	69da      	ldr	r2, [r3, #28]
 8000af6:	f042 0220 	orr.w	r2, r2, #32
 8000afa:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC3M_2; 	//110: PWM mode 1
 8000afc:	69da      	ldr	r2, [r3, #28]
 8000afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b02:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC4PE;
 8000b04:	69da      	ldr	r2, [r3, #28]
 8000b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b0a:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 &= ~TIM_CCMR2_OC4M_0;
 8000b0c:	69da      	ldr	r2, [r3, #28]
 8000b0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000b12:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC4M_1;
 8000b14:	69da      	ldr	r2, [r3, #28]
 8000b16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b1a:	61da      	str	r2, [r3, #28]
	TIM1->CCMR2 |= TIM_CCMR2_OC4M_2; 	//110: PWM mode 1
 8000b1c:	69da      	ldr	r2, [r3, #28]
 8000b1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b22:	61da      	str	r2, [r3, #28]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b24:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000b28:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000b2c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000b30:	6011      	str	r1, [r2, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b32:	2110      	movs	r1, #16
 8000b34:	f882 1319 	strb.w	r1, [r2, #793]	; 0x319
	TIM1->DIER |= TIM_DIER_UIE;
 8000b38:	68da      	ldr	r2, [r3, #12]
 8000b3a:	f042 0201 	orr.w	r2, r2, #1
 8000b3e:	60da      	str	r2, [r3, #12]
	TIM1->BDTR|= TIM_BDTR_AOE;
 8000b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b46:	645a      	str	r2, [r3, #68]	; 0x44
	TIM1->BDTR&= ~TIM_BDTR_MOE;     	//MOE: Main output enable
 8000b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b4e:	645a      	str	r2, [r3, #68]	; 0x44
	TIM1->CR1 &= ~TIM_CR1_CEN; 			//Bit 0 CEN: Counter enable
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	f022 0201 	bic.w	r2, r2, #1
 8000b56:	601a      	str	r2, [r3, #0]
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000b58:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	632b      	str	r3, [r5, #48]	; 0x30
	GPIOC->AFR[0] |=  (3 << GPIO_AFRL_AFSEL6_Pos)
 8000b60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b68:	6a1a      	ldr	r2, [r3, #32]
 8000b6a:	f042 524c 	orr.w	r2, r2, #855638016	; 0x33000000
 8000b6e:	621a      	str	r2, [r3, #32]
	GPIOC->AFR[1] |=  (3 << GPIO_AFRH_AFSEL8_Pos)
 8000b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b72:	f042 0233 	orr.w	r2, r2, #51	; 0x33
 8000b76:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOC->MODER |= GPIO_MODER_MODER6_1
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	f442 222a 	orr.w	r2, r2, #696320	; 0xaa000
 8000b7e:	601a      	str	r2, [r3, #0]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_0 | GPIO_OSPEEDER_OSPEEDR6_1
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	f442 227f 	orr.w	r2, r2, #1044480	; 0xff000
 8000b86:	609a      	str	r2, [r3, #8]
	RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 8000b88:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000b8a:	f043 0302 	orr.w	r3, r3, #2
 8000b8e:	646b      	str	r3, [r5, #68]	; 0x44
	TIM8->CR1 |= TIM_CR1_ARPE;
 8000b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b94:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b9e:	601a      	str	r2, [r3, #0]
	TIM8->PSC = 0;
 8000ba0:	629c      	str	r4, [r3, #40]	; 0x28
	TIM8->ARR = PERIOD_SYG;
 8000ba2:	62d8      	str	r0, [r3, #44]	; 0x2c
	TIM8->CCER |= TIM_CCER_CC1E;   	// Capture/Compare 1 output enable
 8000ba4:	6a1a      	ldr	r2, [r3, #32]
 8000ba6:	f042 0201 	orr.w	r2, r2, #1
 8000baa:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC1P;
 8000bac:	6a1a      	ldr	r2, [r3, #32]
 8000bae:	f042 0202 	orr.w	r2, r2, #2
 8000bb2:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC2E;   	// Capture/Compare 2 output enable
 8000bb4:	6a1a      	ldr	r2, [r3, #32]
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC2P;
 8000bba:	6a1a      	ldr	r2, [r3, #32]
 8000bbc:	f042 0220 	orr.w	r2, r2, #32
 8000bc0:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC3E;   	// Capture/Compare 2 output enable
 8000bc2:	6a1a      	ldr	r2, [r3, #32]
 8000bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bc8:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC3P;
 8000bca:	6a1a      	ldr	r2, [r3, #32]
 8000bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bd0:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC4E;   	// Capture/Compare 2 output enable
 8000bd2:	6a1a      	ldr	r2, [r3, #32]
 8000bd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000bd8:	621a      	str	r2, [r3, #32]
	TIM8->CCER |= TIM_CCER_CC4P;
 8000bda:	6a1a      	ldr	r2, [r3, #32]
 8000bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000be0:	621a      	str	r2, [r3, #32]
	TIM8->CCMR1 |= TIM_CCMR1_OC1PE;
 8000be2:	699a      	ldr	r2, [r3, #24]
 8000be4:	f042 0208 	orr.w	r2, r2, #8
 8000be8:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 &= ~TIM_CCMR1_OC1M_0;
 8000bea:	699a      	ldr	r2, [r3, #24]
 8000bec:	f022 0210 	bic.w	r2, r2, #16
 8000bf0:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC1M_1;
 8000bf2:	699a      	ldr	r2, [r3, #24]
 8000bf4:	f042 0220 	orr.w	r2, r2, #32
 8000bf8:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC1M_2; 	//110: PWM mode 1
 8000bfa:	699a      	ldr	r2, [r3, #24]
 8000bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c00:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC2PE;
 8000c02:	699a      	ldr	r2, [r3, #24]
 8000c04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c08:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 &= ~TIM_CCMR1_OC2M_0;
 8000c0a:	699a      	ldr	r2, [r3, #24]
 8000c0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000c10:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC2M_1;
 8000c12:	699a      	ldr	r2, [r3, #24]
 8000c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c18:	619a      	str	r2, [r3, #24]
	TIM8->CCMR1 |= TIM_CCMR1_OC2M_2; 	//110: PWM mode 1
 8000c1a:	699a      	ldr	r2, [r3, #24]
 8000c1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c20:	619a      	str	r2, [r3, #24]
	TIM8->CCMR2 |= TIM_CCMR2_OC3PE;
 8000c22:	69da      	ldr	r2, [r3, #28]
 8000c24:	f042 0208 	orr.w	r2, r2, #8
 8000c28:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 &= ~TIM_CCMR2_OC3M_0;
 8000c2a:	69da      	ldr	r2, [r3, #28]
 8000c2c:	f022 0210 	bic.w	r2, r2, #16
 8000c30:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC3M_1;
 8000c32:	69da      	ldr	r2, [r3, #28]
 8000c34:	f042 0220 	orr.w	r2, r2, #32
 8000c38:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC3M_2; 	//110: PWM mode 1
 8000c3a:	69da      	ldr	r2, [r3, #28]
 8000c3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c40:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC4PE;
 8000c42:	69da      	ldr	r2, [r3, #28]
 8000c44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c48:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 &= ~TIM_CCMR2_OC4M_0;
 8000c4a:	69da      	ldr	r2, [r3, #28]
 8000c4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000c50:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC4M_1;
 8000c52:	69da      	ldr	r2, [r3, #28]
 8000c54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c58:	61da      	str	r2, [r3, #28]
	TIM8->CCMR2 |= TIM_CCMR2_OC4M_2; 	//110: PWM mode 1
 8000c5a:	69da      	ldr	r2, [r3, #28]
 8000c5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c60:	61da      	str	r2, [r3, #28]
	TIM8->BDTR|= TIM_BDTR_AOE;
 8000c62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c68:	645a      	str	r2, [r3, #68]	; 0x44
	TIM8->BDTR&= ~TIM_BDTR_MOE;     		//MOE: Main output enable
 8000c6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c70:	645a      	str	r2, [r3, #68]	; 0x44
	TIM8->CR1 &= ~TIM_CR1_CEN; 			//Bit 0 CEN: Counter enable
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	f022 0201 	bic.w	r2, r2, #1
 8000c78:	601a      	str	r2, [r3, #0]
  memset( add_leds_buff.data_buf, 0x10, PIXELS_NUM*24 );
 8000c7a:	f245 44c0 	movw	r4, #21696	; 0x54c0
 8000c7e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000c82:	f245 4260 	movw	r2, #21600	; 0x5460
 8000c86:	4620      	mov	r0, r4
 8000c88:	f001 fbe7 	bl	800245a <memset>
  HAL_SPI_Receive_DMA(&hspi1, add_leds_buff.data_buf, PIXELS_NUM*24);
 8000c8c:	f245 4260 	movw	r2, #21600	; 0x5460
 8000c90:	4621      	mov	r1, r4
 8000c92:	4630      	mov	r0, r6
 8000c94:	f001 fab1 	bl	80021fa <HAL_SPI_Receive_DMA>
		HAL_IWDG_Refresh(&hiwdg);
 8000c98:	f64a 1424 	movw	r4, #43300	; 0xa924
 8000c9c:	f2c2 0400 	movt	r4, #8192	; 0x2000
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000ca0:	2500      	movs	r5, #0
 8000ca2:	f2c4 0502 	movt	r5, #16386	; 0x4002
		if(local.mem_buf_rd)
 8000ca6:	f245 4694 	movw	r6, #21652	; 0x5494
 8000caa:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8000cae:	e001      	b.n	8000cb4 <main+0x394>
 8000cb0:	7833      	ldrb	r3, [r6, #0]
 8000cb2:	b983      	cbnz	r3, 8000cd6 <main+0x3b6>
		HAL_IWDG_Refresh(&hiwdg);
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f000 fd1b 	bl	80016f0 <HAL_IWDG_Refresh>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000cba:	2101      	movs	r1, #1
 8000cbc:	4628      	mov	r0, r5
 8000cbe:	f000 fcec 	bl	800169a <HAL_GPIO_ReadPin>
 8000cc2:	2800      	cmp	r0, #0
 8000cc4:	d0f4      	beq.n	8000cb0 <main+0x390>
			LED_SendData(PIXELS_NUM*24);
 8000cc6:	f245 4060 	movw	r0, #21600	; 0x5460
 8000cca:	f7ff fc4b 	bl	8000564 <LED_SendData>
			Delay(50);
 8000cce:	2032      	movs	r0, #50	; 0x32
 8000cd0:	f7ff fe0f 	bl	80008f2 <Delay>
 8000cd4:	e7ec      	b.n	8000cb0 <main+0x390>
			Delay(2);
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	f7ff fe0b 	bl	80008f2 <Delay>
			LED_SendData(PIXELS_NUM*24);
 8000cdc:	f245 4060 	movw	r0, #21600	; 0x5460
 8000ce0:	f7ff fc40 	bl	8000564 <LED_SendData>
 8000ce4:	e7e6      	b.n	8000cb4 <main+0x394>

08000ce6 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ce6:	4770      	bx	lr

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	2100      	movs	r1, #0
 8000cec:	9100      	str	r1, [sp, #0]
 8000cee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cf2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000cf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000cfc:	645a      	str	r2, [r3, #68]	; 0x44
 8000cfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d00:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000d04:	9200      	str	r2, [sp, #0]
 8000d06:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d08:	9101      	str	r1, [sp, #4]
 8000d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d10:	641a      	str	r2, [r3, #64]	; 0x40
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1c:	b002      	add	sp, #8
 8000d1e:	4770      	bx	lr

08000d20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d20:	b530      	push	{r4, r5, lr}
 8000d22:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	2300      	movs	r3, #0
 8000d26:	9303      	str	r3, [sp, #12]
 8000d28:	9304      	str	r3, [sp, #16]
 8000d2a:	9305      	str	r3, [sp, #20]
 8000d2c:	9306      	str	r3, [sp, #24]
 8000d2e:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8000d30:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d34:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000d38:	6802      	ldr	r2, [r0, #0]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d001      	beq.n	8000d42 <HAL_SPI_MspInit+0x22>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d3e:	b009      	add	sp, #36	; 0x24
 8000d40:	bd30      	pop	{r4, r5, pc}
 8000d42:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d44:	2500      	movs	r5, #0
 8000d46:	9501      	str	r5, [sp, #4]
 8000d48:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000d56:	645a      	str	r2, [r3, #68]	; 0x44
 8000d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d5a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000d5e:	9201      	str	r2, [sp, #4]
 8000d60:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	9502      	str	r5, [sp, #8]
 8000d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d66:	f042 0202 	orr.w	r2, r2, #2
 8000d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	9302      	str	r3, [sp, #8]
 8000d74:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d76:	2338      	movs	r3, #56	; 0x38
 8000d78:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d82:	2305      	movs	r3, #5
 8000d84:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	a903      	add	r1, sp, #12
 8000d88:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d8c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000d90:	f000 fb7e 	bl	8001490 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000d94:	f64a 1088 	movw	r0, #43400	; 0xa988
 8000d98:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000d9c:	f246 4310 	movw	r3, #25616	; 0x6410
 8000da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000da4:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000da6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000daa:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dac:	6085      	str	r5, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dae:	60c5      	str	r5, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db4:	6103      	str	r3, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000db6:	6145      	str	r5, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000db8:	6185      	str	r5, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dbe:	61c3      	str	r3, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000dc0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000dc4:	6203      	str	r3, [r0, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dc6:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000dc8:	f000 f999 	bl	80010fe <HAL_DMA_Init>
 8000dcc:	bb38      	cbnz	r0, 8000e1e <HAL_SPI_MspInit+0xfe>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000dce:	f64a 1388 	movw	r3, #43400	; 0xa988
 8000dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000dd6:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000dd8:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000dda:	f64a 10e8 	movw	r0, #43496	; 0xa9e8
 8000dde:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000de2:	f246 4358 	movw	r3, #25688	; 0x6458
 8000de6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000dea:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000dec:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000df0:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000df2:	2340      	movs	r3, #64	; 0x40
 8000df4:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dfe:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e00:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e02:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000e04:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e06:	6203      	str	r3, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e08:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000e0a:	f000 f978 	bl	80010fe <HAL_DMA_Init>
 8000e0e:	b948      	cbnz	r0, 8000e24 <HAL_SPI_MspInit+0x104>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000e10:	f64a 13e8 	movw	r3, #43496	; 0xa9e8
 8000e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e18:	64a3      	str	r3, [r4, #72]	; 0x48
 8000e1a:	639c      	str	r4, [r3, #56]	; 0x38
}
 8000e1c:	e78f      	b.n	8000d3e <HAL_SPI_MspInit+0x1e>
      Error_Handler();
 8000e1e:	f7ff ff62 	bl	8000ce6 <Error_Handler>
 8000e22:	e7d4      	b.n	8000dce <HAL_SPI_MspInit+0xae>
      Error_Handler();
 8000e24:	f7ff ff5f 	bl	8000ce6 <Error_Handler>
 8000e28:	e7f2      	b.n	8000e10 <HAL_SPI_MspInit+0xf0>

08000e2a <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e2a:	4770      	bx	lr

08000e2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2c:	e7fe      	b.n	8000e2c <HardFault_Handler>

08000e2e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2e:	e7fe      	b.n	8000e2e <MemManage_Handler>

08000e30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e30:	e7fe      	b.n	8000e30 <BusFault_Handler>

08000e32 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e32:	e7fe      	b.n	8000e32 <UsageFault_Handler>

08000e34 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e34:	4770      	bx	lr

08000e36 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e36:	4770      	bx	lr

08000e38 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e38:	4770      	bx	lr

08000e3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3c:	f000 f8b0 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e40:	bd08      	pop	{r3, pc}

08000e42 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e42:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e44:	f64a 1088 	movw	r0, #43400	; 0xa988
 8000e48:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000e4c:	f000 fa30 	bl	80012b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e50:	bd08      	pop	{r3, pc}

08000e52 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000e52:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e54:	f64a 10e8 	movw	r0, #43496	; 0xa9e8
 8000e58:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000e5c:	f000 fa28 	bl	80012b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000e60:	bd08      	pop	{r3, pc}

08000e62 <TIM1_UP_TIM10_IRQHandler>:

/* USER CODE BEGIN 1 */
void TIM1_UP_TIM10_IRQHandler( void )
{
 8000e62:	b508      	push	{r3, lr}
	if (TIM1->SR & TIM_SR_UIF)
 8000e64:	2300      	movs	r3, #0
 8000e66:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	f013 0f01 	tst.w	r3, #1
 8000e70:	d100      	bne.n	8000e74 <TIM1_UP_TIM10_IRQHandler+0x12>
	{
		TIM1->SR &= ~TIM_SR_UIF;
		TIM1_UPD_Servo_Set();
	}
}
 8000e72:	bd08      	pop	{r3, pc}
		TIM1->SR &= ~TIM_SR_UIF;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	f022 0201 	bic.w	r2, r2, #1
 8000e80:	611a      	str	r2, [r3, #16]
		TIM1_UPD_Servo_Set();
 8000e82:	f7ff fc4f 	bl	8000724 <TIM1_UPD_Servo_Set>
}
 8000e86:	e7f4      	b.n	8000e72 <TIM1_UP_TIM10_IRQHandler+0x10>

08000e88 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
	if (TIM4->SR & TIM_SR_UIF)
 8000e88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	f013 0f01 	tst.w	r3, #1
 8000e96:	d007      	beq.n	8000ea8 <TIM4_IRQHandler+0x20>
	{
		TIM4->SR &= ~TIM_SR_UIF;
 8000e98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e9c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000ea0:	691a      	ldr	r2, [r3, #16]
 8000ea2:	f022 0201 	bic.w	r2, r2, #1
 8000ea6:	611a      	str	r2, [r3, #16]
	}
}
 8000ea8:	4770      	bx	lr

08000eaa <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eaa:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000eae:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000eb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000eb6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000eba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ebe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ec2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ec4:	4770      	bx	lr
	...

08000ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ecc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ece:	e003      	b.n	8000ed8 <LoopCopyDataInit>

08000ed0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ed2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ed4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ed6:	3104      	adds	r1, #4

08000ed8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ed8:	480b      	ldr	r0, [pc, #44]	; (8000f08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000edc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ede:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ee0:	d3f6      	bcc.n	8000ed0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ee4:	e002      	b.n	8000eec <LoopFillZerobss>

08000ee6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ee6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ee8:	f842 3b04 	str.w	r3, [r2], #4

08000eec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000eee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ef0:	d3f9      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ef2:	f7ff ffda 	bl	8000eaa <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f001 fa81 	bl	80023fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efa:	f7ff fd11 	bl	8000920 <main>
  bx  lr    
 8000efe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f04:	080024ac 	.word	0x080024ac
  ldr  r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f0c:	200054a4 	.word	0x200054a4
  ldr  r2, =_sbss
 8000f10:	200054a4 	.word	0x200054a4
  ldr  r3, = _ebss
 8000f14:	2000aa4c 	.word	0x2000aa4c

08000f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC_IRQHandler>

08000f1a <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1a:	b510      	push	{r4, lr}
 8000f1c:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1e:	f245 4298 	movw	r2, #21656	; 0x5498
 8000f22:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000f26:	f245 439c 	movw	r3, #21660	; 0x549c
 8000f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f2e:	7818      	ldrb	r0, [r3, #0]
 8000f30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f34:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f38:	6810      	ldr	r0, [r2, #0]
 8000f3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f3e:	f000 f8ad 	bl	800109c <HAL_SYSTICK_Config>
 8000f42:	b980      	cbnz	r0, 8000f66 <HAL_InitTick+0x4c>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f44:	2c0f      	cmp	r4, #15
 8000f46:	d901      	bls.n	8000f4c <HAL_InitTick+0x32>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000f48:	2001      	movs	r0, #1
 8000f4a:	e00d      	b.n	8000f68 <HAL_InitTick+0x4e>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	4621      	mov	r1, r4
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f54:	f000 f85e 	bl	8001014 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f58:	f245 43a0 	movw	r3, #21664	; 0x54a0
 8000f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f60:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000f62:	2000      	movs	r0, #0
 8000f64:	e000      	b.n	8000f68 <HAL_InitTick+0x4e>
    return HAL_ERROR;
 8000f66:	2001      	movs	r0, #1
}
 8000f68:	bd10      	pop	{r4, pc}

08000f6a <HAL_Init>:
{
 8000f6a:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f6c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000f70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f7a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f82:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f8a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	f000 f82e 	bl	8000fee <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f7ff ffc1 	bl	8000f1a <HAL_InitTick>
  HAL_MspInit();
 8000f98:	f7ff fea6 	bl	8000ce8 <HAL_MspInit>
}
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	bd08      	pop	{r3, pc}

08000fa0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fa0:	f64a 2348 	movw	r3, #43592	; 0xaa48
 8000fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	f245 419c 	movw	r1, #21660	; 0x549c
 8000fae:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000fb2:	780a      	ldrb	r2, [r1, #0]
 8000fb4:	4402      	add	r2, r0
 8000fb6:	601a      	str	r2, [r3, #0]
}
 8000fb8:	4770      	bx	lr

08000fba <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fba:	f64a 2348 	movw	r3, #43592	; 0xaa48
 8000fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fc2:	6818      	ldr	r0, [r3, #0]
}
 8000fc4:	4770      	bx	lr

08000fc6 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc6:	b538      	push	{r3, r4, r5, lr}
 8000fc8:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fca:	f7ff fff6 	bl	8000fba <HAL_GetTick>
 8000fce:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000fd4:	d005      	beq.n	8000fe2 <HAL_Delay+0x1c>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd6:	f245 439c 	movw	r3, #21660	; 0x549c
 8000fda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fe2:	f7ff ffea 	bl	8000fba <HAL_GetTick>
 8000fe6:	1b40      	subs	r0, r0, r5
 8000fe8:	42a0      	cmp	r0, r4
 8000fea:	d3fa      	bcc.n	8000fe2 <HAL_Delay+0x1c>
  {
  }
}
 8000fec:	bd38      	pop	{r3, r4, r5, pc}

08000fee <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fee:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000ff2:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000ff6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ffc:	041b      	lsls	r3, r3, #16
 8000ffe:	0c1b      	lsrs	r3, r3, #16
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	0200      	lsls	r0, r0, #8
 800100a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800100e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001010:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001012:	4770      	bx	lr

08001014 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001014:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001016:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800101a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	f1c3 0407 	rsb	r4, r3, #7
 8001028:	2c04      	cmp	r4, #4
 800102a:	bf28      	it	cs
 800102c:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	1d1d      	adds	r5, r3, #4
 8001030:	2d06      	cmp	r5, #6
 8001032:	bf8c      	ite	hi
 8001034:	3b03      	subhi	r3, #3
 8001036:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800103c:	fa05 f404 	lsl.w	r4, r5, r4
 8001040:	ea21 0104 	bic.w	r1, r1, r4
 8001044:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001046:	fa05 f303 	lsl.w	r3, r5, r3
 800104a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001050:	2800      	cmp	r0, #0
 8001052:	db09      	blt.n	8001068 <HAL_NVIC_SetPriority+0x54>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	0109      	lsls	r1, r1, #4
 8001056:	b2c9      	uxtb	r1, r1
 8001058:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800105c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001060:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001064:	bc30      	pop	{r4, r5}
 8001066:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	f000 000f 	and.w	r0, r0, #15
 800106c:	0109      	lsls	r1, r1, #4
 800106e:	b2c9      	uxtb	r1, r1
 8001070:	f64e 43fc 	movw	r3, #60668	; 0xecfc
 8001074:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001078:	4403      	add	r3, r0
 800107a:	7619      	strb	r1, [r3, #24]
 800107c:	e7f2      	b.n	8001064 <HAL_NVIC_SetPriority+0x50>

0800107e <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800107e:	2800      	cmp	r0, #0
 8001080:	db0b      	blt.n	800109a <HAL_NVIC_EnableIRQ+0x1c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	0942      	lsrs	r2, r0, #5
 8001084:	f000 001f 	and.w	r0, r0, #31
 8001088:	2301      	movs	r3, #1
 800108a:	fa03 f000 	lsl.w	r0, r3, r0
 800108e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001092:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001096:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800109a:	4770      	bx	lr

0800109c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800109c:	3801      	subs	r0, #1
 800109e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010a2:	d210      	bcs.n	80010c6 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a4:	f24e 0310 	movw	r3, #57360	; 0xe010
 80010a8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80010ac:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80010b2:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80010b6:	21f0      	movs	r1, #240	; 0xf0
 80010b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010bc:	2000      	movs	r0, #0
 80010be:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010c8:	4770      	bx	lr

080010ca <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80010ca:	6802      	ldr	r2, [r0, #0]
 80010cc:	b2d3      	uxtb	r3, r2
 80010ce:	3b10      	subs	r3, #16
 80010d0:	f64a 21ab 	movw	r1, #43691	; 0xaaab
 80010d4:	f6ca 21aa 	movt	r1, #43690	; 0xaaaa
 80010d8:	fba1 1303 	umull	r1, r3, r1, r3
 80010dc:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80010de:	f242 4194 	movw	r1, #9364	; 0x2494
 80010e2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80010e6:	5cc9      	ldrb	r1, [r1, r3]
 80010e8:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80010ea:	2b03      	cmp	r3, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80010ec:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80010f0:	f022 0203 	bic.w	r2, r2, #3
 80010f4:	bf88      	it	hi
 80010f6:	3204      	addhi	r2, #4
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80010f8:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80010fa:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80010fc:	4770      	bx	lr

080010fe <HAL_DMA_Init>:
{
 80010fe:	b538      	push	{r3, r4, r5, lr}
 8001100:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001102:	f7ff ff5a 	bl	8000fba <HAL_GetTick>
  if(hdma == NULL)
 8001106:	2c00      	cmp	r4, #0
 8001108:	f000 808b 	beq.w	8001222 <HAL_DMA_Init+0x124>
 800110c:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 800110e:	2300      	movs	r3, #0
 8001110:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001114:	2302      	movs	r3, #2
 8001116:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800111a:	6822      	ldr	r2, [r4, #0]
 800111c:	6813      	ldr	r3, [r2, #0]
 800111e:	f023 0301 	bic.w	r3, r3, #1
 8001122:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001124:	6823      	ldr	r3, [r4, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	f012 0f01 	tst.w	r2, #1
 800112c:	d00a      	beq.n	8001144 <HAL_DMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800112e:	f7ff ff44 	bl	8000fba <HAL_GetTick>
 8001132:	1b40      	subs	r0, r0, r5
 8001134:	2805      	cmp	r0, #5
 8001136:	d9f5      	bls.n	8001124 <HAL_DMA_Init+0x26>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001138:	2320      	movs	r3, #32
 800113a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800113c:	2003      	movs	r0, #3
 800113e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001142:	bd38      	pop	{r3, r4, r5, pc}
  tmp = hdma->Instance->CR;
 8001144:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001146:	f248 003f 	movw	r0, #32831	; 0x803f
 800114a:	f2cf 0010 	movt	r0, #61456	; 0xf010
 800114e:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001150:	6861      	ldr	r1, [r4, #4]
 8001152:	68a2      	ldr	r2, [r4, #8]
 8001154:	430a      	orrs	r2, r1
 8001156:	68e1      	ldr	r1, [r4, #12]
 8001158:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800115a:	6921      	ldr	r1, [r4, #16]
 800115c:	430a      	orrs	r2, r1
 800115e:	6961      	ldr	r1, [r4, #20]
 8001160:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001162:	69a1      	ldr	r1, [r4, #24]
 8001164:	430a      	orrs	r2, r1
 8001166:	69e1      	ldr	r1, [r4, #28]
 8001168:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800116a:	6a21      	ldr	r1, [r4, #32]
 800116c:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800116e:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001170:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001172:	2904      	cmp	r1, #4
 8001174:	d015      	beq.n	80011a2 <HAL_DMA_Init+0xa4>
  hdma->Instance->CR = tmp;  
 8001176:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001178:	6821      	ldr	r1, [r4, #0]
 800117a:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800117c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001180:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001182:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001184:	2a04      	cmp	r2, #4
 8001186:	d115      	bne.n	80011b4 <HAL_DMA_Init+0xb6>
    tmp |= hdma->Init.FIFOThreshold;
 8001188:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800118a:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800118c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800118e:	b18a      	cbz	r2, 80011b4 <HAL_DMA_Init+0xb6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001190:	69a5      	ldr	r5, [r4, #24]
 8001192:	bb1d      	cbnz	r5, 80011dc <HAL_DMA_Init+0xde>
  {
    switch (tmp)
 8001194:	2801      	cmp	r0, #1
 8001196:	d01b      	beq.n	80011d0 <HAL_DMA_Init+0xd2>
 8001198:	b140      	cbz	r0, 80011ac <HAL_DMA_Init+0xae>
 800119a:	2802      	cmp	r0, #2
 800119c:	d006      	beq.n	80011ac <HAL_DMA_Init+0xae>
  HAL_StatusTypeDef status = HAL_OK;
 800119e:	2200      	movs	r2, #0
 80011a0:	e006      	b.n	80011b0 <HAL_DMA_Init+0xb2>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80011a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80011a6:	4301      	orrs	r1, r0
 80011a8:	430a      	orrs	r2, r1
 80011aa:	e7e4      	b.n	8001176 <HAL_DMA_Init+0x78>
  HAL_StatusTypeDef status = HAL_OK;
 80011ac:	f3c2 6200 	ubfx	r2, r2, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011b0:	2a00      	cmp	r2, #0
 80011b2:	d130      	bne.n	8001216 <HAL_DMA_Init+0x118>
  hdma->Instance->FCR = tmp;
 80011b4:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011b6:	4620      	mov	r0, r4
 80011b8:	f7ff ff87 	bl	80010ca <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011bc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80011be:	233f      	movs	r3, #63	; 0x3f
 80011c0:	4093      	lsls	r3, r2
 80011c2:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011c4:	2000      	movs	r0, #0
 80011c6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80011c8:	2301      	movs	r3, #1
 80011ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80011ce:	e7b8      	b.n	8001142 <HAL_DMA_Init+0x44>
  HAL_StatusTypeDef status = HAL_OK;
 80011d0:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 80011d4:	bf14      	ite	ne
 80011d6:	2200      	movne	r2, #0
 80011d8:	2201      	moveq	r2, #1
 80011da:	e7e9      	b.n	80011b0 <HAL_DMA_Init+0xb2>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80011dc:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 80011e0:	d006      	beq.n	80011f0 <HAL_DMA_Init+0xf2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80011e2:	2802      	cmp	r0, #2
 80011e4:	d917      	bls.n	8001216 <HAL_DMA_Init+0x118>
 80011e6:	2803      	cmp	r0, #3
 80011e8:	d113      	bne.n	8001212 <HAL_DMA_Init+0x114>
  HAL_StatusTypeDef status = HAL_OK;
 80011ea:	f3c2 6200 	ubfx	r2, r2, #24, #1
 80011ee:	e7df      	b.n	80011b0 <HAL_DMA_Init+0xb2>
    switch (tmp)
 80011f0:	2803      	cmp	r0, #3
 80011f2:	d80c      	bhi.n	800120e <HAL_DMA_Init+0x110>
 80011f4:	e8df f000 	tbb	[pc, r0]
 80011f8:	050f020f 	.word	0x050f020f
  HAL_StatusTypeDef status = HAL_OK;
 80011fc:	f3c2 6200 	ubfx	r2, r2, #24, #1
 8001200:	e7d6      	b.n	80011b0 <HAL_DMA_Init+0xb2>
 8001202:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 8001206:	bf14      	ite	ne
 8001208:	2200      	movne	r2, #0
 800120a:	2201      	moveq	r2, #1
 800120c:	e7d0      	b.n	80011b0 <HAL_DMA_Init+0xb2>
 800120e:	2200      	movs	r2, #0
 8001210:	e7ce      	b.n	80011b0 <HAL_DMA_Init+0xb2>
 8001212:	2200      	movs	r2, #0
 8001214:	e7cc      	b.n	80011b0 <HAL_DMA_Init+0xb2>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001216:	2340      	movs	r3, #64	; 0x40
 8001218:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800121a:	2001      	movs	r0, #1
 800121c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001220:	e78f      	b.n	8001142 <HAL_DMA_Init+0x44>
    return HAL_ERROR;
 8001222:	2001      	movs	r0, #1
 8001224:	e78d      	b.n	8001142 <HAL_DMA_Init+0x44>

08001226 <HAL_DMA_Start_IT>:
{
 8001226:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8001228:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800122c:	2c01      	cmp	r4, #1
 800122e:	d03d      	beq.n	80012ac <HAL_DMA_Start_IT+0x86>
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001230:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001232:	2401      	movs	r4, #1
 8001234:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001238:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800123c:	b2e4      	uxtb	r4, r4
 800123e:	2c01      	cmp	r4, #1
 8001240:	d005      	beq.n	800124e <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001242:	2300      	movs	r3, #0
 8001244:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8001248:	2002      	movs	r0, #2
}
 800124a:	bc70      	pop	{r4, r5, r6}
 800124c:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 800124e:	2402      	movs	r4, #2
 8001250:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001254:	2400      	movs	r4, #0
 8001256:	6544      	str	r4, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001258:	6806      	ldr	r6, [r0, #0]
 800125a:	6834      	ldr	r4, [r6, #0]
 800125c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001260:	6034      	str	r4, [r6, #0]
  hdma->Instance->NDTR = DataLength;
 8001262:	6804      	ldr	r4, [r0, #0]
 8001264:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001266:	6883      	ldr	r3, [r0, #8]
 8001268:	2b40      	cmp	r3, #64	; 0x40
 800126a:	d01a      	beq.n	80012a2 <HAL_DMA_Start_IT+0x7c>
    hdma->Instance->PAR = SrcAddress;
 800126c:	6803      	ldr	r3, [r0, #0]
 800126e:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001270:	6803      	ldr	r3, [r0, #0]
 8001272:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001274:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001276:	233f      	movs	r3, #63	; 0x3f
 8001278:	4093      	lsls	r3, r2
 800127a:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800127c:	6802      	ldr	r2, [r0, #0]
 800127e:	6813      	ldr	r3, [r2, #0]
 8001280:	f043 0316 	orr.w	r3, r3, #22
 8001284:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001286:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001288:	b123      	cbz	r3, 8001294 <HAL_DMA_Start_IT+0x6e>
      hdma->Instance->CR  |= DMA_IT_HT;
 800128a:	6802      	ldr	r2, [r0, #0]
 800128c:	6813      	ldr	r3, [r2, #0]
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001294:	6802      	ldr	r2, [r0, #0]
 8001296:	6813      	ldr	r3, [r2, #0]
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800129e:	2000      	movs	r0, #0
 80012a0:	e7d3      	b.n	800124a <HAL_DMA_Start_IT+0x24>
    hdma->Instance->PAR = DstAddress;
 80012a2:	6803      	ldr	r3, [r0, #0]
 80012a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80012a6:	6803      	ldr	r3, [r0, #0]
 80012a8:	60d9      	str	r1, [r3, #12]
 80012aa:	e7e3      	b.n	8001274 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80012ac:	2002      	movs	r0, #2
 80012ae:	e7cc      	b.n	800124a <HAL_DMA_Start_IT+0x24>

080012b0 <HAL_DMA_IRQHandler>:
{
 80012b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b2:	b083      	sub	sp, #12
 80012b4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012ba:	f245 4398 	movw	r3, #21656	; 0x5498
 80012be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012c2:	681e      	ldr	r6, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012c4:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80012c6:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012c8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80012ca:	2308      	movs	r3, #8
 80012cc:	4093      	lsls	r3, r2
 80012ce:	422b      	tst	r3, r5
 80012d0:	d010      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012d2:	6803      	ldr	r3, [r0, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	f012 0f04 	tst.w	r2, #4
 80012da:	d00b      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	f022 0204 	bic.w	r2, r2, #4
 80012e2:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012e4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80012e6:	2308      	movs	r3, #8
 80012e8:	4093      	lsls	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012ec:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012f4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80012f6:	2301      	movs	r3, #1
 80012f8:	4093      	lsls	r3, r2
 80012fa:	422b      	tst	r3, r5
 80012fc:	d009      	beq.n	8001312 <HAL_DMA_IRQHandler+0x62>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012fe:	6822      	ldr	r2, [r4, #0]
 8001300:	6952      	ldr	r2, [r2, #20]
 8001302:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001306:	d004      	beq.n	8001312 <HAL_DMA_IRQHandler+0x62>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001308:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800130a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001312:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001314:	2304      	movs	r3, #4
 8001316:	4093      	lsls	r3, r2
 8001318:	422b      	tst	r3, r5
 800131a:	d009      	beq.n	8001330 <HAL_DMA_IRQHandler+0x80>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800131c:	6822      	ldr	r2, [r4, #0]
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	f012 0f02 	tst.w	r2, #2
 8001324:	d004      	beq.n	8001330 <HAL_DMA_IRQHandler+0x80>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001326:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001328:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001330:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001332:	2310      	movs	r3, #16
 8001334:	4093      	lsls	r3, r2
 8001336:	422b      	tst	r3, r5
 8001338:	d024      	beq.n	8001384 <HAL_DMA_IRQHandler+0xd4>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800133a:	6822      	ldr	r2, [r4, #0]
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	f012 0f08 	tst.w	r2, #8
 8001342:	d01f      	beq.n	8001384 <HAL_DMA_IRQHandler+0xd4>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001344:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800134e:	d00d      	beq.n	800136c <HAL_DMA_IRQHandler+0xbc>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001356:	d104      	bne.n	8001362 <HAL_DMA_IRQHandler+0xb2>
          if(hdma->XferHalfCpltCallback != NULL)
 8001358:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800135a:	b19b      	cbz	r3, 8001384 <HAL_DMA_IRQHandler+0xd4>
            hdma->XferHalfCpltCallback(hdma);
 800135c:	4620      	mov	r0, r4
 800135e:	4798      	blx	r3
 8001360:	e010      	b.n	8001384 <HAL_DMA_IRQHandler+0xd4>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001362:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001364:	b173      	cbz	r3, 8001384 <HAL_DMA_IRQHandler+0xd4>
            hdma->XferM1HalfCpltCallback(hdma);
 8001366:	4620      	mov	r0, r4
 8001368:	4798      	blx	r3
 800136a:	e00b      	b.n	8001384 <HAL_DMA_IRQHandler+0xd4>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001372:	d103      	bne.n	800137c <HAL_DMA_IRQHandler+0xcc>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	f022 0208 	bic.w	r2, r2, #8
 800137a:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800137c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800137e:	b10b      	cbz	r3, 8001384 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferHalfCpltCallback(hdma);
 8001380:	4620      	mov	r0, r4
 8001382:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001384:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001386:	2320      	movs	r3, #32
 8001388:	4093      	lsls	r3, r2
 800138a:	422b      	tst	r3, r5
 800138c:	d055      	beq.n	800143a <HAL_DMA_IRQHandler+0x18a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800138e:	6822      	ldr	r2, [r4, #0]
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	f012 0f10 	tst.w	r2, #16
 8001396:	d050      	beq.n	800143a <HAL_DMA_IRQHandler+0x18a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001398:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800139a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	d00e      	beq.n	80013c2 <HAL_DMA_IRQHandler+0x112>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80013ac:	d033      	beq.n	8001416 <HAL_DMA_IRQHandler+0x166>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80013b4:	d12a      	bne.n	800140c <HAL_DMA_IRQHandler+0x15c>
          if(hdma->XferM1CpltCallback != NULL)
 80013b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d03e      	beq.n	800143a <HAL_DMA_IRQHandler+0x18a>
            hdma->XferM1CpltCallback(hdma);
 80013bc:	4620      	mov	r0, r4
 80013be:	4798      	blx	r3
 80013c0:	e03b      	b.n	800143a <HAL_DMA_IRQHandler+0x18a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013c2:	6822      	ldr	r2, [r4, #0]
 80013c4:	6813      	ldr	r3, [r2, #0]
 80013c6:	f023 0316 	bic.w	r3, r3, #22
 80013ca:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013cc:	6822      	ldr	r2, [r4, #0]
 80013ce:	6953      	ldr	r3, [r2, #20]
 80013d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013d4:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013d8:	b1a3      	cbz	r3, 8001404 <HAL_DMA_IRQHandler+0x154>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013da:	6822      	ldr	r2, [r4, #0]
 80013dc:	6813      	ldr	r3, [r2, #0]
 80013de:	f023 0308 	bic.w	r3, r3, #8
 80013e2:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80013e6:	233f      	movs	r3, #63	; 0x3f
 80013e8:	4093      	lsls	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80013ec:	2300      	movs	r3, #0
 80013ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80013f2:	2301      	movs	r3, #1
 80013f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80013f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d046      	beq.n	800148c <HAL_DMA_IRQHandler+0x1dc>
          hdma->XferAbortCallback(hdma);
 80013fe:	4620      	mov	r0, r4
 8001400:	4798      	blx	r3
 8001402:	e043      	b.n	800148c <HAL_DMA_IRQHandler+0x1dc>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001404:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1e7      	bne.n	80013da <HAL_DMA_IRQHandler+0x12a>
 800140a:	e7eb      	b.n	80013e4 <HAL_DMA_IRQHandler+0x134>
          if(hdma->XferCpltCallback != NULL)
 800140c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800140e:	b1a3      	cbz	r3, 800143a <HAL_DMA_IRQHandler+0x18a>
            hdma->XferCpltCallback(hdma);
 8001410:	4620      	mov	r0, r4
 8001412:	4798      	blx	r3
 8001414:	e011      	b.n	800143a <HAL_DMA_IRQHandler+0x18a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	f412 7f80 	tst.w	r2, #256	; 0x100
 800141c:	d109      	bne.n	8001432 <HAL_DMA_IRQHandler+0x182>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	f022 0210 	bic.w	r2, r2, #16
 8001424:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8001426:	2300      	movs	r3, #0
 8001428:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800142c:	2301      	movs	r3, #1
 800142e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001432:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001434:	b10b      	cbz	r3, 800143a <HAL_DMA_IRQHandler+0x18a>
          hdma->XferCpltCallback(hdma);
 8001436:	4620      	mov	r0, r4
 8001438:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800143a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800143c:	b333      	cbz	r3, 800148c <HAL_DMA_IRQHandler+0x1dc>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800143e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001440:	f013 0f01 	tst.w	r3, #1
 8001444:	d01e      	beq.n	8001484 <HAL_DMA_IRQHandler+0x1d4>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001446:	2305      	movs	r3, #5
 8001448:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800144c:	6822      	ldr	r2, [r4, #0]
 800144e:	6813      	ldr	r3, [r2, #0]
 8001450:	f023 0301 	bic.w	r3, r3, #1
 8001454:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001456:	f248 13b5 	movw	r3, #33205	; 0x81b5
 800145a:	f6c1 334e 	movt	r3, #6990	; 0x1b4e
 800145e:	fba3 3606 	umull	r3, r6, r3, r6
 8001462:	0ab6      	lsrs	r6, r6, #10
        if (++count > timeout)
 8001464:	9b01      	ldr	r3, [sp, #4]
 8001466:	3301      	adds	r3, #1
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	42b3      	cmp	r3, r6
 800146c:	d804      	bhi.n	8001478 <HAL_DMA_IRQHandler+0x1c8>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f013 0f01 	tst.w	r3, #1
 8001476:	d1f5      	bne.n	8001464 <HAL_DMA_IRQHandler+0x1b4>
      __HAL_UNLOCK(hdma);
 8001478:	2300      	movs	r3, #0
 800147a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800147e:	2301      	movs	r3, #1
 8001480:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001484:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001486:	b10b      	cbz	r3, 800148c <HAL_DMA_IRQHandler+0x1dc>
      hdma->XferErrorCallback(hdma);
 8001488:	4620      	mov	r0, r4
 800148a:	4798      	blx	r3
}
 800148c:	b003      	add	sp, #12
 800148e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001494:	b089      	sub	sp, #36	; 0x24
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001496:	2400      	movs	r4, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001498:	f44f 5760 	mov.w	r7, #14336	; 0x3800
 800149c:	f2c4 0702 	movt	r7, #16386	; 0x4002

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014a0:	46a4      	mov	ip, r4
 80014a2:	f2c4 0c02 	movt	ip, #16386	; 0x4002
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a6:	f44f 5670 	mov.w	r6, #15360	; 0x3c00
 80014aa:	f2c4 0601 	movt	r6, #16385	; 0x4001
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ae:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 80014b2:	f2c4 0e02 	movt	lr, #16386	; 0x4002
 80014b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014c8:	9302      	str	r3, [sp, #8]
 80014ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014d2:	9303      	str	r3, [sp, #12]
 80014d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014dc:	9304      	str	r3, [sp, #16]
 80014de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014e6:	9305      	str	r3, [sp, #20]
 80014e8:	e045      	b.n	8001576 <HAL_GPIO_Init+0xe6>
        temp = GPIOx->AFR[position >> 3U];
 80014ea:	ea4f 0ad4 	mov.w	sl, r4, lsr #3
 80014ee:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80014f2:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014f6:	f004 0b07 	and.w	fp, r4, #7
 80014fa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80014fe:	220f      	movs	r2, #15
 8001500:	fa02 f20b 	lsl.w	r2, r2, fp
 8001504:	ea25 0202 	bic.w	r2, r5, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001508:	690d      	ldr	r5, [r1, #16]
 800150a:	fa05 f50b 	lsl.w	r5, r5, fp
 800150e:	432a      	orrs	r2, r5
        GPIOx->AFR[position >> 3U] = temp;
 8001510:	f8ca 2020 	str.w	r2, [sl, #32]
 8001514:	e06a      	b.n	80015ec <HAL_GPIO_Init+0x15c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001516:	2500      	movs	r5, #0
 8001518:	fa05 f50a 	lsl.w	r5, r5, sl
 800151c:	ea45 0509 	orr.w	r5, r5, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001520:	6095      	str	r5, [r2, #8]
        temp = EXTI->IMR;
 8001522:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8001524:	ea6f 0803 	mvn.w	r8, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001528:	684d      	ldr	r5, [r1, #4]
 800152a:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800152e:	bf0c      	ite	eq
 8001530:	ea02 0208 	andeq.w	r2, r2, r8
        {
          temp |= iocurrent;
 8001534:	431a      	orrne	r2, r3
        }
        EXTI->IMR = temp;
 8001536:	6032      	str	r2, [r6, #0]

        temp = EXTI->EMR;
 8001538:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800153a:	684d      	ldr	r5, [r1, #4]
 800153c:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001540:	bf0c      	ite	eq
 8001542:	ea02 0208 	andeq.w	r2, r2, r8
        {
          temp |= iocurrent;
 8001546:	431a      	orrne	r2, r3
        }
        EXTI->EMR = temp;
 8001548:	6072      	str	r2, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800154a:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800154c:	684d      	ldr	r5, [r1, #4]
 800154e:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001552:	bf0c      	ite	eq
 8001554:	ea02 0208 	andeq.w	r2, r2, r8
        {
          temp |= iocurrent;
 8001558:	431a      	orrne	r2, r3
        }
        EXTI->RTSR = temp;
 800155a:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 800155c:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800155e:	684d      	ldr	r5, [r1, #4]
 8001560:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001564:	bf0c      	ite	eq
 8001566:	ea08 0302 	andeq.w	r3, r8, r2
        {
          temp |= iocurrent;
 800156a:	4313      	orrne	r3, r2
        }
        EXTI->FTSR = temp;
 800156c:	60f3      	str	r3, [r6, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156e:	3401      	adds	r4, #1
 8001570:	2c10      	cmp	r4, #16
 8001572:	f000 808f 	beq.w	8001694 <HAL_GPIO_Init+0x204>
    ioposition = 0x01U << position;
 8001576:	2501      	movs	r5, #1
 8001578:	40a5      	lsls	r5, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157a:	680b      	ldr	r3, [r1, #0]
 800157c:	402b      	ands	r3, r5
    if(iocurrent == ioposition)
 800157e:	429d      	cmp	r5, r3
 8001580:	d1f5      	bne.n	800156e <HAL_GPIO_Init+0xde>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001582:	684a      	ldr	r2, [r1, #4]
 8001584:	f022 0210 	bic.w	r2, r2, #16
 8001588:	3a01      	subs	r2, #1
 800158a:	2a01      	cmp	r2, #1
 800158c:	d818      	bhi.n	80015c0 <HAL_GPIO_Init+0x130>
        temp = GPIOx->OSPEEDR; 
 800158e:	6882      	ldr	r2, [r0, #8]
 8001590:	ea4f 0944 	mov.w	r9, r4, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001594:	f04f 0803 	mov.w	r8, #3
 8001598:	fa08 f809 	lsl.w	r8, r8, r9
 800159c:	ea22 0808 	bic.w	r8, r2, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a0:	68ca      	ldr	r2, [r1, #12]
 80015a2:	fa02 f209 	lsl.w	r2, r2, r9
 80015a6:	ea42 0208 	orr.w	r2, r2, r8
        GPIOx->OSPEEDR = temp;
 80015aa:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 80015ac:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ae:	ea22 0805 	bic.w	r8, r2, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015b2:	684a      	ldr	r2, [r1, #4]
 80015b4:	f3c2 1500 	ubfx	r5, r2, #4, #1
 80015b8:	40a5      	lsls	r5, r4
 80015ba:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->OTYPER = temp;
 80015be:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80015c0:	68c2      	ldr	r2, [r0, #12]
 80015c2:	ea4f 0944 	mov.w	r9, r4, lsl #1
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015c6:	f04f 0803 	mov.w	r8, #3
 80015ca:	fa08 f809 	lsl.w	r8, r8, r9
 80015ce:	ea6f 0808 	mvn.w	r8, r8
 80015d2:	ea08 0202 	and.w	r2, r8, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d6:	688d      	ldr	r5, [r1, #8]
 80015d8:	fa05 f509 	lsl.w	r5, r5, r9
 80015dc:	4315      	orrs	r5, r2
      GPIOx->PUPDR = temp;
 80015de:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e0:	684d      	ldr	r5, [r1, #4]
 80015e2:	f025 0510 	bic.w	r5, r5, #16
 80015e6:	2d02      	cmp	r5, #2
 80015e8:	f43f af7f 	beq.w	80014ea <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80015ec:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ee:	ea08 0802 	and.w	r8, r8, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015f2:	684a      	ldr	r2, [r1, #4]
 80015f4:	f002 0203 	and.w	r2, r2, #3
 80015f8:	fa02 f909 	lsl.w	r9, r2, r9
 80015fc:	ea49 0208 	orr.w	r2, r9, r8
      GPIOx->MODER = temp;
 8001600:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001602:	684a      	ldr	r2, [r1, #4]
 8001604:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001608:	d0b1      	beq.n	800156e <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	2200      	movs	r2, #0
 800160c:	9207      	str	r2, [sp, #28]
 800160e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001610:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001614:	647a      	str	r2, [r7, #68]	; 0x44
 8001616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001618:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800161c:	9207      	str	r2, [sp, #28]
 800161e:	9a07      	ldr	r2, [sp, #28]
 8001620:	f024 0203 	bic.w	r2, r4, #3
 8001624:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001628:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
        temp = SYSCFG->EXTICR[position >> 2U];
 800162c:	f8d2 9008 	ldr.w	r9, [r2, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001630:	f004 0503 	and.w	r5, r4, #3
 8001634:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 8001638:	250f      	movs	r5, #15
 800163a:	fa05 f50a 	lsl.w	r5, r5, sl
 800163e:	ea29 0905 	bic.w	r9, r9, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001642:	4560      	cmp	r0, ip
 8001644:	f43f af67 	beq.w	8001516 <HAL_GPIO_Init+0x86>
 8001648:	4570      	cmp	r0, lr
 800164a:	d017      	beq.n	800167c <HAL_GPIO_Init+0x1ec>
 800164c:	9d01      	ldr	r5, [sp, #4]
 800164e:	42a8      	cmp	r0, r5
 8001650:	d016      	beq.n	8001680 <HAL_GPIO_Init+0x1f0>
 8001652:	9d02      	ldr	r5, [sp, #8]
 8001654:	42a8      	cmp	r0, r5
 8001656:	d015      	beq.n	8001684 <HAL_GPIO_Init+0x1f4>
 8001658:	9d03      	ldr	r5, [sp, #12]
 800165a:	42a8      	cmp	r0, r5
 800165c:	d014      	beq.n	8001688 <HAL_GPIO_Init+0x1f8>
 800165e:	9d04      	ldr	r5, [sp, #16]
 8001660:	42a8      	cmp	r0, r5
 8001662:	d013      	beq.n	800168c <HAL_GPIO_Init+0x1fc>
 8001664:	9d05      	ldr	r5, [sp, #20]
 8001666:	42a8      	cmp	r0, r5
 8001668:	d012      	beq.n	8001690 <HAL_GPIO_Init+0x200>
 800166a:	f44f 58e0 	mov.w	r8, #7168	; 0x1c00
 800166e:	f2c4 0802 	movt	r8, #16386	; 0x4002
 8001672:	4540      	cmp	r0, r8
 8001674:	bf0c      	ite	eq
 8001676:	2507      	moveq	r5, #7
 8001678:	2508      	movne	r5, #8
 800167a:	e74d      	b.n	8001518 <HAL_GPIO_Init+0x88>
 800167c:	2501      	movs	r5, #1
 800167e:	e74b      	b.n	8001518 <HAL_GPIO_Init+0x88>
 8001680:	2502      	movs	r5, #2
 8001682:	e749      	b.n	8001518 <HAL_GPIO_Init+0x88>
 8001684:	2503      	movs	r5, #3
 8001686:	e747      	b.n	8001518 <HAL_GPIO_Init+0x88>
 8001688:	2504      	movs	r5, #4
 800168a:	e745      	b.n	8001518 <HAL_GPIO_Init+0x88>
 800168c:	2505      	movs	r5, #5
 800168e:	e743      	b.n	8001518 <HAL_GPIO_Init+0x88>
 8001690:	2506      	movs	r5, #6
 8001692:	e741      	b.n	8001518 <HAL_GPIO_Init+0x88>
      }
    }
  }
}
 8001694:	b009      	add	sp, #36	; 0x24
 8001696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800169a <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800169a:	6903      	ldr	r3, [r0, #16]
 800169c:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800169e:	bf14      	ite	ne
 80016a0:	2001      	movne	r0, #1
 80016a2:	2000      	moveq	r0, #0
 80016a4:	4770      	bx	lr

080016a6 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80016a6:	b308      	cbz	r0, 80016ec <HAL_IWDG_Init+0x46>
{
 80016a8:	b538      	push	{r3, r4, r5, lr}
 80016aa:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80016ac:	6803      	ldr	r3, [r0, #0]
 80016ae:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80016b2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80016b4:	6803      	ldr	r3, [r0, #0]
 80016b6:	f245 5255 	movw	r2, #21845	; 0x5555
 80016ba:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80016bc:	6803      	ldr	r3, [r0, #0]
 80016be:	6842      	ldr	r2, [r0, #4]
 80016c0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80016c2:	6803      	ldr	r3, [r0, #0]
 80016c4:	6882      	ldr	r2, [r0, #8]
 80016c6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80016c8:	f7ff fc77 	bl	8000fba <HAL_GetTick>
 80016cc:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	b132      	cbz	r2, 80016e2 <HAL_IWDG_Init+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80016d4:	f7ff fc71 	bl	8000fba <HAL_GetTick>
 80016d8:	1b40      	subs	r0, r0, r5
 80016da:	2830      	cmp	r0, #48	; 0x30
 80016dc:	d9f7      	bls.n	80016ce <HAL_IWDG_Init+0x28>
    {
      return HAL_TIMEOUT;
 80016de:	2003      	movs	r0, #3
 80016e0:	e003      	b.n	80016ea <HAL_IWDG_Init+0x44>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80016e2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80016e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80016e8:	2000      	movs	r0, #0
}
 80016ea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80016ec:	2001      	movs	r0, #1
}
 80016ee:	4770      	bx	lr

080016f0 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80016f0:	6803      	ldr	r3, [r0, #0]
 80016f2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80016f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 80016f8:	2000      	movs	r0, #0
 80016fa:	4770      	bx	lr

080016fc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016fc:	2800      	cmp	r0, #0
 80016fe:	f000 825d 	beq.w	8001bbc <HAL_RCC_OscConfig+0x4c0>
{
 8001702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170a:	6803      	ldr	r3, [r0, #0]
 800170c:	f013 0f01 	tst.w	r3, #1
 8001710:	d04d      	beq.n	80017ae <HAL_RCC_OscConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001712:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001716:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b04      	cmp	r3, #4
 8001722:	d038      	beq.n	8001796 <HAL_RCC_OscConfig+0x9a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001724:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001728:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001732:	2b08      	cmp	r3, #8
 8001734:	d027      	beq.n	8001786 <HAL_RCC_OscConfig+0x8a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001736:	6863      	ldr	r3, [r4, #4]
 8001738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173c:	d067      	beq.n	800180e <HAL_RCC_OscConfig+0x112>
 800173e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001742:	d06d      	beq.n	8001820 <HAL_RCC_OscConfig+0x124>
 8001744:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001748:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800175a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800175c:	6863      	ldr	r3, [r4, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d06b      	beq.n	800183a <HAL_RCC_OscConfig+0x13e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001762:	f7ff fc2a 	bl	8000fba <HAL_GetTick>
 8001766:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001768:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 800176c:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8001770:	682b      	ldr	r3, [r5, #0]
 8001772:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001776:	d11a      	bne.n	80017ae <HAL_RCC_OscConfig+0xb2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff fc1f 	bl	8000fba <HAL_GetTick>
 800177c:	1b80      	subs	r0, r0, r6
 800177e:	2864      	cmp	r0, #100	; 0x64
 8001780:	d9f6      	bls.n	8001770 <HAL_RCC_OscConfig+0x74>
          {
            return HAL_TIMEOUT;
 8001782:	2003      	movs	r0, #3
 8001784:	e21f      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001786:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800178a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001794:	d0cf      	beq.n	8001736 <HAL_RCC_OscConfig+0x3a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001796:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800179a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80017a4:	d003      	beq.n	80017ae <HAL_RCC_OscConfig+0xb2>
 80017a6:	6863      	ldr	r3, [r4, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 8209 	beq.w	8001bc0 <HAL_RCC_OscConfig+0x4c4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ae:	6823      	ldr	r3, [r4, #0]
 80017b0:	f013 0f02 	tst.w	r3, #2
 80017b4:	d073      	beq.n	800189e <HAL_RCC_OscConfig+0x1a2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017b6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f013 0f0c 	tst.w	r3, #12
 80017c4:	d053      	beq.n	800186e <HAL_RCC_OscConfig+0x172>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d042      	beq.n	800185e <HAL_RCC_OscConfig+0x162>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017d8:	68e3      	ldr	r3, [r4, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 808a 	beq.w	80018f4 <HAL_RCC_OscConfig+0x1f8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e0:	2300      	movs	r3, #0
 80017e2:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ea:	f7ff fbe6 	bl	8000fba <HAL_GetTick>
 80017ee:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f0:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 80017f4:	f2c4 0502 	movt	r5, #16386	; 0x4002
 80017f8:	682b      	ldr	r3, [r5, #0]
 80017fa:	f013 0f02 	tst.w	r3, #2
 80017fe:	d16d      	bne.n	80018dc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001800:	f7ff fbdb 	bl	8000fba <HAL_GetTick>
 8001804:	1b80      	subs	r0, r0, r6
 8001806:	2802      	cmp	r0, #2
 8001808:	d9f6      	bls.n	80017f8 <HAL_RCC_OscConfig+0xfc>
          {
            return HAL_TIMEOUT;
 800180a:	2003      	movs	r0, #3
 800180c:	e1db      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800180e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001812:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	e79d      	b.n	800175c <HAL_RCC_OscConfig+0x60>
 8001820:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001824:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	e790      	b.n	800175c <HAL_RCC_OscConfig+0x60>
        tickstart = HAL_GetTick();
 800183a:	f7ff fbbe 	bl	8000fba <HAL_GetTick>
 800183e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001840:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 8001844:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8001848:	682b      	ldr	r3, [r5, #0]
 800184a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800184e:	d0ae      	beq.n	80017ae <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fbb3 	bl	8000fba <HAL_GetTick>
 8001854:	1b80      	subs	r0, r0, r6
 8001856:	2864      	cmp	r0, #100	; 0x64
 8001858:	d9f6      	bls.n	8001848 <HAL_RCC_OscConfig+0x14c>
            return HAL_TIMEOUT;
 800185a:	2003      	movs	r0, #3
 800185c:	e1b3      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800185e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001862:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800186c:	d1b4      	bne.n	80017d8 <HAL_RCC_OscConfig+0xdc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001872:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f013 0f02 	tst.w	r3, #2
 800187c:	d004      	beq.n	8001888 <HAL_RCC_OscConfig+0x18c>
 800187e:	68e3      	ldr	r3, [r4, #12]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d001      	beq.n	8001888 <HAL_RCC_OscConfig+0x18c>
        return HAL_ERROR;
 8001884:	2001      	movs	r0, #1
 8001886:	e19e      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001888:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800188c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001890:	6813      	ldr	r3, [r2, #0]
 8001892:	6921      	ldr	r1, [r4, #16]
 8001894:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001898:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800189c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800189e:	6823      	ldr	r3, [r4, #0]
 80018a0:	f013 0f08 	tst.w	r3, #8
 80018a4:	d055      	beq.n	8001952 <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018a6:	6963      	ldr	r3, [r4, #20]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d03a      	beq.n	8001922 <HAL_RCC_OscConfig+0x226>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ac:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 80018b0:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7ff fb7f 	bl	8000fba <HAL_GetTick>
 80018bc:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018be:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 80018c2:	f2c4 0502 	movt	r5, #16386	; 0x4002
 80018c6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80018c8:	f013 0f02 	tst.w	r3, #2
 80018cc:	d141      	bne.n	8001952 <HAL_RCC_OscConfig+0x256>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ce:	f7ff fb74 	bl	8000fba <HAL_GetTick>
 80018d2:	1b80      	subs	r0, r0, r6
 80018d4:	2802      	cmp	r0, #2
 80018d6:	d9f6      	bls.n	80018c6 <HAL_RCC_OscConfig+0x1ca>
        {
          return HAL_TIMEOUT;
 80018d8:	2003      	movs	r0, #3
 80018da:	e174      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80018e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018e4:	6813      	ldr	r3, [r2, #0]
 80018e6:	6921      	ldr	r1, [r4, #16]
 80018e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018ec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	e7d4      	b.n	800189e <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_DISABLE();
 80018f4:	2300      	movs	r3, #0
 80018f6:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018fe:	f7ff fb5c 	bl	8000fba <HAL_GetTick>
 8001902:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001904:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 8001908:	f2c4 0502 	movt	r5, #16386	; 0x4002
 800190c:	682b      	ldr	r3, [r5, #0]
 800190e:	f013 0f02 	tst.w	r3, #2
 8001912:	d0c4      	beq.n	800189e <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001914:	f7ff fb51 	bl	8000fba <HAL_GetTick>
 8001918:	1b80      	subs	r0, r0, r6
 800191a:	2802      	cmp	r0, #2
 800191c:	d9f6      	bls.n	800190c <HAL_RCC_OscConfig+0x210>
            return HAL_TIMEOUT;
 800191e:	2003      	movs	r0, #3
 8001920:	e151      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001922:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8001926:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192e:	f7ff fb44 	bl	8000fba <HAL_GetTick>
 8001932:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001934:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 8001938:	f2c4 0502 	movt	r5, #16386	; 0x4002
 800193c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800193e:	f013 0f02 	tst.w	r3, #2
 8001942:	d006      	beq.n	8001952 <HAL_RCC_OscConfig+0x256>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fb39 	bl	8000fba <HAL_GetTick>
 8001948:	1b80      	subs	r0, r0, r6
 800194a:	2802      	cmp	r0, #2
 800194c:	d9f6      	bls.n	800193c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800194e:	2003      	movs	r0, #3
 8001950:	e139      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	f013 0f04 	tst.w	r3, #4
 8001958:	f000 8091 	beq.w	8001a7e <HAL_RCC_OscConfig+0x382>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800195c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001960:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800196a:	d140      	bne.n	80019ee <HAL_RCC_OscConfig+0x2f2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800196c:	2300      	movs	r3, #0
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001974:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800197a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800197e:	641a      	str	r2, [r3, #64]	; 0x40
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800198a:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001990:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f413 7f80 	tst.w	r3, #256	; 0x100
 800199a:	d02a      	beq.n	80019f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199c:	68a3      	ldr	r3, [r4, #8]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d041      	beq.n	8001a26 <HAL_RCC_OscConfig+0x32a>
 80019a2:	2b05      	cmp	r3, #5
 80019a4:	d048      	beq.n	8001a38 <HAL_RCC_OscConfig+0x33c>
 80019a6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019b0:	f022 0201 	bic.w	r2, r2, #1
 80019b4:	671a      	str	r2, [r3, #112]	; 0x70
 80019b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019b8:	f022 0204 	bic.w	r2, r2, #4
 80019bc:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019be:	68a3      	ldr	r3, [r4, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d046      	beq.n	8001a52 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c4:	f7ff faf9 	bl	8000fba <HAL_GetTick>
 80019c8:	4680      	mov	r8, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ca:	f44f 5660 	mov.w	r6, #14336	; 0x3800
 80019ce:	f2c4 0602 	movt	r6, #16386	; 0x4002
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d2:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80019d8:	f013 0f02 	tst.w	r3, #2
 80019dc:	d14e      	bne.n	8001a7c <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019de:	f7ff faec 	bl	8000fba <HAL_GetTick>
 80019e2:	eba0 0008 	sub.w	r0, r0, r8
 80019e6:	42b8      	cmp	r0, r7
 80019e8:	d9f5      	bls.n	80019d6 <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 80019ea:	2003      	movs	r0, #3
 80019ec:	e0eb      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
    FlagStatus       pwrclkchanged = RESET;
 80019ee:	2500      	movs	r5, #0
 80019f0:	e7cc      	b.n	800198c <HAL_RCC_OscConfig+0x290>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80019f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a00:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a02:	f7ff fada 	bl	8000fba <HAL_GetTick>
 8001a06:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a08:	f44f 46e0 	mov.w	r6, #28672	; 0x7000
 8001a0c:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8001a10:	6833      	ldr	r3, [r6, #0]
 8001a12:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a16:	d1c1      	bne.n	800199c <HAL_RCC_OscConfig+0x2a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a18:	f7ff facf 	bl	8000fba <HAL_GetTick>
 8001a1c:	1bc0      	subs	r0, r0, r7
 8001a1e:	2802      	cmp	r0, #2
 8001a20:	d9f6      	bls.n	8001a10 <HAL_RCC_OscConfig+0x314>
          return HAL_TIMEOUT;
 8001a22:	2003      	movs	r0, #3
 8001a24:	e0cf      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a26:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a30:	f042 0201 	orr.w	r2, r2, #1
 8001a34:	671a      	str	r2, [r3, #112]	; 0x70
 8001a36:	e7c2      	b.n	80019be <HAL_RCC_OscConfig+0x2c2>
 8001a38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a42:	f042 0204 	orr.w	r2, r2, #4
 8001a46:	671a      	str	r2, [r3, #112]	; 0x70
 8001a48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a4a:	f042 0201 	orr.w	r2, r2, #1
 8001a4e:	671a      	str	r2, [r3, #112]	; 0x70
 8001a50:	e7b5      	b.n	80019be <HAL_RCC_OscConfig+0x2c2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a52:	f7ff fab2 	bl	8000fba <HAL_GetTick>
 8001a56:	4680      	mov	r8, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a58:	f44f 5660 	mov.w	r6, #14336	; 0x3800
 8001a5c:	f2c4 0602 	movt	r6, #16386	; 0x4002
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a60:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a64:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001a66:	f013 0f02 	tst.w	r3, #2
 8001a6a:	d007      	beq.n	8001a7c <HAL_RCC_OscConfig+0x380>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff faa5 	bl	8000fba <HAL_GetTick>
 8001a70:	eba0 0008 	sub.w	r0, r0, r8
 8001a74:	42b8      	cmp	r0, r7
 8001a76:	d9f5      	bls.n	8001a64 <HAL_RCC_OscConfig+0x368>
        {
          return HAL_TIMEOUT;
 8001a78:	2003      	movs	r0, #3
 8001a7a:	e0a4      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a7c:	bb2d      	cbnz	r5, 8001aca <HAL_RCC_OscConfig+0x3ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a7e:	69a3      	ldr	r3, [r4, #24]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 809f 	beq.w	8001bc4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a86:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001a8a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a8e:	6892      	ldr	r2, [r2, #8]
 8001a90:	f002 020c 	and.w	r2, r2, #12
 8001a94:	2a08      	cmp	r2, #8
 8001a96:	d066      	beq.n	8001b66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d01f      	beq.n	8001adc <HAL_RCC_OscConfig+0x3e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9c:	2360      	movs	r3, #96	; 0x60
 8001a9e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7ff fa88 	bl	8000fba <HAL_GetTick>
 8001aaa:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aac:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 8001ab0:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001aba:	d052      	beq.n	8001b62 <HAL_RCC_OscConfig+0x466>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001abc:	f7ff fa7d 	bl	8000fba <HAL_GetTick>
 8001ac0:	1b40      	subs	r0, r0, r5
 8001ac2:	2802      	cmp	r0, #2
 8001ac4:	d9f6      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001ac6:	2003      	movs	r0, #3
 8001ac8:	e07d      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ace:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001ad8:	641a      	str	r2, [r3, #64]	; 0x40
 8001ada:	e7d0      	b.n	8001a7e <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_PLL_DISABLE();
 8001adc:	2360      	movs	r3, #96	; 0x60
 8001ade:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fa68 	bl	8000fba <HAL_GetTick>
 8001aea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aec:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 8001af0:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8001af4:	682b      	ldr	r3, [r5, #0]
 8001af6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001afa:	d006      	beq.n	8001b0a <HAL_RCC_OscConfig+0x40e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afc:	f7ff fa5d 	bl	8000fba <HAL_GetTick>
 8001b00:	1b80      	subs	r0, r0, r6
 8001b02:	2802      	cmp	r0, #2
 8001b04:	d9f6      	bls.n	8001af4 <HAL_RCC_OscConfig+0x3f8>
            return HAL_TIMEOUT;
 8001b06:	2003      	movs	r0, #3
 8001b08:	e05d      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b0a:	69e3      	ldr	r3, [r4, #28]
 8001b0c:	6a22      	ldr	r2, [r4, #32]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b12:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b18:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b1c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b1e:	0852      	lsrs	r2, r2, #1
 8001b20:	3a01      	subs	r2, #1
 8001b22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b26:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001b2a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b2e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b30:	2360      	movs	r3, #96	; 0x60
 8001b32:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fa3e 	bl	8000fba <HAL_GetTick>
 8001b3e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b40:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 8001b44:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b4e:	d106      	bne.n	8001b5e <HAL_RCC_OscConfig+0x462>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff fa33 	bl	8000fba <HAL_GetTick>
 8001b54:	1b40      	subs	r0, r0, r5
 8001b56:	2802      	cmp	r0, #2
 8001b58:	d9f6      	bls.n	8001b48 <HAL_RCC_OscConfig+0x44c>
            return HAL_TIMEOUT;
 8001b5a:	2003      	movs	r0, #3
 8001b5c:	e033      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001b5e:	2000      	movs	r0, #0
 8001b60:	e031      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
 8001b62:	2000      	movs	r0, #0
 8001b64:	e02f      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d030      	beq.n	8001bcc <HAL_RCC_OscConfig+0x4d0>
        pll_config = RCC->PLLCFGR;
 8001b6a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b72:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b74:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001b78:	69e2      	ldr	r2, [r4, #28]
 8001b7a:	4291      	cmp	r1, r2
 8001b7c:	d001      	beq.n	8001b82 <HAL_RCC_OscConfig+0x486>
          return HAL_ERROR;
 8001b7e:	2001      	movs	r0, #1
 8001b80:	e021      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b86:	6a21      	ldr	r1, [r4, #32]
 8001b88:	428a      	cmp	r2, r1
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_OscConfig+0x494>
          return HAL_ERROR;
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	e01a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b92:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001b96:	401a      	ands	r2, r3
 8001b98:	428a      	cmp	r2, r1
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x4a4>
          return HAL_ERROR;
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	e012      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ba0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ba4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001ba6:	428a      	cmp	r2, r1
 8001ba8:	d001      	beq.n	8001bae <HAL_RCC_OscConfig+0x4b2>
          return HAL_ERROR;
 8001baa:	2001      	movs	r0, #1
 8001bac:	e00b      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001bae:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001bb4:	1a18      	subs	r0, r3, r0
 8001bb6:	bf18      	it	ne
 8001bb8:	2001      	movne	r0, #1
 8001bba:	e004      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
 8001bbc:	2001      	movs	r0, #1
}
 8001bbe:	4770      	bx	lr
        return HAL_ERROR;
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>
  return HAL_OK;
 8001bc4:	2000      	movs	r0, #0
}
 8001bc6:	b002      	add	sp, #8
 8001bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8001bcc:	2001      	movs	r0, #1
 8001bce:	e7fa      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4ca>

08001bd0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bd0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001bd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d006      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x20>
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d009      	beq.n	8001bfa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001be6:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 8001bea:	f2c0 00f4 	movt	r0, #244	; 0xf4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001bee:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001bf0:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 8001bf4:	f2c0 007a 	movt	r0, #122	; 0x7a
 8001bf8:	4770      	bx	lr
{
 8001bfa:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bfe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001c12:	d031      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0xa8>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c14:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001c22:	461e      	mov	r6, r3
 8001c24:	2700      	movs	r7, #0
 8001c26:	015c      	lsls	r4, r3, #5
 8001c28:	2500      	movs	r5, #0
 8001c2a:	1ae4      	subs	r4, r4, r3
 8001c2c:	eb65 0507 	sbc.w	r5, r5, r7
 8001c30:	01a9      	lsls	r1, r5, #6
 8001c32:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001c36:	01a0      	lsls	r0, r4, #6
 8001c38:	1b00      	subs	r0, r0, r4
 8001c3a:	eb61 0105 	sbc.w	r1, r1, r5
 8001c3e:	00cb      	lsls	r3, r1, #3
 8001c40:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c44:	00c4      	lsls	r4, r0, #3
 8001c46:	19a0      	adds	r0, r4, r6
 8001c48:	eb43 0107 	adc.w	r1, r3, r7
 8001c4c:	024b      	lsls	r3, r1, #9
 8001c4e:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8001c52:	0244      	lsls	r4, r0, #9
 8001c54:	4620      	mov	r0, r4
 8001c56:	4619      	mov	r1, r3
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f7fe fab5 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c5e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001c70:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001c74:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c78:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001c86:	461e      	mov	r6, r3
 8001c88:	2700      	movs	r7, #0
 8001c8a:	015c      	lsls	r4, r3, #5
 8001c8c:	2500      	movs	r5, #0
 8001c8e:	1ae4      	subs	r4, r4, r3
 8001c90:	eb65 0507 	sbc.w	r5, r5, r7
 8001c94:	01a9      	lsls	r1, r5, #6
 8001c96:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001c9a:	01a0      	lsls	r0, r4, #6
 8001c9c:	1b00      	subs	r0, r0, r4
 8001c9e:	eb61 0105 	sbc.w	r1, r1, r5
 8001ca2:	00cb      	lsls	r3, r1, #3
 8001ca4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ca8:	00c4      	lsls	r4, r0, #3
 8001caa:	19a0      	adds	r0, r4, r6
 8001cac:	eb43 0107 	adc.w	r1, r3, r7
 8001cb0:	028b      	lsls	r3, r1, #10
 8001cb2:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001cb6:	0284      	lsls	r4, r0, #10
 8001cb8:	4620      	mov	r0, r4
 8001cba:	4619      	mov	r1, r3
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f7fe fa83 	bl	80001c8 <__aeabi_uldivmod>
 8001cc2:	e7cc      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x8e>

08001cc4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001cc4:	2800      	cmp	r0, #0
 8001cc6:	f000 80d8 	beq.w	8001e7a <HAL_RCC_ClockConfig+0x1b6>
{
 8001cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cce:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001cd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	428b      	cmp	r3, r1
 8001ce0:	d20d      	bcs.n	8001cfe <HAL_RCC_ClockConfig+0x3a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	b2ca      	uxtb	r2, r1
 8001ce4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001ce8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cec:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 030f 	and.w	r3, r3, #15
 8001cf4:	428b      	cmp	r3, r1
 8001cf6:	d002      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x3a>
      return HAL_ERROR;
 8001cf8:	2001      	movs	r0, #1
}
 8001cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfe:	6823      	ldr	r3, [r4, #0]
 8001d00:	f013 0f02 	tst.w	r3, #2
 8001d04:	d020      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x84>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d06:	f013 0f04 	tst.w	r3, #4
 8001d0a:	d007      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x58>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d0c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001d1a:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	f013 0f08 	tst.w	r3, #8
 8001d22:	d007      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x70>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d24:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001d32:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d34:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001d38:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d3c:	6893      	ldr	r3, [r2, #8]
 8001d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d42:	68a0      	ldr	r0, [r4, #8]
 8001d44:	4303      	orrs	r3, r0
 8001d46:	6093      	str	r3, [r2, #8]
 8001d48:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4a:	6823      	ldr	r3, [r4, #0]
 8001d4c:	f013 0f01 	tst.w	r3, #1
 8001d50:	d043      	beq.n	8001dda <HAL_RCC_ClockConfig+0x116>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d52:	6862      	ldr	r2, [r4, #4]
 8001d54:	2a01      	cmp	r2, #1
 8001d56:	d02c      	beq.n	8001db2 <HAL_RCC_ClockConfig+0xee>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d58:	1e93      	subs	r3, r2, #2
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d933      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x102>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f013 0f02 	tst.w	r3, #2
 8001d6c:	f000 8087 	beq.w	8001e7e <HAL_RCC_ClockConfig+0x1ba>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d70:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001d74:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001d78:	688b      	ldr	r3, [r1, #8]
 8001d7a:	f023 0303 	bic.w	r3, r3, #3
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001d82:	f7ff f91a 	bl	8000fba <HAL_GetTick>
 8001d86:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d88:	f44f 5660 	mov.w	r6, #14336	; 0x3800
 8001d8c:	f2c4 0602 	movt	r6, #16386	; 0x4002
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d90:	f241 3788 	movw	r7, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d94:	68b3      	ldr	r3, [r6, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	6862      	ldr	r2, [r4, #4]
 8001d9c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001da0:	d01b      	beq.n	8001dda <HAL_RCC_ClockConfig+0x116>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da2:	f7ff f90a 	bl	8000fba <HAL_GetTick>
 8001da6:	eba0 0008 	sub.w	r0, r0, r8
 8001daa:	42b8      	cmp	r0, r7
 8001dac:	d9f2      	bls.n	8001d94 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001dae:	2003      	movs	r0, #3
 8001db0:	e7a3      	b.n	8001cfa <HAL_RCC_ClockConfig+0x36>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001db6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001dc0:	d1d6      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	e799      	b.n	8001cfa <HAL_RCC_ClockConfig+0x36>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001dca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001dd4:	d1cc      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	e78f      	b.n	8001cfa <HAL_RCC_ClockConfig+0x36>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001dde:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	42ab      	cmp	r3, r5
 8001dea:	d90c      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x142>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dec:	b2ea      	uxtb	r2, r5
 8001dee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001df2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001df6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	42ab      	cmp	r3, r5
 8001e00:	d001      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x142>
      return HAL_ERROR;
 8001e02:	2001      	movs	r0, #1
 8001e04:	e779      	b.n	8001cfa <HAL_RCC_ClockConfig+0x36>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	f013 0f04 	tst.w	r3, #4
 8001e0c:	d009      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x15e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e0e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001e12:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e16:	6893      	ldr	r3, [r2, #8]
 8001e18:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001e1c:	68e1      	ldr	r1, [r4, #12]
 8001e1e:	430b      	orrs	r3, r1
 8001e20:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	f013 0f08 	tst.w	r3, #8
 8001e28:	d00a      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x17c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e2a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e32:	6893      	ldr	r3, [r2, #8]
 8001e34:	6921      	ldr	r1, [r4, #16]
 8001e36:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001e3a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e3e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e40:	f7ff fec6 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8001e44:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	f245 4398 	movw	r3, #21656	; 0x5498
 8001e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e56:	f242 4184 	movw	r1, #9348	; 0x2484
 8001e5a:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001e5e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001e62:	5c8a      	ldrb	r2, [r1, r2]
 8001e64:	40d0      	lsrs	r0, r2
 8001e66:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001e68:	f245 43a0 	movw	r3, #21664	; 0x54a0
 8001e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	f7ff f852 	bl	8000f1a <HAL_InitTick>
  return HAL_OK;
 8001e76:	2000      	movs	r0, #0
 8001e78:	e73f      	b.n	8001cfa <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8001e7a:	2001      	movs	r0, #1
}
 8001e7c:	4770      	bx	lr
        return HAL_ERROR;
 8001e7e:	2001      	movs	r0, #1
 8001e80:	e73b      	b.n	8001cfa <HAL_RCC_ClockConfig+0x36>

08001e82 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e84:	4607      	mov	r7, r0
 8001e86:	460e      	mov	r6, r1
 8001e88:	4615      	mov	r5, r2
 8001e8a:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	6893      	ldr	r3, [r2, #8]
 8001e90:	ea36 0303 	bics.w	r3, r6, r3
 8001e94:	bf0c      	ite	eq
 8001e96:	2301      	moveq	r3, #1
 8001e98:	2300      	movne	r3, #0
 8001e9a:	42ab      	cmp	r3, r5
 8001e9c:	d037      	beq.n	8001f0e <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e9e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001ea2:	d0f4      	beq.n	8001e8e <SPI_WaitFlagStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001ea4:	f7ff f889 	bl	8000fba <HAL_GetTick>
 8001ea8:	9b06      	ldr	r3, [sp, #24]
 8001eaa:	1ac0      	subs	r0, r0, r3
 8001eac:	42a0      	cmp	r0, r4
 8001eae:	d201      	bcs.n	8001eb4 <SPI_WaitFlagStateUntilTimeout+0x32>
 8001eb0:	2c00      	cmp	r4, #0
 8001eb2:	d1eb      	bne.n	8001e8c <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	6853      	ldr	r3, [r2, #4]
 8001eb8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8001ebc:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ec4:	d00b      	beq.n	8001ede <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ecc:	d014      	beq.n	8001ef8 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

        return HAL_TIMEOUT;
 8001eda:	2003      	movs	r0, #3
 8001edc:	e018      	b.n	8001f10 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ee4:	d002      	beq.n	8001eec <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eea:	d1ec      	bne.n	8001ec6 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	6813      	ldr	r3, [r2, #0]
 8001ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e7e6      	b.n	8001ec6 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	6813      	ldr	r3, [r2, #0]
 8001efc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	6813      	ldr	r3, [r2, #0]
 8001f06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	e7df      	b.n	8001ece <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8001f0e:	2000      	movs	r0, #0
}
 8001f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f12 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f12:	b530      	push	{r4, r5, lr}
 8001f14:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001f16:	f245 4498 	movw	r4, #21656	; 0x5498
 8001f1a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001f1e:	6824      	ldr	r4, [r4, #0]
 8001f20:	f649 7581 	movw	r5, #40833	; 0x9f81
 8001f24:	f2c1 655e 	movt	r5, #5726	; 0x165e
 8001f28:	fba5 3404 	umull	r3, r4, r5, r4
 8001f2c:	0d64      	lsrs	r4, r4, #21
 8001f2e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001f32:	fb05 f404 	mul.w	r4, r5, r4
 8001f36:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f38:	6844      	ldr	r4, [r0, #4]
 8001f3a:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8001f3e:	d00b      	beq.n	8001f58 <SPI_EndRxTxTransaction+0x46>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001f40:	9b03      	ldr	r3, [sp, #12]
 8001f42:	b1c3      	cbz	r3, 8001f76 <SPI_EndRxTxTransaction+0x64>
      {
        break;
      }
      count--;
 8001f44:	9b03      	ldr	r3, [sp, #12]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001f4a:	6803      	ldr	r3, [r0, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f52:	d1f5      	bne.n	8001f40 <SPI_EndRxTxTransaction+0x2e>
  }

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e00f      	b.n	8001f78 <SPI_EndRxTxTransaction+0x66>
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f5c:	9200      	str	r2, [sp, #0]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2180      	movs	r1, #128	; 0x80
 8001f62:	f7ff ff8e 	bl	8001e82 <SPI_WaitFlagStateUntilTimeout>
 8001f66:	4603      	mov	r3, r0
 8001f68:	b130      	cbz	r0, 8001f78 <SPI_EndRxTxTransaction+0x66>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f6c:	f043 0320 	orr.w	r3, r3, #32
 8001f70:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e000      	b.n	8001f78 <SPI_EndRxTxTransaction+0x66>
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	b005      	add	sp, #20
 8001f7c:	bd30      	pop	{r4, r5, pc}

08001f7e <SPI_EndRxTransaction>:
{
 8001f7e:	b510      	push	{r4, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f84:	6840      	ldr	r0, [r0, #4]
 8001f86:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8001f8a:	d00c      	beq.n	8001fa6 <SPI_EndRxTransaction+0x28>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001f8c:	9200      	str	r2, [sp, #0]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	2200      	movs	r2, #0
 8001f92:	2101      	movs	r1, #1
 8001f94:	4620      	mov	r0, r4
 8001f96:	f7ff ff74 	bl	8001e82 <SPI_WaitFlagStateUntilTimeout>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	d136      	bne.n	800200e <SPI_EndRxTransaction+0x90>
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	b002      	add	sp, #8
 8001fa4:	bd10      	pop	{r4, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fa6:	68a3      	ldr	r3, [r4, #8]
 8001fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fac:	d002      	beq.n	8001fb4 <SPI_EndRxTransaction+0x36>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb2:	d10c      	bne.n	8001fce <SPI_EndRxTransaction+0x50>
    __HAL_SPI_DISABLE(hspi);
 8001fb4:	6820      	ldr	r0, [r4, #0]
 8001fb6:	6803      	ldr	r3, [r0, #0]
 8001fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fbc:	6003      	str	r3, [r0, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fbe:	6863      	ldr	r3, [r4, #4]
 8001fc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fc4:	d1e2      	bne.n	8001f8c <SPI_EndRxTransaction+0xe>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8001fc6:	68a3      	ldr	r3, [r4, #8]
 8001fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fcc:	d00f      	beq.n	8001fee <SPI_EndRxTransaction+0x70>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fce:	9200      	str	r2, [sp, #0]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2180      	movs	r1, #128	; 0x80
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f7ff ff53 	bl	8001e82 <SPI_WaitFlagStateUntilTimeout>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2800      	cmp	r0, #0
 8001fe0:	d0de      	beq.n	8001fa0 <SPI_EndRxTransaction+0x22>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fe2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001fe4:	f043 0320 	orr.w	r3, r3, #32
 8001fe8:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e7d8      	b.n	8001fa0 <SPI_EndRxTransaction+0x22>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001fee:	9200      	str	r2, [sp, #0]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	f7ff ff43 	bl	8001e82 <SPI_WaitFlagStateUntilTimeout>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2800      	cmp	r0, #0
 8002000:	d0ce      	beq.n	8001fa0 <SPI_EndRxTransaction+0x22>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002002:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002004:	f043 0320 	orr.w	r3, r3, #32
 8002008:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e7c8      	b.n	8001fa0 <SPI_EndRxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800200e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002010:	f043 0320 	orr.w	r3, r3, #32
 8002014:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e7c2      	b.n	8001fa0 <SPI_EndRxTransaction+0x22>

0800201a <HAL_SPI_Init>:
  if (hspi == NULL)
 800201a:	2800      	cmp	r0, #0
 800201c:	d03b      	beq.n	8002096 <HAL_SPI_Init+0x7c>
{
 800201e:	b510      	push	{r4, lr}
 8002020:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002026:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800202a:	2b00      	cmp	r3, #0
 800202c:	d02e      	beq.n	800208c <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 800202e:	2302      	movs	r3, #2
 8002030:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002034:	6822      	ldr	r2, [r4, #0]
 8002036:	6813      	ldr	r3, [r2, #0]
 8002038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800203c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800203e:	6822      	ldr	r2, [r4, #0]
 8002040:	6863      	ldr	r3, [r4, #4]
 8002042:	68a1      	ldr	r1, [r4, #8]
 8002044:	430b      	orrs	r3, r1
 8002046:	68e1      	ldr	r1, [r4, #12]
 8002048:	430b      	orrs	r3, r1
 800204a:	6921      	ldr	r1, [r4, #16]
 800204c:	430b      	orrs	r3, r1
 800204e:	6961      	ldr	r1, [r4, #20]
 8002050:	430b      	orrs	r3, r1
 8002052:	69e1      	ldr	r1, [r4, #28]
 8002054:	430b      	orrs	r3, r1
 8002056:	6a21      	ldr	r1, [r4, #32]
 8002058:	430b      	orrs	r3, r1
 800205a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800205c:	430b      	orrs	r3, r1
 800205e:	69a1      	ldr	r1, [r4, #24]
 8002060:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8002064:	430b      	orrs	r3, r1
 8002066:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002068:	6822      	ldr	r2, [r4, #0]
 800206a:	8b63      	ldrh	r3, [r4, #26]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002072:	430b      	orrs	r3, r1
 8002074:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002076:	6822      	ldr	r2, [r4, #0]
 8002078:	69d3      	ldr	r3, [r2, #28]
 800207a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800207e:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002080:	2000      	movs	r0, #0
 8002082:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002084:	2301      	movs	r3, #1
 8002086:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800208a:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800208c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002090:	f7fe fe46 	bl	8000d20 <HAL_SPI_MspInit>
 8002094:	e7cb      	b.n	800202e <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8002096:	2001      	movs	r0, #1
}
 8002098:	4770      	bx	lr

0800209a <HAL_SPI_TransmitReceive_DMA>:
{
 800209a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 800209c:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 80020a0:	2c01      	cmp	r4, #1
 80020a2:	f000 80a8 	beq.w	80021f6 <HAL_SPI_TransmitReceive_DMA+0x15c>
 80020a6:	4604      	mov	r4, r0
 80020a8:	2001      	movs	r0, #1
 80020aa:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  tmp_state           = hspi->State;
 80020ae:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80020b2:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80020b4:	2801      	cmp	r0, #1
 80020b6:	d011      	beq.n	80020dc <HAL_SPI_TransmitReceive_DMA+0x42>
 80020b8:	6865      	ldr	r5, [r4, #4]
 80020ba:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 80020be:	d005      	beq.n	80020cc <HAL_SPI_TransmitReceive_DMA+0x32>
    errorcode = HAL_BUSY;
 80020c0:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 80020c2:	2200      	movs	r2, #0
 80020c4:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	bd38      	pop	{r3, r4, r5, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80020cc:	68a5      	ldr	r5, [r4, #8]
 80020ce:	2d00      	cmp	r5, #0
 80020d0:	f040 8089 	bne.w	80021e6 <HAL_SPI_TransmitReceive_DMA+0x14c>
 80020d4:	2804      	cmp	r0, #4
 80020d6:	d001      	beq.n	80020dc <HAL_SPI_TransmitReceive_DMA+0x42>
    errorcode = HAL_BUSY;
 80020d8:	2302      	movs	r3, #2
 80020da:	e7f2      	b.n	80020c2 <HAL_SPI_TransmitReceive_DMA+0x28>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020dc:	2900      	cmp	r1, #0
 80020de:	f000 8084 	beq.w	80021ea <HAL_SPI_TransmitReceive_DMA+0x150>
 80020e2:	2a00      	cmp	r2, #0
 80020e4:	f000 8083 	beq.w	80021ee <HAL_SPI_TransmitReceive_DMA+0x154>
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 8082 	beq.w	80021f2 <HAL_SPI_TransmitReceive_DMA+0x158>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020ee:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80020f2:	b2c0      	uxtb	r0, r0
 80020f4:	2804      	cmp	r0, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020f6:	bf1c      	itt	ne
 80020f8:	2005      	movne	r0, #5
 80020fa:	f884 0051 	strbne.w	r0, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020fe:	2000      	movs	r0, #0
 8002100:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002102:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002104:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002106:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002108:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800210a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800210c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800210e:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002110:	6460      	str	r0, [r4, #68]	; 0x44
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002112:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b04      	cmp	r3, #4
 800211a:	d024      	beq.n	8002166 <HAL_SPI_TransmitReceive_DMA+0xcc>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800211c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800211e:	f242 3303 	movw	r3, #8963	; 0x2303
 8002122:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002126:	6413      	str	r3, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002128:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800212a:	f242 339f 	movw	r3, #9119	; 0x239f
 800212e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002132:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002134:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002136:	f242 330f 	movw	r3, #8975	; 0x230f
 800213a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800213e:	64d3      	str	r3, [r2, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8002140:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002142:	2200      	movs	r2, #0
 8002144:	651a      	str	r2, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 8002146:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002148:	6821      	ldr	r1, [r4, #0]
 800214a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800214c:	310c      	adds	r1, #12
 800214e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002150:	f7ff f869 	bl	8001226 <HAL_DMA_Start_IT>
 8002154:	b1a0      	cbz	r0, 8002180 <HAL_SPI_TransmitReceive_DMA+0xe6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002156:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002158:	f043 0310 	orr.w	r3, r3, #16
 800215c:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800215e:	2301      	movs	r3, #1
 8002160:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 8002164:	e7ad      	b.n	80020c2 <HAL_SPI_TransmitReceive_DMA+0x28>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002166:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002168:	f242 23f7 	movw	r3, #8951	; 0x22f7
 800216c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002172:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002174:	f242 3331 	movw	r3, #9009	; 0x2331
 8002178:	f6c0 0300 	movt	r3, #2048	; 0x800
 800217c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800217e:	e7d9      	b.n	8002134 <HAL_SPI_TransmitReceive_DMA+0x9a>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002180:	6822      	ldr	r2, [r4, #0]
 8002182:	6853      	ldr	r3, [r2, #4]
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800218a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800218c:	2300      	movs	r3, #0
 800218e:	6413      	str	r3, [r2, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002190:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002192:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002194:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002196:	64d3      	str	r3, [r2, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002198:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800219a:	6513      	str	r3, [r2, #80]	; 0x50
                                 hspi->TxXferCount))
 800219c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800219e:	6822      	ldr	r2, [r4, #0]
 80021a0:	320c      	adds	r2, #12
 80021a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80021a4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80021a6:	f7ff f83e 	bl	8001226 <HAL_DMA_Start_IT>
 80021aa:	4603      	mov	r3, r0
 80021ac:	b138      	cbz	r0, 80021be <HAL_SPI_TransmitReceive_DMA+0x124>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80021ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80021b0:	f043 0310 	orr.w	r3, r3, #16
 80021b4:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 80021b6:	2301      	movs	r3, #1
 80021b8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 80021bc:	e781      	b.n	80020c2 <HAL_SPI_TransmitReceive_DMA+0x28>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021be:	6822      	ldr	r2, [r4, #0]
 80021c0:	6811      	ldr	r1, [r2, #0]
 80021c2:	f011 0f40 	tst.w	r1, #64	; 0x40
 80021c6:	d103      	bne.n	80021d0 <HAL_SPI_TransmitReceive_DMA+0x136>
    __HAL_SPI_ENABLE(hspi);
 80021c8:	6811      	ldr	r1, [r2, #0]
 80021ca:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80021ce:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80021d0:	6821      	ldr	r1, [r4, #0]
 80021d2:	684a      	ldr	r2, [r1, #4]
 80021d4:	f042 0220 	orr.w	r2, r2, #32
 80021d8:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80021da:	6821      	ldr	r1, [r4, #0]
 80021dc:	684a      	ldr	r2, [r1, #4]
 80021de:	f042 0202 	orr.w	r2, r2, #2
 80021e2:	604a      	str	r2, [r1, #4]
 80021e4:	e76d      	b.n	80020c2 <HAL_SPI_TransmitReceive_DMA+0x28>
    errorcode = HAL_BUSY;
 80021e6:	2302      	movs	r3, #2
 80021e8:	e76b      	b.n	80020c2 <HAL_SPI_TransmitReceive_DMA+0x28>
    errorcode = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e769      	b.n	80020c2 <HAL_SPI_TransmitReceive_DMA+0x28>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e767      	b.n	80020c2 <HAL_SPI_TransmitReceive_DMA+0x28>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e765      	b.n	80020c2 <HAL_SPI_TransmitReceive_DMA+0x28>
  __HAL_LOCK(hspi);
 80021f6:	2302      	movs	r3, #2
 80021f8:	e766      	b.n	80020c8 <HAL_SPI_TransmitReceive_DMA+0x2e>

080021fa <HAL_SPI_Receive_DMA>:
{
 80021fa:	b538      	push	{r3, r4, r5, lr}
 80021fc:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80021fe:	6885      	ldr	r5, [r0, #8]
 8002200:	b91d      	cbnz	r5, 800220a <HAL_SPI_Receive_DMA+0x10>
 8002202:	6843      	ldr	r3, [r0, #4]
 8002204:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002208:	d011      	beq.n	800222e <HAL_SPI_Receive_DMA+0x34>
  __HAL_LOCK(hspi);
 800220a:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 800220e:	2801      	cmp	r0, #1
 8002210:	d06d      	beq.n	80022ee <HAL_SPI_Receive_DMA+0xf4>
 8002212:	2001      	movs	r0, #1
 8002214:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 8002218:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800221c:	b2c0      	uxtb	r0, r0
 800221e:	2801      	cmp	r0, #1
 8002220:	d00e      	beq.n	8002240 <HAL_SPI_Receive_DMA+0x46>
    errorcode = HAL_BUSY;
 8002222:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 8002224:	2200      	movs	r2, #0
 8002226:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 800222a:	4618      	mov	r0, r3
 800222c:	bd38      	pop	{r3, r4, r5, pc}
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800222e:	2304      	movs	r3, #4
 8002230:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8002234:	4613      	mov	r3, r2
 8002236:	460a      	mov	r2, r1
 8002238:	f7ff ff2f 	bl	800209a <HAL_SPI_TransmitReceive_DMA>
 800223c:	4603      	mov	r3, r0
 800223e:	e7f4      	b.n	800222a <HAL_SPI_Receive_DMA+0x30>
  if ((pData == NULL) || (Size == 0U))
 8002240:	2900      	cmp	r1, #0
 8002242:	d050      	beq.n	80022e6 <HAL_SPI_Receive_DMA+0xec>
 8002244:	2a00      	cmp	r2, #0
 8002246:	d050      	beq.n	80022ea <HAL_SPI_Receive_DMA+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002248:	2304      	movs	r3, #4
 800224a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800224e:	2300      	movs	r3, #0
 8002250:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002252:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002254:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002256:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002258:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800225a:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800225c:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800225e:	86e3      	strh	r3, [r4, #54]	; 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002260:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8002264:	d025      	beq.n	80022b2 <HAL_SPI_Receive_DMA+0xb8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002266:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002268:	f242 23f7 	movw	r3, #8951	; 0x22f7
 800226c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002270:	6413      	str	r3, [r2, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8002272:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002274:	f242 3331 	movw	r3, #9009	; 0x2331
 8002278:	f6c0 0300 	movt	r3, #2048	; 0x800
 800227c:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800227e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002280:	f242 330f 	movw	r3, #8975	; 0x230f
 8002284:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002288:	64d3      	str	r3, [r2, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800228a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800228c:	2200      	movs	r2, #0
 800228e:	651a      	str	r2, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 8002290:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002292:	6821      	ldr	r1, [r4, #0]
 8002294:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002296:	310c      	adds	r1, #12
 8002298:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800229a:	f7fe ffc4 	bl	8001226 <HAL_DMA_Start_IT>
 800229e:	4603      	mov	r3, r0
 80022a0:	b168      	cbz	r0, 80022be <HAL_SPI_Receive_DMA+0xc4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80022a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80022a4:	f043 0310 	orr.w	r3, r3, #16
 80022a8:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 80022aa:	2301      	movs	r3, #1
 80022ac:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    goto error;
 80022b0:	e7b8      	b.n	8002224 <HAL_SPI_Receive_DMA+0x2a>
    SPI_1LINE_RX(hspi);
 80022b2:	6822      	ldr	r2, [r4, #0]
 80022b4:	6813      	ldr	r3, [r2, #0]
 80022b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	e7d3      	b.n	8002266 <HAL_SPI_Receive_DMA+0x6c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022be:	6822      	ldr	r2, [r4, #0]
 80022c0:	6811      	ldr	r1, [r2, #0]
 80022c2:	f011 0f40 	tst.w	r1, #64	; 0x40
 80022c6:	d103      	bne.n	80022d0 <HAL_SPI_Receive_DMA+0xd6>
    __HAL_SPI_ENABLE(hspi);
 80022c8:	6811      	ldr	r1, [r2, #0]
 80022ca:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80022ce:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80022d0:	6821      	ldr	r1, [r4, #0]
 80022d2:	684a      	ldr	r2, [r1, #4]
 80022d4:	f042 0220 	orr.w	r2, r2, #32
 80022d8:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80022da:	6821      	ldr	r1, [r4, #0]
 80022dc:	684a      	ldr	r2, [r1, #4]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	604a      	str	r2, [r1, #4]
 80022e4:	e79e      	b.n	8002224 <HAL_SPI_Receive_DMA+0x2a>
    errorcode = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e79c      	b.n	8002224 <HAL_SPI_Receive_DMA+0x2a>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e79a      	b.n	8002224 <HAL_SPI_Receive_DMA+0x2a>
  __HAL_LOCK(hspi);
 80022ee:	2302      	movs	r3, #2
 80022f0:	e79b      	b.n	800222a <HAL_SPI_Receive_DMA+0x30>

080022f2 <HAL_SPI_TxRxCpltCallback>:
}
 80022f2:	4770      	bx	lr

080022f4 <HAL_SPI_RxHalfCpltCallback>:
}
 80022f4:	4770      	bx	lr

080022f6 <SPI_DMAHalfReceiveCplt>:
{
 80022f6:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 80022f8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80022fa:	f7ff fffb 	bl	80022f4 <HAL_SPI_RxHalfCpltCallback>
}
 80022fe:	bd08      	pop	{r3, pc}

08002300 <HAL_SPI_TxRxHalfCpltCallback>:
}
 8002300:	4770      	bx	lr

08002302 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8002302:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002304:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002306:	f7ff fffb 	bl	8002300 <HAL_SPI_TxRxHalfCpltCallback>
}
 800230a:	bd08      	pop	{r3, pc}

0800230c <HAL_SPI_ErrorCallback>:
}
 800230c:	4770      	bx	lr

0800230e <SPI_DMAError>:
{
 800230e:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002310:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002312:	6802      	ldr	r2, [r0, #0]
 8002314:	6853      	ldr	r3, [r2, #4]
 8002316:	f023 0303 	bic.w	r3, r3, #3
 800231a:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800231c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800231e:	f043 0310 	orr.w	r3, r3, #16
 8002322:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002324:	2301      	movs	r3, #1
 8002326:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 800232a:	f7ff ffef 	bl	800230c <HAL_SPI_ErrorCallback>
}
 800232e:	bd08      	pop	{r3, pc}

08002330 <SPI_DMAReceiveCplt>:
{
 8002330:	b538      	push	{r3, r4, r5, lr}
 8002332:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002334:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8002336:	f7fe fe40 	bl	8000fba <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800233a:	682b      	ldr	r3, [r5, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002342:	d11e      	bne.n	8002382 <SPI_DMAReceiveCplt+0x52>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002344:	6821      	ldr	r1, [r4, #0]
 8002346:	684b      	ldr	r3, [r1, #4]
 8002348:	f023 0320 	bic.w	r3, r3, #32
 800234c:	604b      	str	r3, [r1, #4]
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800234e:	68a3      	ldr	r3, [r4, #8]
 8002350:	b91b      	cbnz	r3, 800235a <SPI_DMAReceiveCplt+0x2a>
 8002352:	6863      	ldr	r3, [r4, #4]
 8002354:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002358:	d017      	beq.n	800238a <SPI_DMAReceiveCplt+0x5a>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800235a:	6822      	ldr	r2, [r4, #0]
 800235c:	6853      	ldr	r3, [r2, #4]
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002364:	4602      	mov	r2, r0
 8002366:	2164      	movs	r1, #100	; 0x64
 8002368:	4620      	mov	r0, r4
 800236a:	f7ff fe08 	bl	8001f7e <SPI_EndRxTransaction>
 800236e:	b108      	cbz	r0, 8002374 <SPI_DMAReceiveCplt+0x44>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002370:	2320      	movs	r3, #32
 8002372:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002378:	2301      	movs	r3, #1
 800237a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800237e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002380:	b94b      	cbnz	r3, 8002396 <SPI_DMAReceiveCplt+0x66>
  HAL_SPI_RxCpltCallback(hspi);
 8002382:	4620      	mov	r0, r4
 8002384:	f7fe faa5 	bl	80008d2 <HAL_SPI_RxCpltCallback>
}
 8002388:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800238a:	6822      	ldr	r2, [r4, #0]
 800238c:	6853      	ldr	r3, [r2, #4]
 800238e:	f023 0303 	bic.w	r3, r3, #3
 8002392:	6053      	str	r3, [r2, #4]
 8002394:	e7e6      	b.n	8002364 <SPI_DMAReceiveCplt+0x34>
      HAL_SPI_ErrorCallback(hspi);
 8002396:	4620      	mov	r0, r4
 8002398:	f7ff ffb8 	bl	800230c <HAL_SPI_ErrorCallback>
      return;
 800239c:	e7f4      	b.n	8002388 <SPI_DMAReceiveCplt+0x58>

0800239e <SPI_DMATransmitReceiveCplt>:
{
 800239e:	b538      	push	{r3, r4, r5, lr}
 80023a0:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80023a2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 80023a4:	f7fe fe09 	bl	8000fba <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80023a8:	682b      	ldr	r3, [r5, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f413 7f80 	tst.w	r3, #256	; 0x100
 80023b0:	d11b      	bne.n	80023ea <SPI_DMATransmitReceiveCplt+0x4c>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80023b2:	6822      	ldr	r2, [r4, #0]
 80023b4:	6853      	ldr	r3, [r2, #4]
 80023b6:	f023 0320 	bic.w	r3, r3, #32
 80023ba:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80023bc:	4602      	mov	r2, r0
 80023be:	2164      	movs	r1, #100	; 0x64
 80023c0:	4620      	mov	r0, r4
 80023c2:	f7ff fda6 	bl	8001f12 <SPI_EndRxTxTransaction>
 80023c6:	b118      	cbz	r0, 80023d0 <SPI_DMATransmitReceiveCplt+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80023ca:	f043 0320 	orr.w	r3, r3, #32
 80023ce:	6563      	str	r3, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80023d0:	6822      	ldr	r2, [r4, #0]
 80023d2:	6853      	ldr	r3, [r2, #4]
 80023d4:	f023 0303 	bic.w	r3, r3, #3
 80023d8:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80023de:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80023e0:	2301      	movs	r3, #1
 80023e2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80023e8:	b91b      	cbnz	r3, 80023f2 <SPI_DMATransmitReceiveCplt+0x54>
  HAL_SPI_TxRxCpltCallback(hspi);
 80023ea:	4620      	mov	r0, r4
 80023ec:	f7ff ff81 	bl	80022f2 <HAL_SPI_TxRxCpltCallback>
}
 80023f0:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 80023f2:	4620      	mov	r0, r4
 80023f4:	f7ff ff8a 	bl	800230c <HAL_SPI_ErrorCallback>
      return;
 80023f8:	e7fa      	b.n	80023f0 <SPI_DMATransmitReceiveCplt+0x52>
	...

080023fc <__libc_init_array>:
 80023fc:	b570      	push	{r4, r5, r6, lr}
 80023fe:	4e0d      	ldr	r6, [pc, #52]	; (8002434 <__libc_init_array+0x38>)
 8002400:	4c0d      	ldr	r4, [pc, #52]	; (8002438 <__libc_init_array+0x3c>)
 8002402:	1ba4      	subs	r4, r4, r6
 8002404:	10a4      	asrs	r4, r4, #2
 8002406:	2500      	movs	r5, #0
 8002408:	42a5      	cmp	r5, r4
 800240a:	d109      	bne.n	8002420 <__libc_init_array+0x24>
 800240c:	4e0b      	ldr	r6, [pc, #44]	; (800243c <__libc_init_array+0x40>)
 800240e:	4c0c      	ldr	r4, [pc, #48]	; (8002440 <__libc_init_array+0x44>)
 8002410:	f000 f82c 	bl	800246c <_init>
 8002414:	1ba4      	subs	r4, r4, r6
 8002416:	10a4      	asrs	r4, r4, #2
 8002418:	2500      	movs	r5, #0
 800241a:	42a5      	cmp	r5, r4
 800241c:	d105      	bne.n	800242a <__libc_init_array+0x2e>
 800241e:	bd70      	pop	{r4, r5, r6, pc}
 8002420:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002424:	4798      	blx	r3
 8002426:	3501      	adds	r5, #1
 8002428:	e7ee      	b.n	8002408 <__libc_init_array+0xc>
 800242a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800242e:	4798      	blx	r3
 8002430:	3501      	adds	r5, #1
 8002432:	e7f2      	b.n	800241a <__libc_init_array+0x1e>
 8002434:	080024a4 	.word	0x080024a4
 8002438:	080024a4 	.word	0x080024a4
 800243c:	080024a4 	.word	0x080024a4
 8002440:	080024a8 	.word	0x080024a8

08002444 <memcpy>:
 8002444:	b510      	push	{r4, lr}
 8002446:	1e43      	subs	r3, r0, #1
 8002448:	440a      	add	r2, r1
 800244a:	4291      	cmp	r1, r2
 800244c:	d100      	bne.n	8002450 <memcpy+0xc>
 800244e:	bd10      	pop	{r4, pc}
 8002450:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002454:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002458:	e7f7      	b.n	800244a <memcpy+0x6>

0800245a <memset>:
 800245a:	4402      	add	r2, r0
 800245c:	4603      	mov	r3, r0
 800245e:	4293      	cmp	r3, r2
 8002460:	d100      	bne.n	8002464 <memset+0xa>
 8002462:	4770      	bx	lr
 8002464:	f803 1b01 	strb.w	r1, [r3], #1
 8002468:	e7f9      	b.n	800245e <memset+0x4>
	...

0800246c <_init>:
 800246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246e:	bf00      	nop
 8002470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002472:	bc08      	pop	{r3}
 8002474:	469e      	mov	lr, r3
 8002476:	4770      	bx	lr

08002478 <_fini>:
 8002478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247a:	bf00      	nop
 800247c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800247e:	bc08      	pop	{r3}
 8002480:	469e      	mov	lr, r3
 8002482:	4770      	bx	lr
